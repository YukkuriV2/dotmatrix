
dotmatrix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b10  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08004ca0  08004ca0  00005ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e0c  08004e0c  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004e0c  08004e0c  00005e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e14  08004e14  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e14  08004e14  00005e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e18  08004e18  00005e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004e1c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  20000068  08004e84  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000518  08004e84  00006518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de61  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024b1  00000000  00000000  00013ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  000163b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000983  00000000  00000000  00017038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021600  00000000  00000000  000179bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff36  00000000  00000000  00038fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3015  00000000  00000000  00048ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010bf06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b58  00000000  00000000  0010bf4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010faa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c88 	.word	0x08004c88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004c88 	.word	0x08004c88

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MAX7219_Send>:
 *
 * @param address The address of the register to configure.
 * @param data The data value to write to the register.
 */
void MAX7219_Send(uint8_t address, uint8_t data)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	460a      	mov	r2, r1
 800057a:	71fb      	strb	r3, [r7, #7]
 800057c:	4613      	mov	r3, r2
 800057e:	71bb      	strb	r3, [r7, #6]
    uint8_t txData[2] = {address, data};
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	733b      	strb	r3, [r7, #12]
 8000584:	79bb      	ldrb	r3, [r7, #6]
 8000586:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2101      	movs	r1, #1
 800058c:	4809      	ldr	r0, [pc, #36]	@ (80005b4 <MAX7219_Send+0x44>)
 800058e:	f001 f8df 	bl	8001750 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, txData, 2, HAL_MAX_DELAY);
 8000592:	f107 010c 	add.w	r1, r7, #12
 8000596:	f04f 33ff 	mov.w	r3, #4294967295
 800059a:	2202      	movs	r2, #2
 800059c:	4806      	ldr	r0, [pc, #24]	@ (80005b8 <MAX7219_Send+0x48>)
 800059e:	f002 fb36 	bl	8002c0e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2101      	movs	r1, #1
 80005a6:	4803      	ldr	r0, [pc, #12]	@ (80005b4 <MAX7219_Send+0x44>)
 80005a8:	f001 f8d2 	bl	8001750 <HAL_GPIO_WritePin>

}
 80005ac:	bf00      	nop
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	48000400 	.word	0x48000400
 80005b8:	200002d8 	.word	0x200002d8

080005bc <MAX7219_Init>:
 *        Scan-Limit, Decode-Mode, Shutdown-Mode, Display-Test-Mode,
 *        Intensity, and Display-Size.
 */

void MAX7219_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
    MAX7219_Send(0x0C, 0x01); // Shutdown-Mode close
 80005c0:	2101      	movs	r1, #1
 80005c2:	200c      	movs	r0, #12
 80005c4:	f7ff ffd4 	bl	8000570 <MAX7219_Send>
    MAX7219_Send(0x0F, 0x00); // Display-Test-Mode close
 80005c8:	2100      	movs	r1, #0
 80005ca:	200f      	movs	r0, #15
 80005cc:	f7ff ffd0 	bl	8000570 <MAX7219_Send>
    MAX7219_Send(0x0B, 0x07); // Scan-Limit for all digits
 80005d0:	2107      	movs	r1, #7
 80005d2:	200b      	movs	r0, #11
 80005d4:	f7ff ffcc 	bl	8000570 <MAX7219_Send>
    MAX7219_Send(0x0A, 0x01); // Intensity as 100%
 80005d8:	2101      	movs	r1, #1
 80005da:	200a      	movs	r0, #10
 80005dc:	f7ff ffc8 	bl	8000570 <MAX7219_Send>
    MAX7219_Send(0x09, 0x00); // Decode-Mode shutdown
 80005e0:	2100      	movs	r1, #0
 80005e2:	2009      	movs	r0, #9
 80005e4:	f7ff ffc4 	bl	8000570 <MAX7219_Send>
    clearMatrix();
 80005e8:	f000 f802 	bl	80005f0 <clearMatrix>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <clearMatrix>:

/**
 * @brief  Clears all pixels on the LED matrix by setting all registers to 0.
 */
void clearMatrix(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
    for (uint8_t i = 1; i <= 8; i++)
 80005f6:	2301      	movs	r3, #1
 80005f8:	71fb      	strb	r3, [r7, #7]
 80005fa:	e007      	b.n	800060c <clearMatrix+0x1c>
    {
        MAX7219_Send(i, 0x00);
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff ffb5 	bl	8000570 <MAX7219_Send>
    for (uint8_t i = 1; i <= 8; i++)
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	3301      	adds	r3, #1
 800060a:	71fb      	strb	r3, [r7, #7]
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	2b08      	cmp	r3, #8
 8000610:	d9f4      	bls.n	80005fc <clearMatrix+0xc>
    }
}
 8000612:	bf00      	nop
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <LED_Clear>:


/**
 * @brief Clears the LED matrix by setting all pixels to 0.
 */
void LED_Clear(void) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
    for (int i = 0; i < 8; i++) {
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	e013      	b.n	8000650 <LED_Clear+0x34>
        for (int j = 0; j < 8; j++) {
 8000628:	2300      	movs	r3, #0
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	e00a      	b.n	8000644 <LED_Clear+0x28>
            ledMatrix[i][j] = 0;
 800062e:	4a0d      	ldr	r2, [pc, #52]	@ (8000664 <LED_Clear+0x48>)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	00db      	lsls	r3, r3, #3
 8000634:	441a      	add	r2, r3
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	4413      	add	r3, r2
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 8; j++) {
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	3301      	adds	r3, #1
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	2b07      	cmp	r3, #7
 8000648:	ddf1      	ble.n	800062e <LED_Clear+0x12>
    for (int i = 0; i < 8; i++) {
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	3301      	adds	r3, #1
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2b07      	cmp	r3, #7
 8000654:	dde8      	ble.n	8000628 <LED_Clear+0xc>
        }
    }
    clearMatrix();
 8000656:	f7ff ffcb 	bl	80005f0 <clearMatrix>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000084 	.word	0x20000084

08000668 <LED_SetPixel>:
 *
 * @param x The x-coordinate of the pixel.
 * @param y The y-coordinate of the pixel.
 * @param value The value to set (1 to turn on, 0 to turn off).
 */
void LED_SetPixel(int x, int y, int value) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b088      	sub	sp, #32
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
    if (x < 0 || x >= 8 || y < 0 || y >= 8) {
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	2b00      	cmp	r3, #0
 8000678:	db3b      	blt.n	80006f2 <LED_SetPixel+0x8a>
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	2b07      	cmp	r3, #7
 800067e:	dc38      	bgt.n	80006f2 <LED_SetPixel+0x8a>
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	2b00      	cmp	r3, #0
 8000684:	db35      	blt.n	80006f2 <LED_SetPixel+0x8a>
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	2b07      	cmp	r3, #7
 800068a:	dc32      	bgt.n	80006f2 <LED_SetPixel+0x8a>
        return; // Out of bounds
    }

    ledMatrix[y][x] = value; // Update the state of the LED matrix
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	b2d9      	uxtb	r1, r3
 8000690:	4a1a      	ldr	r2, [pc, #104]	@ (80006fc <LED_SetPixel+0x94>)
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	00db      	lsls	r3, r3, #3
 8000696:	441a      	add	r2, r3
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	4413      	add	r3, r2
 800069c:	460a      	mov	r2, r1
 800069e:	701a      	strb	r2, [r3, #0]

    uint8_t row = y + 1; // MAX7219 rows are 1-indexed
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	3301      	adds	r3, #1
 80006a6:	75fb      	strb	r3, [r7, #23]
    uint8_t currentRowData = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	77fb      	strb	r3, [r7, #31]

    for (int i = 0; i < 8; i++) {
 80006ac:	2300      	movs	r3, #0
 80006ae:	61bb      	str	r3, [r7, #24]
 80006b0:	e015      	b.n	80006de <LED_SetPixel+0x76>
        if (ledMatrix[y][i]) {
 80006b2:	4a12      	ldr	r2, [pc, #72]	@ (80006fc <LED_SetPixel+0x94>)
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	00db      	lsls	r3, r3, #3
 80006b8:	441a      	add	r2, r3
 80006ba:	69bb      	ldr	r3, [r7, #24]
 80006bc:	4413      	add	r3, r2
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d009      	beq.n	80006d8 <LED_SetPixel+0x70>
            currentRowData |= (1 << i);
 80006c4:	2201      	movs	r2, #1
 80006c6:	69bb      	ldr	r3, [r7, #24]
 80006c8:	fa02 f303 	lsl.w	r3, r2, r3
 80006cc:	b25a      	sxtb	r2, r3
 80006ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80006d2:	4313      	orrs	r3, r2
 80006d4:	b25b      	sxtb	r3, r3
 80006d6:	77fb      	strb	r3, [r7, #31]
    for (int i = 0; i < 8; i++) {
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	3301      	adds	r3, #1
 80006dc:	61bb      	str	r3, [r7, #24]
 80006de:	69bb      	ldr	r3, [r7, #24]
 80006e0:	2b07      	cmp	r3, #7
 80006e2:	dde6      	ble.n	80006b2 <LED_SetPixel+0x4a>
        }
    }

    MAX7219_Send(row, currentRowData); // Send updated row data
 80006e4:	7ffa      	ldrb	r2, [r7, #31]
 80006e6:	7dfb      	ldrb	r3, [r7, #23]
 80006e8:	4611      	mov	r1, r2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff40 	bl	8000570 <MAX7219_Send>
 80006f0:	e000      	b.n	80006f4 <LED_SetPixel+0x8c>
        return; // Out of bounds
 80006f2:	bf00      	nop
}
 80006f4:	3720      	adds	r7, #32
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000084 	.word	0x20000084

08000700 <LED_Update>:

void LED_Update(void) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
	for (int y = 0; y < 8; y++) {
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	e02a      	b.n	8000762 <LED_Update+0x62>
	        uint8_t row = y + 1; // MAX7219 rows are 1-indexed
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	b2db      	uxtb	r3, r3
 8000710:	3301      	adds	r3, #1
 8000712:	70fb      	strb	r3, [r7, #3]
	        uint8_t currentRowData = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	72fb      	strb	r3, [r7, #11]

	        for (int x = 0; x < 8; x++) {
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	e015      	b.n	800074a <LED_Update+0x4a>
	            if (ledMatrix[y][x]) {
 800071e:	4a15      	ldr	r2, [pc, #84]	@ (8000774 <LED_Update+0x74>)
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	00db      	lsls	r3, r3, #3
 8000724:	441a      	add	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4413      	add	r3, r2
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d009      	beq.n	8000744 <LED_Update+0x44>
	                currentRowData |= (1 << x);
 8000730:	2201      	movs	r2, #1
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	fa02 f303 	lsl.w	r3, r2, r3
 8000738:	b25a      	sxtb	r2, r3
 800073a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800073e:	4313      	orrs	r3, r2
 8000740:	b25b      	sxtb	r3, r3
 8000742:	72fb      	strb	r3, [r7, #11]
	        for (int x = 0; x < 8; x++) {
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3301      	adds	r3, #1
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2b07      	cmp	r3, #7
 800074e:	dde6      	ble.n	800071e <LED_Update+0x1e>
	            }
	        }

	        MAX7219_Send(row, currentRowData); // Send updated row data
 8000750:	7afa      	ldrb	r2, [r7, #11]
 8000752:	78fb      	ldrb	r3, [r7, #3]
 8000754:	4611      	mov	r1, r2
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ff0a 	bl	8000570 <MAX7219_Send>
	for (int y = 0; y < 8; y++) {
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	3301      	adds	r3, #1
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	2b07      	cmp	r3, #7
 8000766:	ddd1      	ble.n	800070c <LED_Update+0xc>
	    }
}
 8000768:	bf00      	nop
 800076a:	bf00      	nop
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000084 	.word	0x20000084

08000778 <welcome_animation>:
/**
 * @brief Displays a welcome animation on the LED matrix.
 *
 * This function shows a simple animation on the LED matrix when the STM32 is turned on.
 */
void welcome_animation(void) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
    for (int i = 0; i < 8; i++) {
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	e015      	b.n	80007b0 <welcome_animation+0x38>
        for (int j = 0; j < 8; j++) {
 8000784:	2300      	movs	r3, #0
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	e00c      	b.n	80007a4 <welcome_animation+0x2c>
            LED_SetPixel(i, j, 1);
 800078a:	2201      	movs	r2, #1
 800078c:	6839      	ldr	r1, [r7, #0]
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f7ff ff6a 	bl	8000668 <LED_SetPixel>
            LED_Update();
 8000794:	f7ff ffb4 	bl	8000700 <LED_Update>
            HAL_Delay(50);
 8000798:	2032      	movs	r0, #50	@ 0x32
 800079a:	f000 fd65 	bl	8001268 <HAL_Delay>
        for (int j = 0; j < 8; j++) {
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	3301      	adds	r3, #1
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	2b07      	cmp	r3, #7
 80007a8:	ddef      	ble.n	800078a <welcome_animation+0x12>
    for (int i = 0; i < 8; i++) {
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	3301      	adds	r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b07      	cmp	r3, #7
 80007b4:	dde6      	ble.n	8000784 <welcome_animation+0xc>
        }
    }
    HAL_Delay(500);
 80007b6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007ba:	f000 fd55 	bl	8001268 <HAL_Delay>
    LED_Clear();
 80007be:	f7ff ff2d 	bl	800061c <LED_Clear>
    LED_Update();
 80007c2:	f7ff ff9d 	bl	8000700 <LED_Update>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 030c 	add.w	r3, r7, #12
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b24      	ldr	r3, [pc, #144]	@ (8000878 <MX_GPIO_Init+0xa8>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a23      	ldr	r2, [pc, #140]	@ (8000878 <MX_GPIO_Init+0xa8>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b21      	ldr	r3, [pc, #132]	@ (8000878 <MX_GPIO_Init+0xa8>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000878 <MX_GPIO_Init+0xa8>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a1d      	ldr	r2, [pc, #116]	@ (8000878 <MX_GPIO_Init+0xa8>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <MX_GPIO_Init+0xa8>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b18      	ldr	r3, [pc, #96]	@ (8000878 <MX_GPIO_Init+0xa8>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a17      	ldr	r2, [pc, #92]	@ (8000878 <MX_GPIO_Init+0xa8>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <MX_GPIO_Init+0xa8>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2101      	movs	r1, #1
 8000832:	4812      	ldr	r0, [pc, #72]	@ (800087c <MX_GPIO_Init+0xac>)
 8000834:	f000 ff8c 	bl	8001750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000838:	2308      	movs	r3, #8
 800083a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	4619      	mov	r1, r3
 800084a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800084e:	f000 fe15 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000852:	2301      	movs	r3, #1
 8000854:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	4619      	mov	r1, r3
 8000868:	4804      	ldr	r0, [pc, #16]	@ (800087c <MX_GPIO_Init+0xac>)
 800086a:	f000 fe07 	bl	800147c <HAL_GPIO_Init>

}
 800086e:	bf00      	nop
 8000870:	3720      	adds	r7, #32
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40021000 	.word	0x40021000
 800087c:	48000400 	.word	0x48000400

08000880 <init_game>:
 *
 * This function sets the initial length and position of the snake,
 * sets the initial direction, and places the fruit at a random position.
 */

void init_game() {
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
    snake.length = 1;
 8000884:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <init_game+0x5c>)
 8000886:	2201      	movs	r2, #1
 8000888:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    snake.body[0].x = MATRIX_WIDTH / 2;
 800088c:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <init_game+0x5c>)
 800088e:	2204      	movs	r2, #4
 8000890:	601a      	str	r2, [r3, #0]
    snake.body[0].y = MATRIX_HEIGHT / 2;
 8000892:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <init_game+0x5c>)
 8000894:	2204      	movs	r2, #4
 8000896:	605a      	str	r2, [r3, #4]
    snake.direction.x = 1;
 8000898:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <init_game+0x5c>)
 800089a:	2201      	movs	r2, #1
 800089c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    snake.direction.y = 0;
 80008a0:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <init_game+0x5c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
    fruit.x = rand() % MATRIX_WIDTH;
 80008a8:	f003 f9da 	bl	8003c60 <rand>
 80008ac:	4603      	mov	r3, r0
 80008ae:	425a      	negs	r2, r3
 80008b0:	f003 0307 	and.w	r3, r3, #7
 80008b4:	f002 0207 	and.w	r2, r2, #7
 80008b8:	bf58      	it	pl
 80008ba:	4253      	negpl	r3, r2
 80008bc:	4a08      	ldr	r2, [pc, #32]	@ (80008e0 <init_game+0x60>)
 80008be:	6013      	str	r3, [r2, #0]
    fruit.y = rand() % MATRIX_HEIGHT;
 80008c0:	f003 f9ce 	bl	8003c60 <rand>
 80008c4:	4603      	mov	r3, r0
 80008c6:	425a      	negs	r2, r3
 80008c8:	f003 0307 	and.w	r3, r3, #7
 80008cc:	f002 0207 	and.w	r2, r2, #7
 80008d0:	bf58      	it	pl
 80008d2:	4253      	negpl	r3, r2
 80008d4:	4a02      	ldr	r2, [pc, #8]	@ (80008e0 <init_game+0x60>)
 80008d6:	6053      	str	r3, [r2, #4]
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200000cc 	.word	0x200000cc
 80008e0:	200000c4 	.word	0x200000c4

080008e4 <check_collision>:
 * This function checks if the snake's new head position collides with the walls
 * or with its own body. If a collision with the wall is detected, the game is reset.
 * If a collision with the snake's body is detected, the snake's length is reduced.
 */

void check_collision(Point new_head) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	463b      	mov	r3, r7
 80008ec:	e883 0003 	stmia.w	r3, {r0, r1}
    // Check for wall collision
    if (new_head.x < 0 || new_head.x >= MATRIX_WIDTH || new_head.y < 0 || new_head.y >= MATRIX_HEIGHT) {
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	db08      	blt.n	8000908 <check_collision+0x24>
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	2b07      	cmp	r3, #7
 80008fa:	dc05      	bgt.n	8000908 <check_collision+0x24>
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	db02      	blt.n	8000908 <check_collision+0x24>
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b07      	cmp	r3, #7
 8000906:	dd11      	ble.n	800092c <check_collision+0x48>
        LED_Clear();
 8000908:	f7ff fe88 	bl	800061c <LED_Clear>
        const char *msg = "Game Over: Wall Collision\r\n";
 800090c:	4b1f      	ldr	r3, [pc, #124]	@ (800098c <check_collision+0xa8>)
 800090e:	60fb      	str	r3, [r7, #12]
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000910:	68f8      	ldr	r0, [r7, #12]
 8000912:	f7ff fc5d 	bl	80001d0 <strlen>
 8000916:	4603      	mov	r3, r0
 8000918:	b29a      	uxth	r2, r3
 800091a:	f04f 33ff 	mov.w	r3, #4294967295
 800091e:	68f9      	ldr	r1, [r7, #12]
 8000920:	481b      	ldr	r0, [pc, #108]	@ (8000990 <check_collision+0xac>)
 8000922:	f002 fc9d 	bl	8003260 <HAL_UART_Transmit>
        init_game();
 8000926:	f7ff ffab 	bl	8000880 <init_game>
        return;
 800092a:	e02c      	b.n	8000986 <check_collision+0xa2>
    }

    // Check for self-collision
    for (int i = 0; i < snake.length; i++) {
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	e023      	b.n	800097a <check_collision+0x96>
        if (new_head.x == snake.body[i].x && new_head.y == snake.body[i].y) {
 8000932:	683a      	ldr	r2, [r7, #0]
 8000934:	4917      	ldr	r1, [pc, #92]	@ (8000994 <check_collision+0xb0>)
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800093c:	429a      	cmp	r2, r3
 800093e:	d119      	bne.n	8000974 <check_collision+0x90>
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	4914      	ldr	r1, [pc, #80]	@ (8000994 <check_collision+0xb0>)
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	00db      	lsls	r3, r3, #3
 8000948:	440b      	add	r3, r1
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	429a      	cmp	r2, r3
 800094e:	d111      	bne.n	8000974 <check_collision+0x90>
            snake.length = i; // Reduce length to the point of collision
 8000950:	4a10      	ldr	r2, [pc, #64]	@ (8000994 <check_collision+0xb0>)
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
            const char *msg = "Snake ate itself\r\n";
 8000958:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <check_collision+0xb4>)
 800095a:	613b      	str	r3, [r7, #16]
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800095c:	6938      	ldr	r0, [r7, #16]
 800095e:	f7ff fc37 	bl	80001d0 <strlen>
 8000962:	4603      	mov	r3, r0
 8000964:	b29a      	uxth	r2, r3
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	6939      	ldr	r1, [r7, #16]
 800096c:	4808      	ldr	r0, [pc, #32]	@ (8000990 <check_collision+0xac>)
 800096e:	f002 fc77 	bl	8003260 <HAL_UART_Transmit>
            break;
 8000972:	e008      	b.n	8000986 <check_collision+0xa2>
    for (int i = 0; i < snake.length; i++) {
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	3301      	adds	r3, #1
 8000978:	617b      	str	r3, [r7, #20]
 800097a:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <check_collision+0xb0>)
 800097c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000980:	697a      	ldr	r2, [r7, #20]
 8000982:	429a      	cmp	r2, r3
 8000984:	dbd5      	blt.n	8000932 <check_collision+0x4e>
        }
    }
}
 8000986:	3718      	adds	r7, #24
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	08004ca0 	.word	0x08004ca0
 8000990:	20000340 	.word	0x20000340
 8000994:	200000cc 	.word	0x200000cc
 8000998:	08004cbc 	.word	0x08004cbc

0800099c <move_snake>:
 * @brief Moves the snake in the current direction.
 *
 * This function updates the snake's position based on its current direction.
 * It also checks for collisions and handles the snake eating the fruit.
 */
void move_snake() {
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
    Point new_head = {snake.body[0].x + snake.direction.x, snake.body[0].y + snake.direction.y};
 80009a2:	4b36      	ldr	r3, [pc, #216]	@ (8000a7c <move_snake+0xe0>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	4b35      	ldr	r3, [pc, #212]	@ (8000a7c <move_snake+0xe0>)
 80009a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80009ac:	4413      	add	r3, r2
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	4b32      	ldr	r3, [pc, #200]	@ (8000a7c <move_snake+0xe0>)
 80009b2:	685a      	ldr	r2, [r3, #4]
 80009b4:	4b31      	ldr	r3, [pc, #196]	@ (8000a7c <move_snake+0xe0>)
 80009b6:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80009ba:	4413      	add	r3, r2
 80009bc:	607b      	str	r3, [r7, #4]

    check_collision(new_head);
 80009be:	463b      	mov	r3, r7
 80009c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80009c4:	f7ff ff8e 	bl	80008e4 <check_collision>

    if (new_head.x == fruit.x && new_head.y == fruit.y) {
 80009c8:	683a      	ldr	r2, [r7, #0]
 80009ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000a80 <move_snake+0xe4>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	d130      	bne.n	8000a34 <move_snake+0x98>
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000a80 <move_snake+0xe4>)
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d12b      	bne.n	8000a34 <move_snake+0x98>
        snake.length++;
 80009dc:	4b27      	ldr	r3, [pc, #156]	@ (8000a7c <move_snake+0xe0>)
 80009de:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80009e2:	3301      	adds	r3, #1
 80009e4:	4a25      	ldr	r2, [pc, #148]	@ (8000a7c <move_snake+0xe0>)
 80009e6:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
        fruit.x = rand() % MATRIX_WIDTH;
 80009ea:	f003 f939 	bl	8003c60 <rand>
 80009ee:	4603      	mov	r3, r0
 80009f0:	425a      	negs	r2, r3
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	f002 0207 	and.w	r2, r2, #7
 80009fa:	bf58      	it	pl
 80009fc:	4253      	negpl	r3, r2
 80009fe:	4a20      	ldr	r2, [pc, #128]	@ (8000a80 <move_snake+0xe4>)
 8000a00:	6013      	str	r3, [r2, #0]
        fruit.y = rand() % MATRIX_HEIGHT;
 8000a02:	f003 f92d 	bl	8003c60 <rand>
 8000a06:	4603      	mov	r3, r0
 8000a08:	425a      	negs	r2, r3
 8000a0a:	f003 0307 	and.w	r3, r3, #7
 8000a0e:	f002 0207 	and.w	r2, r2, #7
 8000a12:	bf58      	it	pl
 8000a14:	4253      	negpl	r3, r2
 8000a16:	4a1a      	ldr	r2, [pc, #104]	@ (8000a80 <move_snake+0xe4>)
 8000a18:	6053      	str	r3, [r2, #4]
        const char *msg = "Snake ate food\r\n";
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a84 <move_snake+0xe8>)
 8000a1c:	60bb      	str	r3, [r7, #8]
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000a1e:	68b8      	ldr	r0, [r7, #8]
 8000a20:	f7ff fbd6 	bl	80001d0 <strlen>
 8000a24:	4603      	mov	r3, r0
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2c:	68b9      	ldr	r1, [r7, #8]
 8000a2e:	4816      	ldr	r0, [pc, #88]	@ (8000a88 <move_snake+0xec>)
 8000a30:	f002 fc16 	bl	8003260 <HAL_UART_Transmit>
    }

    for (int i = snake.length - 1; i > 0; i--) {
 8000a34:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <move_snake+0xe0>)
 8000a36:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	e00f      	b.n	8000a60 <move_snake+0xc4>
        snake.body[i] = snake.body[i - 1];
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	1e5a      	subs	r2, r3, #1
 8000a44:	480d      	ldr	r0, [pc, #52]	@ (8000a7c <move_snake+0xe0>)
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	490c      	ldr	r1, [pc, #48]	@ (8000a7c <move_snake+0xe0>)
 8000a4a:	00db      	lsls	r3, r3, #3
 8000a4c:	4403      	add	r3, r0
 8000a4e:	00d2      	lsls	r2, r2, #3
 8000a50:	440a      	add	r2, r1
 8000a52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a56:	e883 0003 	stmia.w	r3, {r0, r1}
    for (int i = snake.length - 1; i > 0; i--) {
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	3b01      	subs	r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	dcec      	bgt.n	8000a40 <move_snake+0xa4>
    }
    snake.body[0] = new_head;
 8000a66:	4b05      	ldr	r3, [pc, #20]	@ (8000a7c <move_snake+0xe0>)
 8000a68:	461a      	mov	r2, r3
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a70:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000a74:	bf00      	nop
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	200000cc 	.word	0x200000cc
 8000a80:	200000c4 	.word	0x200000c4
 8000a84:	08004cd0 	.word	0x08004cd0
 8000a88:	20000340 	.word	0x20000340

08000a8c <update_direction>:
 *
 * This function changes the snake's direction to move towards the fruit.
 * The direction is updated based on the current position of the snake's head
 * and the position of the fruit.
 */
void update_direction() {
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
    if (snake.body[0].x < fruit.x) {
 8000a90:	4b20      	ldr	r3, [pc, #128]	@ (8000b14 <update_direction+0x88>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b20      	ldr	r3, [pc, #128]	@ (8000b18 <update_direction+0x8c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	da08      	bge.n	8000aae <update_direction+0x22>
        snake.direction.x = 1;
 8000a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000b14 <update_direction+0x88>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
        snake.direction.y = 0;
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b14 <update_direction+0x88>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
        snake.direction.y = 1;
    } else if (snake.body[0].y > fruit.y) {
        snake.direction.x = 0;
        snake.direction.y = -1;
    }
}
 8000aac:	e02d      	b.n	8000b0a <update_direction+0x7e>
    } else if (snake.body[0].x > fruit.x) {
 8000aae:	4b19      	ldr	r3, [pc, #100]	@ (8000b14 <update_direction+0x88>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	4b19      	ldr	r3, [pc, #100]	@ (8000b18 <update_direction+0x8c>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	dd09      	ble.n	8000ace <update_direction+0x42>
        snake.direction.x = -1;
 8000aba:	4b16      	ldr	r3, [pc, #88]	@ (8000b14 <update_direction+0x88>)
 8000abc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
        snake.direction.y = 0;
 8000ac4:	4b13      	ldr	r3, [pc, #76]	@ (8000b14 <update_direction+0x88>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
}
 8000acc:	e01d      	b.n	8000b0a <update_direction+0x7e>
    } else if (snake.body[0].y < fruit.y) {
 8000ace:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <update_direction+0x88>)
 8000ad0:	685a      	ldr	r2, [r3, #4]
 8000ad2:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <update_direction+0x8c>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	da08      	bge.n	8000aec <update_direction+0x60>
        snake.direction.x = 0;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <update_direction+0x88>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
        snake.direction.y = 1;
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b14 <update_direction+0x88>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
}
 8000aea:	e00e      	b.n	8000b0a <update_direction+0x7e>
    } else if (snake.body[0].y > fruit.y) {
 8000aec:	4b09      	ldr	r3, [pc, #36]	@ (8000b14 <update_direction+0x88>)
 8000aee:	685a      	ldr	r2, [r3, #4]
 8000af0:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <update_direction+0x8c>)
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	dd08      	ble.n	8000b0a <update_direction+0x7e>
        snake.direction.x = 0;
 8000af8:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <update_direction+0x88>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
        snake.direction.y = -1;
 8000b00:	4b04      	ldr	r3, [pc, #16]	@ (8000b14 <update_direction+0x88>)
 8000b02:	f04f 32ff 	mov.w	r2, #4294967295
 8000b06:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	200000cc 	.word	0x200000cc
 8000b18:	200000c4 	.word	0x200000c4

08000b1c <display_game>:
 * @brief Displays the current game state on the LED matrix.
 *
 * This function clears the LED matrix and sets the pixels for the snake's body
 * and the fruit. It then updates the LED matrix to reflect the current game state.
 */
void display_game() {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
    LED_Clear();
 8000b22:	f7ff fd7b 	bl	800061c <LED_Clear>
    for (int i = 0; i < snake.length; i++) {
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	e00f      	b.n	8000b4c <display_game+0x30>
        LED_SetPixel(snake.body[i].x, snake.body[i].y, 1);
 8000b2c:	4a11      	ldr	r2, [pc, #68]	@ (8000b74 <display_game+0x58>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000b34:	4a0f      	ldr	r2, [pc, #60]	@ (8000b74 <display_game+0x58>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	4413      	add	r3, r2
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	2201      	movs	r2, #1
 8000b40:	4619      	mov	r1, r3
 8000b42:	f7ff fd91 	bl	8000668 <LED_SetPixel>
    for (int i = 0; i < snake.length; i++) {
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <display_game+0x58>)
 8000b4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	dbe9      	blt.n	8000b2c <display_game+0x10>
    }
    LED_SetPixel(fruit.x, fruit.y, 1);
 8000b58:	4b07      	ldr	r3, [pc, #28]	@ (8000b78 <display_game+0x5c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a06      	ldr	r2, [pc, #24]	@ (8000b78 <display_game+0x5c>)
 8000b5e:	6851      	ldr	r1, [r2, #4]
 8000b60:	2201      	movs	r2, #1
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fd80 	bl	8000668 <LED_SetPixel>
    LED_Update();
 8000b68:	f7ff fdca 	bl	8000700 <LED_Update>
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	200000cc 	.word	0x200000cc
 8000b78:	200000c4 	.word	0x200000c4

08000b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
    srand(time(NULL));
 8000b80:	2000      	movs	r0, #0
 8000b82:	f003 f9b9 	bl	8003ef8 <time>
 8000b86:	4602      	mov	r2, r0
 8000b88:	460b      	mov	r3, r1
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f003 f839 	bl	8003c04 <srand>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b92:	f000 faf4 	bl	800117e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b96:	f000 f819 	bl	8000bcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b9a:	f7ff fe19 	bl	80007d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b9e:	f000 fa2b 	bl	8000ff8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000ba2:	f000 f87b 	bl	8000c9c <MX_SPI1_Init>
  MAX7219_Init();
 8000ba6:	f7ff fd09 	bl	80005bc <MAX7219_Init>
  /* USER CODE BEGIN 2 */
  welcome_animation();
 8000baa:	f7ff fde5 	bl	8000778 <welcome_animation>
  init_game();
 8000bae:	f7ff fe67 	bl	8000880 <init_game>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      update_direction();
 8000bb2:	f7ff ff6b 	bl	8000a8c <update_direction>
      move_snake();
 8000bb6:	f7ff fef1 	bl	800099c <move_snake>
      display_game();
 8000bba:	f7ff ffaf 	bl	8000b1c <display_game>
      HAL_Delay(500);
 8000bbe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bc2:	f000 fb51 	bl	8001268 <HAL_Delay>
      update_direction();
 8000bc6:	bf00      	nop
 8000bc8:	e7f3      	b.n	8000bb2 <main+0x36>
	...

08000bcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b096      	sub	sp, #88	@ 0x58
 8000bd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	2244      	movs	r2, #68	@ 0x44
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f003 f983 	bl	8003ee6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be0:	463b      	mov	r3, r7
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000bf2:	f000 fde3 	bl	80017bc <HAL_PWREx_ControlVoltageScaling>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000bfc:	f000 f848 	bl	8000c90 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c00:	f000 fdbe 	bl	8001780 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000c04:	4b21      	ldr	r3, [pc, #132]	@ (8000c8c <SystemClock_Config+0xc0>)
 8000c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000c0a:	4a20      	ldr	r2, [pc, #128]	@ (8000c8c <SystemClock_Config+0xc0>)
 8000c0c:	f023 0318 	bic.w	r3, r3, #24
 8000c10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000c14:	2314      	movs	r3, #20
 8000c16:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c24:	2360      	movs	r3, #96	@ 0x60
 8000c26:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c30:	2301      	movs	r3, #1
 8000c32:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000c34:	2310      	movs	r3, #16
 8000c36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c38:	2307      	movs	r3, #7
 8000c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c40:	2302      	movs	r3, #2
 8000c42:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f000 fe0d 	bl	8001868 <HAL_RCC_OscConfig>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000c54:	f000 f81c 	bl	8000c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c58:	230f      	movs	r3, #15
 8000c5a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	2101      	movs	r1, #1
 8000c70:	4618      	mov	r0, r3
 8000c72:	f001 fa0d 	bl	8002090 <HAL_RCC_ClockConfig>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000c7c:	f000 f808 	bl	8000c90 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000c80:	f001 fe20 	bl	80028c4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000c84:	bf00      	nop
 8000c86:	3758      	adds	r7, #88	@ 0x58
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40021000 	.word	0x40021000

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <Error_Handler+0x8>

08000c9c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <MX_SPI1_Init+0x74>)
 8000ca2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d14 <MX_SPI1_Init+0x78>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d10 <MX_SPI1_Init+0x74>)
 8000ca8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000cac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cae:	4b18      	ldr	r3, [pc, #96]	@ (8000d10 <MX_SPI1_Init+0x74>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cb4:	4b16      	ldr	r3, [pc, #88]	@ (8000d10 <MX_SPI1_Init+0x74>)
 8000cb6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000cba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cbc:	4b14      	ldr	r3, [pc, #80]	@ (8000d10 <MX_SPI1_Init+0x74>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cc2:	4b13      	ldr	r3, [pc, #76]	@ (8000d10 <MX_SPI1_Init+0x74>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <MX_SPI1_Init+0x74>)
 8000cca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <MX_SPI1_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <MX_SPI1_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <MX_SPI1_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d10 <MX_SPI1_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <MX_SPI1_Init+0x74>)
 8000cea:	2207      	movs	r2, #7
 8000cec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cee:	4b08      	ldr	r3, [pc, #32]	@ (8000d10 <MX_SPI1_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <MX_SPI1_Init+0x74>)
 8000cf6:	2208      	movs	r2, #8
 8000cf8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cfa:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <MX_SPI1_Init+0x74>)
 8000cfc:	f001 fee4 	bl	8002ac8 <HAL_SPI_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d06:	f7ff ffc3 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200002d8 	.word	0x200002d8
 8000d14:	40013000 	.word	0x40013000

08000d18 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	@ 0x28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a17      	ldr	r2, [pc, #92]	@ (8000d94 <HAL_SPI_MspInit+0x7c>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d127      	bne.n	8000d8a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d3a:	4b17      	ldr	r3, [pc, #92]	@ (8000d98 <HAL_SPI_MspInit+0x80>)
 8000d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d3e:	4a16      	ldr	r2, [pc, #88]	@ (8000d98 <HAL_SPI_MspInit+0x80>)
 8000d40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d44:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d46:	4b14      	ldr	r3, [pc, #80]	@ (8000d98 <HAL_SPI_MspInit+0x80>)
 8000d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <HAL_SPI_MspInit+0x80>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d56:	4a10      	ldr	r2, [pc, #64]	@ (8000d98 <HAL_SPI_MspInit+0x80>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <HAL_SPI_MspInit+0x80>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000d6a:	2338      	movs	r3, #56	@ 0x38
 8000d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d76:	2303      	movs	r3, #3
 8000d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d7a:	2305      	movs	r3, #5
 8000d7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <HAL_SPI_MspInit+0x84>)
 8000d86:	f000 fb79 	bl	800147c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	3728      	adds	r7, #40	@ 0x28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40013000 	.word	0x40013000
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	48000400 	.word	0x48000400

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <HAL_MspInit+0x44>)
 8000da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000daa:	4a0e      	ldr	r2, [pc, #56]	@ (8000de4 <HAL_MspInit+0x44>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000db2:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <HAL_MspInit+0x44>)
 8000db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbe:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <HAL_MspInit+0x44>)
 8000dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dc2:	4a08      	ldr	r2, [pc, #32]	@ (8000de4 <HAL_MspInit+0x44>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dca:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <HAL_MspInit+0x44>)
 8000dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000

08000de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <NMI_Handler+0x4>

08000df0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <HardFault_Handler+0x4>

08000df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <MemManage_Handler+0x4>

08000e00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3e:	f000 f9f3 	bl	8001228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  return 1;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_kill>:

int _kill(int pid, int sig)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
 8000e5e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e60:	f003 f8be 	bl	8003fe0 <__errno>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2216      	movs	r2, #22
 8000e68:	601a      	str	r2, [r3, #0]
  return -1;
 8000e6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <_exit>:

void _exit (int status)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e7e:	f04f 31ff 	mov.w	r1, #4294967295
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff ffe7 	bl	8000e56 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <_exit+0x12>

08000e8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	e00a      	b.n	8000eb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e9e:	f3af 8000 	nop.w
 8000ea2:	4601      	mov	r1, r0
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	1c5a      	adds	r2, r3, #1
 8000ea8:	60ba      	str	r2, [r7, #8]
 8000eaa:	b2ca      	uxtb	r2, r1
 8000eac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	697a      	ldr	r2, [r7, #20]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	dbf0      	blt.n	8000e9e <_read+0x12>
  }

  return len;
 8000ebc:	687b      	ldr	r3, [r7, #4]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b086      	sub	sp, #24
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	60f8      	str	r0, [r7, #12]
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	e009      	b.n	8000eec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	1c5a      	adds	r2, r3, #1
 8000edc:	60ba      	str	r2, [r7, #8]
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	dbf1      	blt.n	8000ed8 <_write+0x12>
  }
  return len;
 8000ef4:	687b      	ldr	r3, [r7, #4]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <_close>:

int _close(int file)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f26:	605a      	str	r2, [r3, #4]
  return 0;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <_isatty>:

int _isatty(int file)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f3e:	2301      	movs	r3, #1
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f70:	4a14      	ldr	r2, [pc, #80]	@ (8000fc4 <_sbrk+0x5c>)
 8000f72:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <_sbrk+0x60>)
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f7c:	4b13      	ldr	r3, [pc, #76]	@ (8000fcc <_sbrk+0x64>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d102      	bne.n	8000f8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f84:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <_sbrk+0x64>)
 8000f86:	4a12      	ldr	r2, [pc, #72]	@ (8000fd0 <_sbrk+0x68>)
 8000f88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f8a:	4b10      	ldr	r3, [pc, #64]	@ (8000fcc <_sbrk+0x64>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d207      	bcs.n	8000fa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f98:	f003 f822 	bl	8003fe0 <__errno>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa6:	e009      	b.n	8000fbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa8:	4b08      	ldr	r3, [pc, #32]	@ (8000fcc <_sbrk+0x64>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fae:	4b07      	ldr	r3, [pc, #28]	@ (8000fcc <_sbrk+0x64>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	4a05      	ldr	r2, [pc, #20]	@ (8000fcc <_sbrk+0x64>)
 8000fb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fba:	68fb      	ldr	r3, [r7, #12]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	2000c000 	.word	0x2000c000
 8000fc8:	00000400 	.word	0x00000400
 8000fcc:	2000033c 	.word	0x2000033c
 8000fd0:	20000518 	.word	0x20000518

08000fd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <SystemInit+0x20>)
 8000fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fde:	4a05      	ldr	r2, [pc, #20]	@ (8000ff4 <SystemInit+0x20>)
 8000fe0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fe4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ffc:	4b14      	ldr	r3, [pc, #80]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 8000ffe:	4a15      	ldr	r2, [pc, #84]	@ (8001054 <MX_USART2_UART_Init+0x5c>)
 8001000:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001002:	4b13      	ldr	r3, [pc, #76]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 8001004:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001008:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800100a:	4b11      	ldr	r3, [pc, #68]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001010:	4b0f      	ldr	r3, [pc, #60]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001016:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800101c:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 800101e:	220c      	movs	r2, #12
 8001020:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001022:	4b0b      	ldr	r3, [pc, #44]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001028:	4b09      	ldr	r3, [pc, #36]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 800102a:	2200      	movs	r2, #0
 800102c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800102e:	4b08      	ldr	r3, [pc, #32]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 8001030:	2200      	movs	r2, #0
 8001032:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001034:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 8001036:	2200      	movs	r2, #0
 8001038:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800103a:	4805      	ldr	r0, [pc, #20]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 800103c:	f002 f8c2 	bl	80031c4 <HAL_UART_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001046:	f7ff fe23 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000340 	.word	0x20000340
 8001054:	40004400 	.word	0x40004400

08001058 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b09e      	sub	sp, #120	@ 0x78
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	2254      	movs	r2, #84	@ 0x54
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f002 ff34 	bl	8003ee6 <memset>
  if(uartHandle->Instance==USART2)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a28      	ldr	r2, [pc, #160]	@ (8001124 <HAL_UART_MspInit+0xcc>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d148      	bne.n	800111a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001088:	2302      	movs	r3, #2
 800108a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800108c:	2300      	movs	r3, #0
 800108e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	4618      	mov	r0, r3
 8001096:	f001 fa1f 	bl	80024d8 <HAL_RCCEx_PeriphCLKConfig>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010a0:	f7ff fdf6 	bl	8000c90 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010a4:	4b20      	ldr	r3, [pc, #128]	@ (8001128 <HAL_UART_MspInit+0xd0>)
 80010a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001128 <HAL_UART_MspInit+0xd0>)
 80010aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80010b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001128 <HAL_UART_MspInit+0xd0>)
 80010b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001128 <HAL_UART_MspInit+0xd0>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c0:	4a19      	ldr	r2, [pc, #100]	@ (8001128 <HAL_UART_MspInit+0xd0>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c8:	4b17      	ldr	r3, [pc, #92]	@ (8001128 <HAL_UART_MspInit+0xd0>)
 80010ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80010d4:	2304      	movs	r3, #4
 80010d6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e0:	2303      	movs	r3, #3
 80010e2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010e4:	2307      	movs	r3, #7
 80010e6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80010e8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010ec:	4619      	mov	r1, r3
 80010ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010f2:	f000 f9c3 	bl	800147c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80010f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010fa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001104:	2303      	movs	r3, #3
 8001106:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001108:	2303      	movs	r3, #3
 800110a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800110c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001110:	4619      	mov	r1, r3
 8001112:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001116:	f000 f9b1 	bl	800147c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800111a:	bf00      	nop
 800111c:	3778      	adds	r7, #120	@ 0x78
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40004400 	.word	0x40004400
 8001128:	40021000 	.word	0x40021000

0800112c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800112c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001164 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001130:	f7ff ff50 	bl	8000fd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001134:	480c      	ldr	r0, [pc, #48]	@ (8001168 <LoopForever+0x6>)
  ldr r1, =_edata
 8001136:	490d      	ldr	r1, [pc, #52]	@ (800116c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001138:	4a0d      	ldr	r2, [pc, #52]	@ (8001170 <LoopForever+0xe>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800113c:	e002      	b.n	8001144 <LoopCopyDataInit>

0800113e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001142:	3304      	adds	r3, #4

08001144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001148:	d3f9      	bcc.n	800113e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114a:	4a0a      	ldr	r2, [pc, #40]	@ (8001174 <LoopForever+0x12>)
  ldr r4, =_ebss
 800114c:	4c0a      	ldr	r4, [pc, #40]	@ (8001178 <LoopForever+0x16>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001150:	e001      	b.n	8001156 <LoopFillZerobss>

08001152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001154:	3204      	adds	r2, #4

08001156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001158:	d3fb      	bcc.n	8001152 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800115a:	f002 ff47 	bl	8003fec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800115e:	f7ff fd0d 	bl	8000b7c <main>

08001162 <LoopForever>:

LoopForever:
    b LoopForever
 8001162:	e7fe      	b.n	8001162 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001164:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800116c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001170:	08004e1c 	.word	0x08004e1c
  ldr r2, =_sbss
 8001174:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001178:	20000518 	.word	0x20000518

0800117c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800117c:	e7fe      	b.n	800117c <ADC1_IRQHandler>

0800117e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001184:	2300      	movs	r3, #0
 8001186:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001188:	2003      	movs	r0, #3
 800118a:	f000 f943 	bl	8001414 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800118e:	2000      	movs	r0, #0
 8001190:	f000 f80e 	bl	80011b0 <HAL_InitTick>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d002      	beq.n	80011a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	71fb      	strb	r3, [r7, #7]
 800119e:	e001      	b.n	80011a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011a0:	f7ff fdfe 	bl	8000da0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011a4:	79fb      	ldrb	r3, [r7, #7]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011bc:	4b17      	ldr	r3, [pc, #92]	@ (800121c <HAL_InitTick+0x6c>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d023      	beq.n	800120c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011c4:	4b16      	ldr	r3, [pc, #88]	@ (8001220 <HAL_InitTick+0x70>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b14      	ldr	r3, [pc, #80]	@ (800121c <HAL_InitTick+0x6c>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f941 	bl	8001462 <HAL_SYSTICK_Config>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10f      	bne.n	8001206 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b0f      	cmp	r3, #15
 80011ea:	d809      	bhi.n	8001200 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ec:	2200      	movs	r2, #0
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f000 f919 	bl	800142a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001224 <HAL_InitTick+0x74>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	e007      	b.n	8001210 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	73fb      	strb	r3, [r7, #15]
 8001204:	e004      	b.n	8001210 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	73fb      	strb	r3, [r7, #15]
 800120a:	e001      	b.n	8001210 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001210:	7bfb      	ldrb	r3, [r7, #15]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000008 	.word	0x20000008
 8001220:	20000000 	.word	0x20000000
 8001224:	20000004 	.word	0x20000004

08001228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800122c:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <HAL_IncTick+0x20>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4b06      	ldr	r3, [pc, #24]	@ (800124c <HAL_IncTick+0x24>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4413      	add	r3, r2
 8001238:	4a04      	ldr	r2, [pc, #16]	@ (800124c <HAL_IncTick+0x24>)
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000008 	.word	0x20000008
 800124c:	200003c8 	.word	0x200003c8

08001250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return uwTick;
 8001254:	4b03      	ldr	r3, [pc, #12]	@ (8001264 <HAL_GetTick+0x14>)
 8001256:	681b      	ldr	r3, [r3, #0]
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	200003c8 	.word	0x200003c8

08001268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001270:	f7ff ffee 	bl	8001250 <HAL_GetTick>
 8001274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001280:	d005      	beq.n	800128e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001282:	4b0a      	ldr	r3, [pc, #40]	@ (80012ac <HAL_Delay+0x44>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4413      	add	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800128e:	bf00      	nop
 8001290:	f7ff ffde 	bl	8001250 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	429a      	cmp	r2, r3
 800129e:	d8f7      	bhi.n	8001290 <HAL_Delay+0x28>
  {
  }
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000008 	.word	0x20000008

080012b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c0:	4b0c      	ldr	r3, [pc, #48]	@ (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012cc:	4013      	ands	r3, r2
 80012ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e2:	4a04      	ldr	r2, [pc, #16]	@ (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	60d3      	str	r3, [r2, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012fc:	4b04      	ldr	r3, [pc, #16]	@ (8001310 <__NVIC_GetPriorityGrouping+0x18>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	f003 0307 	and.w	r3, r3, #7
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	6039      	str	r1, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	2b00      	cmp	r3, #0
 8001326:	db0a      	blt.n	800133e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	b2da      	uxtb	r2, r3
 800132c:	490c      	ldr	r1, [pc, #48]	@ (8001360 <__NVIC_SetPriority+0x4c>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	0112      	lsls	r2, r2, #4
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	440b      	add	r3, r1
 8001338:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800133c:	e00a      	b.n	8001354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4908      	ldr	r1, [pc, #32]	@ (8001364 <__NVIC_SetPriority+0x50>)
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	3b04      	subs	r3, #4
 800134c:	0112      	lsls	r2, r2, #4
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	440b      	add	r3, r1
 8001352:	761a      	strb	r2, [r3, #24]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000e100 	.word	0xe000e100
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	@ 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f1c3 0307 	rsb	r3, r3, #7
 8001382:	2b04      	cmp	r3, #4
 8001384:	bf28      	it	cs
 8001386:	2304      	movcs	r3, #4
 8001388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3304      	adds	r3, #4
 800138e:	2b06      	cmp	r3, #6
 8001390:	d902      	bls.n	8001398 <NVIC_EncodePriority+0x30>
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3b03      	subs	r3, #3
 8001396:	e000      	b.n	800139a <NVIC_EncodePriority+0x32>
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	f04f 32ff 	mov.w	r2, #4294967295
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43da      	mvns	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	401a      	ands	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b0:	f04f 31ff 	mov.w	r1, #4294967295
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	43d9      	mvns	r1, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	4313      	orrs	r3, r2
         );
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3724      	adds	r7, #36	@ 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013e0:	d301      	bcc.n	80013e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e2:	2301      	movs	r3, #1
 80013e4:	e00f      	b.n	8001406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001410 <SysTick_Config+0x40>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ee:	210f      	movs	r1, #15
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295
 80013f4:	f7ff ff8e 	bl	8001314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f8:	4b05      	ldr	r3, [pc, #20]	@ (8001410 <SysTick_Config+0x40>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fe:	4b04      	ldr	r3, [pc, #16]	@ (8001410 <SysTick_Config+0x40>)
 8001400:	2207      	movs	r2, #7
 8001402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	e000e010 	.word	0xe000e010

08001414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff ff47 	bl	80012b0 <__NVIC_SetPriorityGrouping>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b086      	sub	sp, #24
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
 8001436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800143c:	f7ff ff5c 	bl	80012f8 <__NVIC_GetPriorityGrouping>
 8001440:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	6978      	ldr	r0, [r7, #20]
 8001448:	f7ff ff8e 	bl	8001368 <NVIC_EncodePriority>
 800144c:	4602      	mov	r2, r0
 800144e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff5d 	bl	8001314 <__NVIC_SetPriority>
}
 800145a:	bf00      	nop
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ffb0 	bl	80013d0 <SysTick_Config>
 8001470:	4603      	mov	r3, r0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800147c:	b480      	push	{r7}
 800147e:	b087      	sub	sp, #28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800148a:	e148      	b.n	800171e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	2101      	movs	r1, #1
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	fa01 f303 	lsl.w	r3, r1, r3
 8001498:	4013      	ands	r3, r2
 800149a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 813a 	beq.w	8001718 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d005      	beq.n	80014bc <HAL_GPIO_Init+0x40>
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d130      	bne.n	800151e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	2203      	movs	r2, #3
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4013      	ands	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68da      	ldr	r2, [r3, #12]
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014f2:	2201      	movs	r2, #1
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	091b      	lsrs	r3, r3, #4
 8001508:	f003 0201 	and.w	r2, r3, #1
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f003 0303 	and.w	r3, r3, #3
 8001526:	2b03      	cmp	r3, #3
 8001528:	d017      	beq.n	800155a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	2203      	movs	r2, #3
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 0303 	and.w	r3, r3, #3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d123      	bne.n	80015ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	08da      	lsrs	r2, r3, #3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3208      	adds	r2, #8
 800156e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001572:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	220f      	movs	r2, #15
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4013      	ands	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	691a      	ldr	r2, [r3, #16]
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	f003 0307 	and.w	r3, r3, #7
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	08da      	lsrs	r2, r3, #3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3208      	adds	r2, #8
 80015a8:	6939      	ldr	r1, [r7, #16]
 80015aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	2203      	movs	r2, #3
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	4013      	ands	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 0203 	and.w	r2, r3, #3
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 8094 	beq.w	8001718 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f0:	4b52      	ldr	r3, [pc, #328]	@ (800173c <HAL_GPIO_Init+0x2c0>)
 80015f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015f4:	4a51      	ldr	r2, [pc, #324]	@ (800173c <HAL_GPIO_Init+0x2c0>)
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80015fc:	4b4f      	ldr	r3, [pc, #316]	@ (800173c <HAL_GPIO_Init+0x2c0>)
 80015fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001608:	4a4d      	ldr	r2, [pc, #308]	@ (8001740 <HAL_GPIO_Init+0x2c4>)
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	089b      	lsrs	r3, r3, #2
 800160e:	3302      	adds	r3, #2
 8001610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001614:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	220f      	movs	r2, #15
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001632:	d00d      	beq.n	8001650 <HAL_GPIO_Init+0x1d4>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a43      	ldr	r2, [pc, #268]	@ (8001744 <HAL_GPIO_Init+0x2c8>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d007      	beq.n	800164c <HAL_GPIO_Init+0x1d0>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a42      	ldr	r2, [pc, #264]	@ (8001748 <HAL_GPIO_Init+0x2cc>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d101      	bne.n	8001648 <HAL_GPIO_Init+0x1cc>
 8001644:	2302      	movs	r3, #2
 8001646:	e004      	b.n	8001652 <HAL_GPIO_Init+0x1d6>
 8001648:	2307      	movs	r3, #7
 800164a:	e002      	b.n	8001652 <HAL_GPIO_Init+0x1d6>
 800164c:	2301      	movs	r3, #1
 800164e:	e000      	b.n	8001652 <HAL_GPIO_Init+0x1d6>
 8001650:	2300      	movs	r3, #0
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	f002 0203 	and.w	r2, r2, #3
 8001658:	0092      	lsls	r2, r2, #2
 800165a:	4093      	lsls	r3, r2
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	4313      	orrs	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001662:	4937      	ldr	r1, [pc, #220]	@ (8001740 <HAL_GPIO_Init+0x2c4>)
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	089b      	lsrs	r3, r3, #2
 8001668:	3302      	adds	r3, #2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001670:	4b36      	ldr	r3, [pc, #216]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	43db      	mvns	r3, r3
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4313      	orrs	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001694:	4a2d      	ldr	r2, [pc, #180]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800169a:	4b2c      	ldr	r3, [pc, #176]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	4013      	ands	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016be:	4a23      	ldr	r2, [pc, #140]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016c4:	4b21      	ldr	r3, [pc, #132]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016e8:	4a18      	ldr	r2, [pc, #96]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016ee:	4b17      	ldr	r3, [pc, #92]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	43db      	mvns	r3, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4313      	orrs	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001712:	4a0e      	ldr	r2, [pc, #56]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	3301      	adds	r3, #1
 800171c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	fa22 f303 	lsr.w	r3, r2, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	f47f aeaf 	bne.w	800148c <HAL_GPIO_Init+0x10>
  }
}
 800172e:	bf00      	nop
 8001730:	bf00      	nop
 8001732:	371c      	adds	r7, #28
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	40021000 	.word	0x40021000
 8001740:	40010000 	.word	0x40010000
 8001744:	48000400 	.word	0x48000400
 8001748:	48000800 	.word	0x48000800
 800174c:	40010400 	.word	0x40010400

08001750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	807b      	strh	r3, [r7, #2]
 800175c:	4613      	mov	r3, r2
 800175e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001760:	787b      	ldrb	r3, [r7, #1]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001766:	887a      	ldrh	r2, [r7, #2]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800176c:	e002      	b.n	8001774 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800176e:	887a      	ldrh	r2, [r7, #2]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001784:	4b05      	ldr	r3, [pc, #20]	@ (800179c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a04      	ldr	r2, [pc, #16]	@ (800179c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800178a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800178e:	6013      	str	r3, [r2, #0]
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40007000 	.word	0x40007000

080017a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017a4:	4b04      	ldr	r3, [pc, #16]	@ (80017b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40007000 	.word	0x40007000

080017bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017ca:	d130      	bne.n	800182e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017cc:	4b23      	ldr	r3, [pc, #140]	@ (800185c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017d8:	d038      	beq.n	800184c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017da:	4b20      	ldr	r3, [pc, #128]	@ (800185c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017e2:	4a1e      	ldr	r2, [pc, #120]	@ (800185c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001860 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2232      	movs	r2, #50	@ 0x32
 80017f0:	fb02 f303 	mul.w	r3, r2, r3
 80017f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001864 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017f6:	fba2 2303 	umull	r2, r3, r2, r3
 80017fa:	0c9b      	lsrs	r3, r3, #18
 80017fc:	3301      	adds	r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001800:	e002      	b.n	8001808 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	3b01      	subs	r3, #1
 8001806:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001808:	4b14      	ldr	r3, [pc, #80]	@ (800185c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001810:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001814:	d102      	bne.n	800181c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1f2      	bne.n	8001802 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800181c:	4b0f      	ldr	r3, [pc, #60]	@ (800185c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001824:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001828:	d110      	bne.n	800184c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e00f      	b.n	800184e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800182e:	4b0b      	ldr	r3, [pc, #44]	@ (800185c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001836:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800183a:	d007      	beq.n	800184c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800183c:	4b07      	ldr	r3, [pc, #28]	@ (800185c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001844:	4a05      	ldr	r2, [pc, #20]	@ (800185c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001846:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800184a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40007000 	.word	0x40007000
 8001860:	20000000 	.word	0x20000000
 8001864:	431bde83 	.word	0x431bde83

08001868 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d102      	bne.n	800187c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	f000 bc02 	b.w	8002080 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800187c:	4b96      	ldr	r3, [pc, #600]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 030c 	and.w	r3, r3, #12
 8001884:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001886:	4b94      	ldr	r3, [pc, #592]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 80e4 	beq.w	8001a66 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d007      	beq.n	80018b4 <HAL_RCC_OscConfig+0x4c>
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	2b0c      	cmp	r3, #12
 80018a8:	f040 808b 	bne.w	80019c2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	f040 8087 	bne.w	80019c2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018b4:	4b88      	ldr	r3, [pc, #544]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <HAL_RCC_OscConfig+0x64>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e3d9      	b.n	8002080 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a1a      	ldr	r2, [r3, #32]
 80018d0:	4b81      	ldr	r3, [pc, #516]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d004      	beq.n	80018e6 <HAL_RCC_OscConfig+0x7e>
 80018dc:	4b7e      	ldr	r3, [pc, #504]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018e4:	e005      	b.n	80018f2 <HAL_RCC_OscConfig+0x8a>
 80018e6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 80018e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018ec:	091b      	lsrs	r3, r3, #4
 80018ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d223      	bcs.n	800193e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 fd8c 	bl	8002418 <RCC_SetFlashLatencyFromMSIRange>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e3ba      	b.n	8002080 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800190a:	4b73      	ldr	r3, [pc, #460]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a72      	ldr	r2, [pc, #456]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 8001910:	f043 0308 	orr.w	r3, r3, #8
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	4b70      	ldr	r3, [pc, #448]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	496d      	ldr	r1, [pc, #436]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 8001924:	4313      	orrs	r3, r2
 8001926:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001928:	4b6b      	ldr	r3, [pc, #428]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	021b      	lsls	r3, r3, #8
 8001936:	4968      	ldr	r1, [pc, #416]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 8001938:	4313      	orrs	r3, r2
 800193a:	604b      	str	r3, [r1, #4]
 800193c:	e025      	b.n	800198a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800193e:	4b66      	ldr	r3, [pc, #408]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a65      	ldr	r2, [pc, #404]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 8001944:	f043 0308 	orr.w	r3, r3, #8
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	4b63      	ldr	r3, [pc, #396]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	4960      	ldr	r1, [pc, #384]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 8001958:	4313      	orrs	r3, r2
 800195a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800195c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69db      	ldr	r3, [r3, #28]
 8001968:	021b      	lsls	r3, r3, #8
 800196a:	495b      	ldr	r1, [pc, #364]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 800196c:	4313      	orrs	r3, r2
 800196e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d109      	bne.n	800198a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	4618      	mov	r0, r3
 800197c:	f000 fd4c 	bl	8002418 <RCC_SetFlashLatencyFromMSIRange>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e37a      	b.n	8002080 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800198a:	f000 fc81 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 800198e:	4602      	mov	r2, r0
 8001990:	4b51      	ldr	r3, [pc, #324]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	091b      	lsrs	r3, r3, #4
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	4950      	ldr	r1, [pc, #320]	@ (8001adc <HAL_RCC_OscConfig+0x274>)
 800199c:	5ccb      	ldrb	r3, [r1, r3]
 800199e:	f003 031f 	and.w	r3, r3, #31
 80019a2:	fa22 f303 	lsr.w	r3, r2, r3
 80019a6:	4a4e      	ldr	r2, [pc, #312]	@ (8001ae0 <HAL_RCC_OscConfig+0x278>)
 80019a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019aa:	4b4e      	ldr	r3, [pc, #312]	@ (8001ae4 <HAL_RCC_OscConfig+0x27c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fbfe 	bl	80011b0 <HAL_InitTick>
 80019b4:	4603      	mov	r3, r0
 80019b6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d052      	beq.n	8001a64 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80019be:	7bfb      	ldrb	r3, [r7, #15]
 80019c0:	e35e      	b.n	8002080 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d032      	beq.n	8001a30 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019ca:	4b43      	ldr	r3, [pc, #268]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a42      	ldr	r2, [pc, #264]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019d6:	f7ff fc3b 	bl	8001250 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019de:	f7ff fc37 	bl	8001250 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e347      	b.n	8002080 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019f0:	4b39      	ldr	r3, [pc, #228]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0f0      	beq.n	80019de <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019fc:	4b36      	ldr	r3, [pc, #216]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a35      	ldr	r2, [pc, #212]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 8001a02:	f043 0308 	orr.w	r3, r3, #8
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	4b33      	ldr	r3, [pc, #204]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	4930      	ldr	r1, [pc, #192]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a1a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	021b      	lsls	r3, r3, #8
 8001a28:	492b      	ldr	r1, [pc, #172]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	604b      	str	r3, [r1, #4]
 8001a2e:	e01a      	b.n	8001a66 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a30:	4b29      	ldr	r3, [pc, #164]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a28      	ldr	r2, [pc, #160]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 8001a36:	f023 0301 	bic.w	r3, r3, #1
 8001a3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fc08 	bl	8001250 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a44:	f7ff fc04 	bl	8001250 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e314      	b.n	8002080 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a56:	4b20      	ldr	r3, [pc, #128]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0x1dc>
 8001a62:	e000      	b.n	8001a66 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a64:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d073      	beq.n	8001b5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d005      	beq.n	8001a84 <HAL_RCC_OscConfig+0x21c>
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	2b0c      	cmp	r3, #12
 8001a7c:	d10e      	bne.n	8001a9c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	d10b      	bne.n	8001a9c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a84:	4b14      	ldr	r3, [pc, #80]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d063      	beq.n	8001b58 <HAL_RCC_OscConfig+0x2f0>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d15f      	bne.n	8001b58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e2f1      	b.n	8002080 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aa4:	d106      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x24c>
 8001aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a0b      	ldr	r2, [pc, #44]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 8001aac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	e025      	b.n	8001b00 <HAL_RCC_OscConfig+0x298>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001abc:	d114      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x280>
 8001abe:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a05      	ldr	r2, [pc, #20]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 8001ac4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	4b03      	ldr	r3, [pc, #12]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a02      	ldr	r2, [pc, #8]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 8001ad0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	e013      	b.n	8001b00 <HAL_RCC_OscConfig+0x298>
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	08004ce4 	.word	0x08004ce4
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	20000004 	.word	0x20000004
 8001ae8:	4ba0      	ldr	r3, [pc, #640]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a9f      	ldr	r2, [pc, #636]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001aee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	4b9d      	ldr	r3, [pc, #628]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a9c      	ldr	r2, [pc, #624]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001afa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d013      	beq.n	8001b30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b08:	f7ff fba2 	bl	8001250 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b10:	f7ff fb9e 	bl	8001250 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b64      	cmp	r3, #100	@ 0x64
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e2ae      	b.n	8002080 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b22:	4b92      	ldr	r3, [pc, #584]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0x2a8>
 8001b2e:	e014      	b.n	8001b5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b30:	f7ff fb8e 	bl	8001250 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b38:	f7ff fb8a 	bl	8001250 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b64      	cmp	r3, #100	@ 0x64
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e29a      	b.n	8002080 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b4a:	4b88      	ldr	r3, [pc, #544]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_OscConfig+0x2d0>
 8001b56:	e000      	b.n	8001b5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d060      	beq.n	8001c28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d005      	beq.n	8001b78 <HAL_RCC_OscConfig+0x310>
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	2b0c      	cmp	r3, #12
 8001b70:	d119      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d116      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b78:	4b7c      	ldr	r3, [pc, #496]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <HAL_RCC_OscConfig+0x328>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e277      	b.n	8002080 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b90:	4b76      	ldr	r3, [pc, #472]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	061b      	lsls	r3, r3, #24
 8001b9e:	4973      	ldr	r1, [pc, #460]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ba4:	e040      	b.n	8001c28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d023      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bae:	4b6f      	ldr	r3, [pc, #444]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a6e      	ldr	r2, [pc, #440]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001bb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bba:	f7ff fb49 	bl	8001250 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc2:	f7ff fb45 	bl	8001250 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e255      	b.n	8002080 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bd4:	4b65      	ldr	r3, [pc, #404]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0f0      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be0:	4b62      	ldr	r3, [pc, #392]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	061b      	lsls	r3, r3, #24
 8001bee:	495f      	ldr	r1, [pc, #380]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	604b      	str	r3, [r1, #4]
 8001bf4:	e018      	b.n	8001c28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bf6:	4b5d      	ldr	r3, [pc, #372]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a5c      	ldr	r2, [pc, #368]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001bfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c02:	f7ff fb25 	bl	8001250 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0a:	f7ff fb21 	bl	8001250 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e231      	b.n	8002080 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c1c:	4b53      	ldr	r3, [pc, #332]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1f0      	bne.n	8001c0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d03c      	beq.n	8001cae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d01c      	beq.n	8001c76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c3c:	4b4b      	ldr	r3, [pc, #300]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c42:	4a4a      	ldr	r2, [pc, #296]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4c:	f7ff fb00 	bl	8001250 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c54:	f7ff fafc 	bl	8001250 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e20c      	b.n	8002080 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c66:	4b41      	ldr	r3, [pc, #260]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0ef      	beq.n	8001c54 <HAL_RCC_OscConfig+0x3ec>
 8001c74:	e01b      	b.n	8001cae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c76:	4b3d      	ldr	r3, [pc, #244]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c7c:	4a3b      	ldr	r2, [pc, #236]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001c7e:	f023 0301 	bic.w	r3, r3, #1
 8001c82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c86:	f7ff fae3 	bl	8001250 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c8e:	f7ff fadf 	bl	8001250 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e1ef      	b.n	8002080 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ca0:	4b32      	ldr	r3, [pc, #200]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1ef      	bne.n	8001c8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 80a6 	beq.w	8001e08 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001cc0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10d      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ccc:	4b27      	ldr	r3, [pc, #156]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd0:	4a26      	ldr	r2, [pc, #152]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001cd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cd8:	4b24      	ldr	r3, [pc, #144]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ce8:	4b21      	ldr	r3, [pc, #132]	@ (8001d70 <HAL_RCC_OscConfig+0x508>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d118      	bne.n	8001d26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cf4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d70 <HAL_RCC_OscConfig+0x508>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8001d70 <HAL_RCC_OscConfig+0x508>)
 8001cfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cfe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d00:	f7ff faa6 	bl	8001250 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d08:	f7ff faa2 	bl	8001250 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e1b2      	b.n	8002080 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d1a:	4b15      	ldr	r3, [pc, #84]	@ (8001d70 <HAL_RCC_OscConfig+0x508>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f0      	beq.n	8001d08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d108      	bne.n	8001d40 <HAL_RCC_OscConfig+0x4d8>
 8001d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d34:	4a0d      	ldr	r2, [pc, #52]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d3e:	e029      	b.n	8001d94 <HAL_RCC_OscConfig+0x52c>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	2b05      	cmp	r3, #5
 8001d46:	d115      	bne.n	8001d74 <HAL_RCC_OscConfig+0x50c>
 8001d48:	4b08      	ldr	r3, [pc, #32]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d4e:	4a07      	ldr	r2, [pc, #28]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001d50:	f043 0304 	orr.w	r3, r3, #4
 8001d54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d58:	4b04      	ldr	r3, [pc, #16]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d5e:	4a03      	ldr	r2, [pc, #12]	@ (8001d6c <HAL_RCC_OscConfig+0x504>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d68:	e014      	b.n	8001d94 <HAL_RCC_OscConfig+0x52c>
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40007000 	.word	0x40007000
 8001d74:	4b9a      	ldr	r3, [pc, #616]	@ (8001fe0 <HAL_RCC_OscConfig+0x778>)
 8001d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d7a:	4a99      	ldr	r2, [pc, #612]	@ (8001fe0 <HAL_RCC_OscConfig+0x778>)
 8001d7c:	f023 0301 	bic.w	r3, r3, #1
 8001d80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d84:	4b96      	ldr	r3, [pc, #600]	@ (8001fe0 <HAL_RCC_OscConfig+0x778>)
 8001d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d8a:	4a95      	ldr	r2, [pc, #596]	@ (8001fe0 <HAL_RCC_OscConfig+0x778>)
 8001d8c:	f023 0304 	bic.w	r3, r3, #4
 8001d90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d016      	beq.n	8001dca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9c:	f7ff fa58 	bl	8001250 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001da2:	e00a      	b.n	8001dba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da4:	f7ff fa54 	bl	8001250 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e162      	b.n	8002080 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dba:	4b89      	ldr	r3, [pc, #548]	@ (8001fe0 <HAL_RCC_OscConfig+0x778>)
 8001dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0ed      	beq.n	8001da4 <HAL_RCC_OscConfig+0x53c>
 8001dc8:	e015      	b.n	8001df6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dca:	f7ff fa41 	bl	8001250 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dd0:	e00a      	b.n	8001de8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd2:	f7ff fa3d 	bl	8001250 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e14b      	b.n	8002080 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001de8:	4b7d      	ldr	r3, [pc, #500]	@ (8001fe0 <HAL_RCC_OscConfig+0x778>)
 8001dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1ed      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001df6:	7ffb      	ldrb	r3, [r7, #31]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d105      	bne.n	8001e08 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dfc:	4b78      	ldr	r3, [pc, #480]	@ (8001fe0 <HAL_RCC_OscConfig+0x778>)
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e00:	4a77      	ldr	r2, [pc, #476]	@ (8001fe0 <HAL_RCC_OscConfig+0x778>)
 8001e02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e06:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0320 	and.w	r3, r3, #32
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d03c      	beq.n	8001e8e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d01c      	beq.n	8001e56 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e1c:	4b70      	ldr	r3, [pc, #448]	@ (8001fe0 <HAL_RCC_OscConfig+0x778>)
 8001e1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e22:	4a6f      	ldr	r2, [pc, #444]	@ (8001fe0 <HAL_RCC_OscConfig+0x778>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2c:	f7ff fa10 	bl	8001250 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e34:	f7ff fa0c 	bl	8001250 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e11c      	b.n	8002080 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e46:	4b66      	ldr	r3, [pc, #408]	@ (8001fe0 <HAL_RCC_OscConfig+0x778>)
 8001e48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0ef      	beq.n	8001e34 <HAL_RCC_OscConfig+0x5cc>
 8001e54:	e01b      	b.n	8001e8e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e56:	4b62      	ldr	r3, [pc, #392]	@ (8001fe0 <HAL_RCC_OscConfig+0x778>)
 8001e58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e5c:	4a60      	ldr	r2, [pc, #384]	@ (8001fe0 <HAL_RCC_OscConfig+0x778>)
 8001e5e:	f023 0301 	bic.w	r3, r3, #1
 8001e62:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e66:	f7ff f9f3 	bl	8001250 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e6e:	f7ff f9ef 	bl	8001250 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e0ff      	b.n	8002080 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e80:	4b57      	ldr	r3, [pc, #348]	@ (8001fe0 <HAL_RCC_OscConfig+0x778>)
 8001e82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1ef      	bne.n	8001e6e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 80f3 	beq.w	800207e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	f040 80c9 	bne.w	8002034 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ea2:	4b4f      	ldr	r3, [pc, #316]	@ (8001fe0 <HAL_RCC_OscConfig+0x778>)
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f003 0203 	and.w	r2, r3, #3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d12c      	bne.n	8001f10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d123      	bne.n	8001f10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ed2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d11b      	bne.n	8001f10 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ee2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d113      	bne.n	8001f10 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ef2:	085b      	lsrs	r3, r3, #1
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d109      	bne.n	8001f10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	085b      	lsrs	r3, r3, #1
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d06b      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	2b0c      	cmp	r3, #12
 8001f14:	d062      	beq.n	8001fdc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f16:	4b32      	ldr	r3, [pc, #200]	@ (8001fe0 <HAL_RCC_OscConfig+0x778>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e0ac      	b.n	8002080 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f26:	4b2e      	ldr	r3, [pc, #184]	@ (8001fe0 <HAL_RCC_OscConfig+0x778>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a2d      	ldr	r2, [pc, #180]	@ (8001fe0 <HAL_RCC_OscConfig+0x778>)
 8001f2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f30:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f32:	f7ff f98d 	bl	8001250 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3a:	f7ff f989 	bl	8001250 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e099      	b.n	8002080 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f4c:	4b24      	ldr	r3, [pc, #144]	@ (8001fe0 <HAL_RCC_OscConfig+0x778>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1f0      	bne.n	8001f3a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f58:	4b21      	ldr	r3, [pc, #132]	@ (8001fe0 <HAL_RCC_OscConfig+0x778>)
 8001f5a:	68da      	ldr	r2, [r3, #12]
 8001f5c:	4b21      	ldr	r3, [pc, #132]	@ (8001fe4 <HAL_RCC_OscConfig+0x77c>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001f68:	3a01      	subs	r2, #1
 8001f6a:	0112      	lsls	r2, r2, #4
 8001f6c:	4311      	orrs	r1, r2
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f72:	0212      	lsls	r2, r2, #8
 8001f74:	4311      	orrs	r1, r2
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f7a:	0852      	lsrs	r2, r2, #1
 8001f7c:	3a01      	subs	r2, #1
 8001f7e:	0552      	lsls	r2, r2, #21
 8001f80:	4311      	orrs	r1, r2
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f86:	0852      	lsrs	r2, r2, #1
 8001f88:	3a01      	subs	r2, #1
 8001f8a:	0652      	lsls	r2, r2, #25
 8001f8c:	4311      	orrs	r1, r2
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001f92:	06d2      	lsls	r2, r2, #27
 8001f94:	430a      	orrs	r2, r1
 8001f96:	4912      	ldr	r1, [pc, #72]	@ (8001fe0 <HAL_RCC_OscConfig+0x778>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f9c:	4b10      	ldr	r3, [pc, #64]	@ (8001fe0 <HAL_RCC_OscConfig+0x778>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe0 <HAL_RCC_OscConfig+0x778>)
 8001fa2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fa6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe0 <HAL_RCC_OscConfig+0x778>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	4a0c      	ldr	r2, [pc, #48]	@ (8001fe0 <HAL_RCC_OscConfig+0x778>)
 8001fae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fb4:	f7ff f94c 	bl	8001250 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fbc:	f7ff f948 	bl	8001250 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e058      	b.n	8002080 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fce:	4b04      	ldr	r3, [pc, #16]	@ (8001fe0 <HAL_RCC_OscConfig+0x778>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0f0      	beq.n	8001fbc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fda:	e050      	b.n	800207e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e04f      	b.n	8002080 <HAL_RCC_OscConfig+0x818>
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fe8:	4b27      	ldr	r3, [pc, #156]	@ (8002088 <HAL_RCC_OscConfig+0x820>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d144      	bne.n	800207e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ff4:	4b24      	ldr	r3, [pc, #144]	@ (8002088 <HAL_RCC_OscConfig+0x820>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a23      	ldr	r2, [pc, #140]	@ (8002088 <HAL_RCC_OscConfig+0x820>)
 8001ffa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ffe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002000:	4b21      	ldr	r3, [pc, #132]	@ (8002088 <HAL_RCC_OscConfig+0x820>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	4a20      	ldr	r2, [pc, #128]	@ (8002088 <HAL_RCC_OscConfig+0x820>)
 8002006:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800200a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800200c:	f7ff f920 	bl	8001250 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002014:	f7ff f91c 	bl	8001250 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e02c      	b.n	8002080 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002026:	4b18      	ldr	r3, [pc, #96]	@ (8002088 <HAL_RCC_OscConfig+0x820>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0f0      	beq.n	8002014 <HAL_RCC_OscConfig+0x7ac>
 8002032:	e024      	b.n	800207e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	2b0c      	cmp	r3, #12
 8002038:	d01f      	beq.n	800207a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203a:	4b13      	ldr	r3, [pc, #76]	@ (8002088 <HAL_RCC_OscConfig+0x820>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a12      	ldr	r2, [pc, #72]	@ (8002088 <HAL_RCC_OscConfig+0x820>)
 8002040:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002046:	f7ff f903 	bl	8001250 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204e:	f7ff f8ff 	bl	8001250 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e00f      	b.n	8002080 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002060:	4b09      	ldr	r3, [pc, #36]	@ (8002088 <HAL_RCC_OscConfig+0x820>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f0      	bne.n	800204e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800206c:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <HAL_RCC_OscConfig+0x820>)
 800206e:	68da      	ldr	r2, [r3, #12]
 8002070:	4905      	ldr	r1, [pc, #20]	@ (8002088 <HAL_RCC_OscConfig+0x820>)
 8002072:	4b06      	ldr	r3, [pc, #24]	@ (800208c <HAL_RCC_OscConfig+0x824>)
 8002074:	4013      	ands	r3, r2
 8002076:	60cb      	str	r3, [r1, #12]
 8002078:	e001      	b.n	800207e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3720      	adds	r7, #32
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40021000 	.word	0x40021000
 800208c:	feeefffc 	.word	0xfeeefffc

08002090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0e7      	b.n	8002274 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020a4:	4b75      	ldr	r3, [pc, #468]	@ (800227c <HAL_RCC_ClockConfig+0x1ec>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d910      	bls.n	80020d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b2:	4b72      	ldr	r3, [pc, #456]	@ (800227c <HAL_RCC_ClockConfig+0x1ec>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f023 0207 	bic.w	r2, r3, #7
 80020ba:	4970      	ldr	r1, [pc, #448]	@ (800227c <HAL_RCC_ClockConfig+0x1ec>)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	4313      	orrs	r3, r2
 80020c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c2:	4b6e      	ldr	r3, [pc, #440]	@ (800227c <HAL_RCC_ClockConfig+0x1ec>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d001      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0cf      	b.n	8002274 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d010      	beq.n	8002102 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	4b66      	ldr	r3, [pc, #408]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d908      	bls.n	8002102 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f0:	4b63      	ldr	r3, [pc, #396]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	4960      	ldr	r1, [pc, #384]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d04c      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b03      	cmp	r3, #3
 8002114:	d107      	bne.n	8002126 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002116:	4b5a      	ldr	r3, [pc, #360]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d121      	bne.n	8002166 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e0a6      	b.n	8002274 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d107      	bne.n	800213e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800212e:	4b54      	ldr	r3, [pc, #336]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d115      	bne.n	8002166 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e09a      	b.n	8002274 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d107      	bne.n	8002156 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002146:	4b4e      	ldr	r3, [pc, #312]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d109      	bne.n	8002166 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e08e      	b.n	8002274 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002156:	4b4a      	ldr	r3, [pc, #296]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e086      	b.n	8002274 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002166:	4b46      	ldr	r3, [pc, #280]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f023 0203 	bic.w	r2, r3, #3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	4943      	ldr	r1, [pc, #268]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 8002174:	4313      	orrs	r3, r2
 8002176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002178:	f7ff f86a 	bl	8001250 <HAL_GetTick>
 800217c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217e:	e00a      	b.n	8002196 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002180:	f7ff f866 	bl	8001250 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e06e      	b.n	8002274 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002196:	4b3a      	ldr	r3, [pc, #232]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 020c 	and.w	r2, r3, #12
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d1eb      	bne.n	8002180 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d010      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	4b31      	ldr	r3, [pc, #196]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d208      	bcs.n	80021d6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	492b      	ldr	r1, [pc, #172]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021d6:	4b29      	ldr	r3, [pc, #164]	@ (800227c <HAL_RCC_ClockConfig+0x1ec>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d210      	bcs.n	8002206 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e4:	4b25      	ldr	r3, [pc, #148]	@ (800227c <HAL_RCC_ClockConfig+0x1ec>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f023 0207 	bic.w	r2, r3, #7
 80021ec:	4923      	ldr	r1, [pc, #140]	@ (800227c <HAL_RCC_ClockConfig+0x1ec>)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f4:	4b21      	ldr	r3, [pc, #132]	@ (800227c <HAL_RCC_ClockConfig+0x1ec>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d001      	beq.n	8002206 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e036      	b.n	8002274 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	2b00      	cmp	r3, #0
 8002210:	d008      	beq.n	8002224 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002212:	4b1b      	ldr	r3, [pc, #108]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	4918      	ldr	r1, [pc, #96]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 8002220:	4313      	orrs	r3, r2
 8002222:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0308 	and.w	r3, r3, #8
 800222c:	2b00      	cmp	r3, #0
 800222e:	d009      	beq.n	8002244 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002230:	4b13      	ldr	r3, [pc, #76]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4910      	ldr	r1, [pc, #64]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 8002240:	4313      	orrs	r3, r2
 8002242:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002244:	f000 f824 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 8002248:	4602      	mov	r2, r0
 800224a:	4b0d      	ldr	r3, [pc, #52]	@ (8002280 <HAL_RCC_ClockConfig+0x1f0>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	091b      	lsrs	r3, r3, #4
 8002250:	f003 030f 	and.w	r3, r3, #15
 8002254:	490b      	ldr	r1, [pc, #44]	@ (8002284 <HAL_RCC_ClockConfig+0x1f4>)
 8002256:	5ccb      	ldrb	r3, [r1, r3]
 8002258:	f003 031f 	and.w	r3, r3, #31
 800225c:	fa22 f303 	lsr.w	r3, r2, r3
 8002260:	4a09      	ldr	r2, [pc, #36]	@ (8002288 <HAL_RCC_ClockConfig+0x1f8>)
 8002262:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002264:	4b09      	ldr	r3, [pc, #36]	@ (800228c <HAL_RCC_ClockConfig+0x1fc>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe ffa1 	bl	80011b0 <HAL_InitTick>
 800226e:	4603      	mov	r3, r0
 8002270:	72fb      	strb	r3, [r7, #11]

  return status;
 8002272:	7afb      	ldrb	r3, [r7, #11]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40022000 	.word	0x40022000
 8002280:	40021000 	.word	0x40021000
 8002284:	08004ce4 	.word	0x08004ce4
 8002288:	20000000 	.word	0x20000000
 800228c:	20000004 	.word	0x20000004

08002290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002290:	b480      	push	{r7}
 8002292:	b089      	sub	sp, #36	@ 0x24
 8002294:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
 800229a:	2300      	movs	r3, #0
 800229c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800229e:	4b3e      	ldr	r3, [pc, #248]	@ (8002398 <HAL_RCC_GetSysClockFreq+0x108>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002398 <HAL_RCC_GetSysClockFreq+0x108>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d005      	beq.n	80022c4 <HAL_RCC_GetSysClockFreq+0x34>
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	2b0c      	cmp	r3, #12
 80022bc:	d121      	bne.n	8002302 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d11e      	bne.n	8002302 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022c4:	4b34      	ldr	r3, [pc, #208]	@ (8002398 <HAL_RCC_GetSysClockFreq+0x108>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d107      	bne.n	80022e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022d0:	4b31      	ldr	r3, [pc, #196]	@ (8002398 <HAL_RCC_GetSysClockFreq+0x108>)
 80022d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022d6:	0a1b      	lsrs	r3, r3, #8
 80022d8:	f003 030f 	and.w	r3, r3, #15
 80022dc:	61fb      	str	r3, [r7, #28]
 80022de:	e005      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002398 <HAL_RCC_GetSysClockFreq+0x108>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	091b      	lsrs	r3, r3, #4
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022ec:	4a2b      	ldr	r2, [pc, #172]	@ (800239c <HAL_RCC_GetSysClockFreq+0x10c>)
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10d      	bne.n	8002318 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002300:	e00a      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	2b04      	cmp	r3, #4
 8002306:	d102      	bne.n	800230e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002308:	4b25      	ldr	r3, [pc, #148]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800230a:	61bb      	str	r3, [r7, #24]
 800230c:	e004      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	2b08      	cmp	r3, #8
 8002312:	d101      	bne.n	8002318 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002314:	4b23      	ldr	r3, [pc, #140]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002316:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	2b0c      	cmp	r3, #12
 800231c:	d134      	bne.n	8002388 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800231e:	4b1e      	ldr	r3, [pc, #120]	@ (8002398 <HAL_RCC_GetSysClockFreq+0x108>)
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d003      	beq.n	8002336 <HAL_RCC_GetSysClockFreq+0xa6>
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	2b03      	cmp	r3, #3
 8002332:	d003      	beq.n	800233c <HAL_RCC_GetSysClockFreq+0xac>
 8002334:	e005      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002336:	4b1a      	ldr	r3, [pc, #104]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002338:	617b      	str	r3, [r7, #20]
      break;
 800233a:	e005      	b.n	8002348 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800233c:	4b19      	ldr	r3, [pc, #100]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800233e:	617b      	str	r3, [r7, #20]
      break;
 8002340:	e002      	b.n	8002348 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	617b      	str	r3, [r7, #20]
      break;
 8002346:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002348:	4b13      	ldr	r3, [pc, #76]	@ (8002398 <HAL_RCC_GetSysClockFreq+0x108>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	091b      	lsrs	r3, r3, #4
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	3301      	adds	r3, #1
 8002354:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002356:	4b10      	ldr	r3, [pc, #64]	@ (8002398 <HAL_RCC_GetSysClockFreq+0x108>)
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	0a1b      	lsrs	r3, r3, #8
 800235c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	fb03 f202 	mul.w	r2, r3, r2
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	fbb2 f3f3 	udiv	r3, r2, r3
 800236c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800236e:	4b0a      	ldr	r3, [pc, #40]	@ (8002398 <HAL_RCC_GetSysClockFreq+0x108>)
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	0e5b      	lsrs	r3, r3, #25
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	3301      	adds	r3, #1
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	fbb2 f3f3 	udiv	r3, r2, r3
 8002386:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002388:	69bb      	ldr	r3, [r7, #24]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3724      	adds	r7, #36	@ 0x24
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000
 800239c:	08004cfc 	.word	0x08004cfc
 80023a0:	00f42400 	.word	0x00f42400
 80023a4:	007a1200 	.word	0x007a1200

080023a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023ac:	4b03      	ldr	r3, [pc, #12]	@ (80023bc <HAL_RCC_GetHCLKFreq+0x14>)
 80023ae:	681b      	ldr	r3, [r3, #0]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	20000000 	.word	0x20000000

080023c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023c4:	f7ff fff0 	bl	80023a8 <HAL_RCC_GetHCLKFreq>
 80023c8:	4602      	mov	r2, r0
 80023ca:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	0a1b      	lsrs	r3, r3, #8
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	4904      	ldr	r1, [pc, #16]	@ (80023e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023d6:	5ccb      	ldrb	r3, [r1, r3]
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40021000 	.word	0x40021000
 80023e8:	08004cf4 	.word	0x08004cf4

080023ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023f0:	f7ff ffda 	bl	80023a8 <HAL_RCC_GetHCLKFreq>
 80023f4:	4602      	mov	r2, r0
 80023f6:	4b06      	ldr	r3, [pc, #24]	@ (8002410 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	0adb      	lsrs	r3, r3, #11
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	4904      	ldr	r1, [pc, #16]	@ (8002414 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002402:	5ccb      	ldrb	r3, [r1, r3]
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800240c:	4618      	mov	r0, r3
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40021000 	.word	0x40021000
 8002414:	08004cf4 	.word	0x08004cf4

08002418 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002420:	2300      	movs	r3, #0
 8002422:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002424:	4b2a      	ldr	r3, [pc, #168]	@ (80024d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002428:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002430:	f7ff f9b6 	bl	80017a0 <HAL_PWREx_GetVoltageRange>
 8002434:	6178      	str	r0, [r7, #20]
 8002436:	e014      	b.n	8002462 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002438:	4b25      	ldr	r3, [pc, #148]	@ (80024d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800243a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800243c:	4a24      	ldr	r2, [pc, #144]	@ (80024d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800243e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002442:	6593      	str	r3, [r2, #88]	@ 0x58
 8002444:	4b22      	ldr	r3, [pc, #136]	@ (80024d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002448:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002450:	f7ff f9a6 	bl	80017a0 <HAL_PWREx_GetVoltageRange>
 8002454:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002456:	4b1e      	ldr	r3, [pc, #120]	@ (80024d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245a:	4a1d      	ldr	r2, [pc, #116]	@ (80024d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800245c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002460:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002468:	d10b      	bne.n	8002482 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b80      	cmp	r3, #128	@ 0x80
 800246e:	d919      	bls.n	80024a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2ba0      	cmp	r3, #160	@ 0xa0
 8002474:	d902      	bls.n	800247c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002476:	2302      	movs	r3, #2
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	e013      	b.n	80024a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800247c:	2301      	movs	r3, #1
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	e010      	b.n	80024a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b80      	cmp	r3, #128	@ 0x80
 8002486:	d902      	bls.n	800248e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002488:	2303      	movs	r3, #3
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	e00a      	b.n	80024a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b80      	cmp	r3, #128	@ 0x80
 8002492:	d102      	bne.n	800249a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002494:	2302      	movs	r3, #2
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	e004      	b.n	80024a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b70      	cmp	r3, #112	@ 0x70
 800249e:	d101      	bne.n	80024a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024a0:	2301      	movs	r3, #1
 80024a2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024a4:	4b0b      	ldr	r3, [pc, #44]	@ (80024d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f023 0207 	bic.w	r2, r3, #7
 80024ac:	4909      	ldr	r1, [pc, #36]	@ (80024d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024b4:	4b07      	ldr	r3, [pc, #28]	@ (80024d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d001      	beq.n	80024c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40022000 	.word	0x40022000

080024d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024e0:	2300      	movs	r3, #0
 80024e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024e4:	2300      	movs	r3, #0
 80024e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d031      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80024fc:	d01a      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80024fe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002502:	d814      	bhi.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002504:	2b00      	cmp	r3, #0
 8002506:	d009      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002508:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800250c:	d10f      	bne.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800250e:	4b5d      	ldr	r3, [pc, #372]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	4a5c      	ldr	r2, [pc, #368]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002518:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800251a:	e00c      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3304      	adds	r3, #4
 8002520:	2100      	movs	r1, #0
 8002522:	4618      	mov	r0, r3
 8002524:	f000 f9de 	bl	80028e4 <RCCEx_PLLSAI1_Config>
 8002528:	4603      	mov	r3, r0
 800252a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800252c:	e003      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	74fb      	strb	r3, [r7, #19]
      break;
 8002532:	e000      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002534:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002536:	7cfb      	ldrb	r3, [r7, #19]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10b      	bne.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800253c:	4b51      	ldr	r3, [pc, #324]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002542:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800254a:	494e      	ldr	r1, [pc, #312]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002552:	e001      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002554:	7cfb      	ldrb	r3, [r7, #19]
 8002556:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 809e 	beq.w	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002566:	2300      	movs	r3, #0
 8002568:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800256a:	4b46      	ldr	r3, [pc, #280]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800256c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800257a:	2300      	movs	r3, #0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00d      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002580:	4b40      	ldr	r3, [pc, #256]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002584:	4a3f      	ldr	r2, [pc, #252]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002586:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800258a:	6593      	str	r3, [r2, #88]	@ 0x58
 800258c:	4b3d      	ldr	r3, [pc, #244]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800258e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002590:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002598:	2301      	movs	r3, #1
 800259a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800259c:	4b3a      	ldr	r3, [pc, #232]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a39      	ldr	r2, [pc, #228]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80025a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025a8:	f7fe fe52 	bl	8001250 <HAL_GetTick>
 80025ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025ae:	e009      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b0:	f7fe fe4e 	bl	8001250 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d902      	bls.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	74fb      	strb	r3, [r7, #19]
        break;
 80025c2:	e005      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025c4:	4b30      	ldr	r3, [pc, #192]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0ef      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80025d0:	7cfb      	ldrb	r3, [r7, #19]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d15a      	bne.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025d6:	4b2b      	ldr	r3, [pc, #172]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d01e      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d019      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025f2:	4b24      	ldr	r3, [pc, #144]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025fc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025fe:	4b21      	ldr	r3, [pc, #132]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002600:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002604:	4a1f      	ldr	r2, [pc, #124]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002606:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800260a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800260e:	4b1d      	ldr	r3, [pc, #116]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002614:	4a1b      	ldr	r2, [pc, #108]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002616:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800261a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800261e:	4a19      	ldr	r2, [pc, #100]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d016      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002630:	f7fe fe0e 	bl	8001250 <HAL_GetTick>
 8002634:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002636:	e00b      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002638:	f7fe fe0a 	bl	8001250 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002646:	4293      	cmp	r3, r2
 8002648:	d902      	bls.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	74fb      	strb	r3, [r7, #19]
            break;
 800264e:	e006      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002650:	4b0c      	ldr	r3, [pc, #48]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0ec      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800265e:	7cfb      	ldrb	r3, [r7, #19]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10b      	bne.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002664:	4b07      	ldr	r3, [pc, #28]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800266a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002672:	4904      	ldr	r1, [pc, #16]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800267a:	e009      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800267c:	7cfb      	ldrb	r3, [r7, #19]
 800267e:	74bb      	strb	r3, [r7, #18]
 8002680:	e006      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000
 8002688:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800268c:	7cfb      	ldrb	r3, [r7, #19]
 800268e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002690:	7c7b      	ldrb	r3, [r7, #17]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d105      	bne.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002696:	4b8a      	ldr	r3, [pc, #552]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800269a:	4a89      	ldr	r2, [pc, #548]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800269c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026a0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00a      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026ae:	4b84      	ldr	r3, [pc, #528]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b4:	f023 0203 	bic.w	r2, r3, #3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	4980      	ldr	r1, [pc, #512]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00a      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026d0:	4b7b      	ldr	r3, [pc, #492]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026d6:	f023 020c 	bic.w	r2, r3, #12
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026de:	4978      	ldr	r1, [pc, #480]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0320 	and.w	r3, r3, #32
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00a      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026f2:	4b73      	ldr	r3, [pc, #460]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002700:	496f      	ldr	r1, [pc, #444]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002702:	4313      	orrs	r3, r2
 8002704:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00a      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002714:	4b6a      	ldr	r3, [pc, #424]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800271a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002722:	4967      	ldr	r1, [pc, #412]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00a      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002736:	4b62      	ldr	r3, [pc, #392]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800273c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002744:	495e      	ldr	r1, [pc, #376]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00a      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002758:	4b59      	ldr	r3, [pc, #356]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800275a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800275e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002766:	4956      	ldr	r1, [pc, #344]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00a      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800277a:	4b51      	ldr	r3, [pc, #324]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800277c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002780:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002788:	494d      	ldr	r1, [pc, #308]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800278a:	4313      	orrs	r3, r2
 800278c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d028      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800279c:	4b48      	ldr	r3, [pc, #288]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027aa:	4945      	ldr	r1, [pc, #276]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027ba:	d106      	bne.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027bc:	4b40      	ldr	r3, [pc, #256]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	4a3f      	ldr	r2, [pc, #252]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027c6:	60d3      	str	r3, [r2, #12]
 80027c8:	e011      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027d2:	d10c      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3304      	adds	r3, #4
 80027d8:	2101      	movs	r1, #1
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 f882 	bl	80028e4 <RCCEx_PLLSAI1_Config>
 80027e0:	4603      	mov	r3, r0
 80027e2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027e4:	7cfb      	ldrb	r3, [r7, #19]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80027ea:	7cfb      	ldrb	r3, [r7, #19]
 80027ec:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d028      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027fa:	4b31      	ldr	r3, [pc, #196]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002800:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002808:	492d      	ldr	r1, [pc, #180]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800280a:	4313      	orrs	r3, r2
 800280c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002814:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002818:	d106      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800281a:	4b29      	ldr	r3, [pc, #164]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	4a28      	ldr	r2, [pc, #160]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002820:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002824:	60d3      	str	r3, [r2, #12]
 8002826:	e011      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002830:	d10c      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3304      	adds	r3, #4
 8002836:	2101      	movs	r1, #1
 8002838:	4618      	mov	r0, r3
 800283a:	f000 f853 	bl	80028e4 <RCCEx_PLLSAI1_Config>
 800283e:	4603      	mov	r3, r0
 8002840:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002842:	7cfb      	ldrb	r3, [r7, #19]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002848:	7cfb      	ldrb	r3, [r7, #19]
 800284a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d01c      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002858:	4b19      	ldr	r3, [pc, #100]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800285a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002866:	4916      	ldr	r1, [pc, #88]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002872:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002876:	d10c      	bne.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3304      	adds	r3, #4
 800287c:	2102      	movs	r1, #2
 800287e:	4618      	mov	r0, r3
 8002880:	f000 f830 	bl	80028e4 <RCCEx_PLLSAI1_Config>
 8002884:	4603      	mov	r3, r0
 8002886:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002888:	7cfb      	ldrb	r3, [r7, #19]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800288e:	7cfb      	ldrb	r3, [r7, #19]
 8002890:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00a      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800289e:	4b08      	ldr	r3, [pc, #32]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ac:	4904      	ldr	r1, [pc, #16]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000

080028c4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80028c8:	4b05      	ldr	r3, [pc, #20]	@ (80028e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a04      	ldr	r2, [pc, #16]	@ (80028e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80028ce:	f043 0304 	orr.w	r3, r3, #4
 80028d2:	6013      	str	r3, [r2, #0]
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000

080028e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028f2:	4b74      	ldr	r3, [pc, #464]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d018      	beq.n	8002930 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80028fe:	4b71      	ldr	r3, [pc, #452]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f003 0203 	and.w	r2, r3, #3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d10d      	bne.n	800292a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
       ||
 8002912:	2b00      	cmp	r3, #0
 8002914:	d009      	beq.n	800292a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002916:	4b6b      	ldr	r3, [pc, #428]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	091b      	lsrs	r3, r3, #4
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
       ||
 8002926:	429a      	cmp	r2, r3
 8002928:	d047      	beq.n	80029ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	73fb      	strb	r3, [r7, #15]
 800292e:	e044      	b.n	80029ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b03      	cmp	r3, #3
 8002936:	d018      	beq.n	800296a <RCCEx_PLLSAI1_Config+0x86>
 8002938:	2b03      	cmp	r3, #3
 800293a:	d825      	bhi.n	8002988 <RCCEx_PLLSAI1_Config+0xa4>
 800293c:	2b01      	cmp	r3, #1
 800293e:	d002      	beq.n	8002946 <RCCEx_PLLSAI1_Config+0x62>
 8002940:	2b02      	cmp	r3, #2
 8002942:	d009      	beq.n	8002958 <RCCEx_PLLSAI1_Config+0x74>
 8002944:	e020      	b.n	8002988 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002946:	4b5f      	ldr	r3, [pc, #380]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d11d      	bne.n	800298e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002956:	e01a      	b.n	800298e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002958:	4b5a      	ldr	r3, [pc, #360]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002960:	2b00      	cmp	r3, #0
 8002962:	d116      	bne.n	8002992 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002968:	e013      	b.n	8002992 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800296a:	4b56      	ldr	r3, [pc, #344]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10f      	bne.n	8002996 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002976:	4b53      	ldr	r3, [pc, #332]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d109      	bne.n	8002996 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002986:	e006      	b.n	8002996 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	73fb      	strb	r3, [r7, #15]
      break;
 800298c:	e004      	b.n	8002998 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800298e:	bf00      	nop
 8002990:	e002      	b.n	8002998 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002992:	bf00      	nop
 8002994:	e000      	b.n	8002998 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002996:	bf00      	nop
    }

    if(status == HAL_OK)
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10d      	bne.n	80029ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800299e:	4b49      	ldr	r3, [pc, #292]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6819      	ldr	r1, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	430b      	orrs	r3, r1
 80029b4:	4943      	ldr	r1, [pc, #268]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d17c      	bne.n	8002aba <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029c0:	4b40      	ldr	r3, [pc, #256]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a3f      	ldr	r2, [pc, #252]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80029ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029cc:	f7fe fc40 	bl	8001250 <HAL_GetTick>
 80029d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029d2:	e009      	b.n	80029e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029d4:	f7fe fc3c 	bl	8001250 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d902      	bls.n	80029e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	73fb      	strb	r3, [r7, #15]
        break;
 80029e6:	e005      	b.n	80029f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029e8:	4b36      	ldr	r3, [pc, #216]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1ef      	bne.n	80029d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d15f      	bne.n	8002aba <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d110      	bne.n	8002a22 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a00:	4b30      	ldr	r3, [pc, #192]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002a08:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6892      	ldr	r2, [r2, #8]
 8002a10:	0211      	lsls	r1, r2, #8
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	68d2      	ldr	r2, [r2, #12]
 8002a16:	06d2      	lsls	r2, r2, #27
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	492a      	ldr	r1, [pc, #168]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	610b      	str	r3, [r1, #16]
 8002a20:	e027      	b.n	8002a72 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d112      	bne.n	8002a4e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a28:	4b26      	ldr	r3, [pc, #152]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002a30:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6892      	ldr	r2, [r2, #8]
 8002a38:	0211      	lsls	r1, r2, #8
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6912      	ldr	r2, [r2, #16]
 8002a3e:	0852      	lsrs	r2, r2, #1
 8002a40:	3a01      	subs	r2, #1
 8002a42:	0552      	lsls	r2, r2, #21
 8002a44:	430a      	orrs	r2, r1
 8002a46:	491f      	ldr	r1, [pc, #124]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	610b      	str	r3, [r1, #16]
 8002a4c:	e011      	b.n	8002a72 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002a56:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6892      	ldr	r2, [r2, #8]
 8002a5e:	0211      	lsls	r1, r2, #8
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6952      	ldr	r2, [r2, #20]
 8002a64:	0852      	lsrs	r2, r2, #1
 8002a66:	3a01      	subs	r2, #1
 8002a68:	0652      	lsls	r2, r2, #25
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	4915      	ldr	r1, [pc, #84]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a72:	4b14      	ldr	r3, [pc, #80]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a13      	ldr	r2, [pc, #76]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a7c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7e:	f7fe fbe7 	bl	8001250 <HAL_GetTick>
 8002a82:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a84:	e009      	b.n	8002a9a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a86:	f7fe fbe3 	bl	8001250 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d902      	bls.n	8002a9a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	73fb      	strb	r3, [r7, #15]
          break;
 8002a98:	e005      	b.n	8002aa6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0ef      	beq.n	8002a86 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d106      	bne.n	8002aba <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002aac:	4b05      	ldr	r3, [pc, #20]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aae:	691a      	ldr	r2, [r3, #16]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	4903      	ldr	r1, [pc, #12]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40021000 	.word	0x40021000

08002ac8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e095      	b.n	8002c06 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d108      	bne.n	8002af4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002aea:	d009      	beq.n	8002b00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	61da      	str	r2, [r3, #28]
 8002af2:	e005      	b.n	8002b00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7fe f8fc 	bl	8000d18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b40:	d902      	bls.n	8002b48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	e002      	b.n	8002b4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002b56:	d007      	beq.n	8002b68 <HAL_SPI_Init+0xa0>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b60:	d002      	beq.n	8002b68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002baa:	ea42 0103 	orr.w	r1, r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	0c1b      	lsrs	r3, r3, #16
 8002bc4:	f003 0204 	and.w	r2, r3, #4
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bcc:	f003 0310 	and.w	r3, r3, #16
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002be4:	ea42 0103 	orr.w	r1, r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b088      	sub	sp, #32
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	603b      	str	r3, [r7, #0]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c1e:	f7fe fb17 	bl	8001250 <HAL_GetTick>
 8002c22:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002c24:	88fb      	ldrh	r3, [r7, #6]
 8002c26:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d001      	beq.n	8002c38 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002c34:	2302      	movs	r3, #2
 8002c36:	e15c      	b.n	8002ef2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d002      	beq.n	8002c44 <HAL_SPI_Transmit+0x36>
 8002c3e:	88fb      	ldrh	r3, [r7, #6]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e154      	b.n	8002ef2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d101      	bne.n	8002c56 <HAL_SPI_Transmit+0x48>
 8002c52:	2302      	movs	r3, #2
 8002c54:	e14d      	b.n	8002ef2 <HAL_SPI_Transmit+0x2e4>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2203      	movs	r2, #3
 8002c62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	88fa      	ldrh	r2, [r7, #6]
 8002c76:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	88fa      	ldrh	r2, [r7, #6]
 8002c7c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ca8:	d10f      	bne.n	8002cca <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cc8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cd4:	2b40      	cmp	r3, #64	@ 0x40
 8002cd6:	d007      	beq.n	8002ce8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ce6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002cf0:	d952      	bls.n	8002d98 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <HAL_SPI_Transmit+0xf2>
 8002cfa:	8b7b      	ldrh	r3, [r7, #26]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d145      	bne.n	8002d8c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d04:	881a      	ldrh	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d10:	1c9a      	adds	r2, r3, #2
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d24:	e032      	b.n	8002d8c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d112      	bne.n	8002d5a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d38:	881a      	ldrh	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d44:	1c9a      	adds	r2, r3, #2
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d58:	e018      	b.n	8002d8c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d5a:	f7fe fa79 	bl	8001250 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d803      	bhi.n	8002d72 <HAL_SPI_Transmit+0x164>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d70:	d102      	bne.n	8002d78 <HAL_SPI_Transmit+0x16a>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d109      	bne.n	8002d8c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e0b2      	b.n	8002ef2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1c7      	bne.n	8002d26 <HAL_SPI_Transmit+0x118>
 8002d96:	e083      	b.n	8002ea0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <HAL_SPI_Transmit+0x198>
 8002da0:	8b7b      	ldrh	r3, [r7, #26]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d177      	bne.n	8002e96 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d912      	bls.n	8002dd6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db4:	881a      	ldrh	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc0:	1c9a      	adds	r2, r3, #2
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	3b02      	subs	r3, #2
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002dd4:	e05f      	b.n	8002e96 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	330c      	adds	r3, #12
 8002de0:	7812      	ldrb	r2, [r2, #0]
 8002de2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002dfc:	e04b      	b.n	8002e96 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d12b      	bne.n	8002e64 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d912      	bls.n	8002e3c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e1a:	881a      	ldrh	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e26:	1c9a      	adds	r2, r3, #2
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	3b02      	subs	r3, #2
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e3a:	e02c      	b.n	8002e96 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	330c      	adds	r3, #12
 8002e46:	7812      	ldrb	r2, [r2, #0]
 8002e48:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e62:	e018      	b.n	8002e96 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e64:	f7fe f9f4 	bl	8001250 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d803      	bhi.n	8002e7c <HAL_SPI_Transmit+0x26e>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7a:	d102      	bne.n	8002e82 <HAL_SPI_Transmit+0x274>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d109      	bne.n	8002e96 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e02d      	b.n	8002ef2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1ae      	bne.n	8002dfe <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ea0:	69fa      	ldr	r2, [r7, #28]
 8002ea2:	6839      	ldr	r1, [r7, #0]
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 f947 	bl	8003138 <SPI_EndRxTxTransaction>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d002      	beq.n	8002eb6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10a      	bne.n	8002ed4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e000      	b.n	8002ef2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
  }
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3720      	adds	r7, #32
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	603b      	str	r3, [r7, #0]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f0c:	f7fe f9a0 	bl	8001250 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f14:	1a9b      	subs	r3, r3, r2
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	4413      	add	r3, r2
 8002f1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f1c:	f7fe f998 	bl	8001250 <HAL_GetTick>
 8002f20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f22:	4b39      	ldr	r3, [pc, #228]	@ (8003008 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	015b      	lsls	r3, r3, #5
 8002f28:	0d1b      	lsrs	r3, r3, #20
 8002f2a:	69fa      	ldr	r2, [r7, #28]
 8002f2c:	fb02 f303 	mul.w	r3, r2, r3
 8002f30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f32:	e054      	b.n	8002fde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3a:	d050      	beq.n	8002fde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f3c:	f7fe f988 	bl	8001250 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	69fa      	ldr	r2, [r7, #28]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d902      	bls.n	8002f52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d13d      	bne.n	8002fce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002f60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f6a:	d111      	bne.n	8002f90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f74:	d004      	beq.n	8002f80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f7e:	d107      	bne.n	8002f90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f98:	d10f      	bne.n	8002fba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e017      	b.n	8002ffe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	bf0c      	ite	eq
 8002fee:	2301      	moveq	r3, #1
 8002ff0:	2300      	movne	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d19b      	bne.n	8002f34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3720      	adds	r7, #32
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	20000000 	.word	0x20000000

0800300c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08a      	sub	sp, #40	@ 0x28
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
 8003018:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800301a:	2300      	movs	r3, #0
 800301c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800301e:	f7fe f917 	bl	8001250 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003026:	1a9b      	subs	r3, r3, r2
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	4413      	add	r3, r2
 800302c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800302e:	f7fe f90f 	bl	8001250 <HAL_GetTick>
 8003032:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	330c      	adds	r3, #12
 800303a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800303c:	4b3d      	ldr	r3, [pc, #244]	@ (8003134 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4613      	mov	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	00da      	lsls	r2, r3, #3
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	0d1b      	lsrs	r3, r3, #20
 800304c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800304e:	fb02 f303 	mul.w	r3, r2, r3
 8003052:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003054:	e060      	b.n	8003118 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800305c:	d107      	bne.n	800306e <SPI_WaitFifoStateUntilTimeout+0x62>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d104      	bne.n	800306e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800306c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003074:	d050      	beq.n	8003118 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003076:	f7fe f8eb 	bl	8001250 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003082:	429a      	cmp	r2, r3
 8003084:	d902      	bls.n	800308c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003088:	2b00      	cmp	r3, #0
 800308a:	d13d      	bne.n	8003108 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800309a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030a4:	d111      	bne.n	80030ca <SPI_WaitFifoStateUntilTimeout+0xbe>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030ae:	d004      	beq.n	80030ba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030b8:	d107      	bne.n	80030ca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030d2:	d10f      	bne.n	80030f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e010      	b.n	800312a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800310e:	2300      	movs	r3, #0
 8003110:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	3b01      	subs	r3, #1
 8003116:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	4013      	ands	r3, r2
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	429a      	cmp	r2, r3
 8003126:	d196      	bne.n	8003056 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3728      	adds	r7, #40	@ 0x28
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20000000 	.word	0x20000000

08003138 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af02      	add	r7, sp, #8
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2200      	movs	r2, #0
 800314c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f7ff ff5b 	bl	800300c <SPI_WaitFifoStateUntilTimeout>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d007      	beq.n	800316c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003160:	f043 0220 	orr.w	r2, r3, #32
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e027      	b.n	80031bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2200      	movs	r2, #0
 8003174:	2180      	movs	r1, #128	@ 0x80
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f7ff fec0 	bl	8002efc <SPI_WaitFlagStateUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d007      	beq.n	8003192 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003186:	f043 0220 	orr.w	r2, r3, #32
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e014      	b.n	80031bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2200      	movs	r2, #0
 800319a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f7ff ff34 	bl	800300c <SPI_WaitFifoStateUntilTimeout>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d007      	beq.n	80031ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ae:	f043 0220 	orr.w	r2, r3, #32
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e000      	b.n	80031bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e040      	b.n	8003258 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7fd ff36 	bl	8001058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2224      	movs	r2, #36	@ 0x24
 80031f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0201 	bic.w	r2, r2, #1
 8003200:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003206:	2b00      	cmp	r3, #0
 8003208:	d002      	beq.n	8003210 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 fade 	bl	80037cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f8af 	bl	8003374 <UART_SetConfig>
 8003216:	4603      	mov	r3, r0
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e01b      	b.n	8003258 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800322e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800323e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0201 	orr.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 fb5d 	bl	8003910 <UART_CheckIdleState>
 8003256:	4603      	mov	r3, r0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08a      	sub	sp, #40	@ 0x28
 8003264:	af02      	add	r7, sp, #8
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	603b      	str	r3, [r7, #0]
 800326c:	4613      	mov	r3, r2
 800326e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003274:	2b20      	cmp	r3, #32
 8003276:	d177      	bne.n	8003368 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <HAL_UART_Transmit+0x24>
 800327e:	88fb      	ldrh	r3, [r7, #6]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e070      	b.n	800336a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2221      	movs	r2, #33	@ 0x21
 8003294:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003296:	f7fd ffdb 	bl	8001250 <HAL_GetTick>
 800329a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	88fa      	ldrh	r2, [r7, #6]
 80032a0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	88fa      	ldrh	r2, [r7, #6]
 80032a8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032b4:	d108      	bne.n	80032c8 <HAL_UART_Transmit+0x68>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d104      	bne.n	80032c8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	e003      	b.n	80032d0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032d0:	e02f      	b.n	8003332 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2200      	movs	r2, #0
 80032da:	2180      	movs	r1, #128	@ 0x80
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 fbbf 	bl	8003a60 <UART_WaitOnFlagUntilTimeout>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d004      	beq.n	80032f2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2220      	movs	r2, #32
 80032ec:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e03b      	b.n	800336a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10b      	bne.n	8003310 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	881a      	ldrh	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003304:	b292      	uxth	r2, r2
 8003306:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	3302      	adds	r3, #2
 800330c:	61bb      	str	r3, [r7, #24]
 800330e:	e007      	b.n	8003320 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	781a      	ldrb	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3301      	adds	r3, #1
 800331e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003326:	b29b      	uxth	r3, r3
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003338:	b29b      	uxth	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1c9      	bne.n	80032d2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	2200      	movs	r2, #0
 8003346:	2140      	movs	r1, #64	@ 0x40
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 fb89 	bl	8003a60 <UART_WaitOnFlagUntilTimeout>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d004      	beq.n	800335e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2220      	movs	r2, #32
 8003358:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e005      	b.n	800336a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2220      	movs	r2, #32
 8003362:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	e000      	b.n	800336a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003368:	2302      	movs	r3, #2
  }
}
 800336a:	4618      	mov	r0, r3
 800336c:	3720      	adds	r7, #32
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003374:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003378:	b08a      	sub	sp, #40	@ 0x28
 800337a:	af00      	add	r7, sp, #0
 800337c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	431a      	orrs	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	431a      	orrs	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	4313      	orrs	r3, r2
 800339a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	4bb4      	ldr	r3, [pc, #720]	@ (8003674 <UART_SetConfig+0x300>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	6812      	ldr	r2, [r2, #0]
 80033aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033ac:	430b      	orrs	r3, r1
 80033ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4aa9      	ldr	r2, [pc, #676]	@ (8003678 <UART_SetConfig+0x304>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d004      	beq.n	80033e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033dc:	4313      	orrs	r3, r2
 80033de:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033f0:	430a      	orrs	r2, r1
 80033f2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4aa0      	ldr	r2, [pc, #640]	@ (800367c <UART_SetConfig+0x308>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d126      	bne.n	800344c <UART_SetConfig+0xd8>
 80033fe:	4ba0      	ldr	r3, [pc, #640]	@ (8003680 <UART_SetConfig+0x30c>)
 8003400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003404:	f003 0303 	and.w	r3, r3, #3
 8003408:	2b03      	cmp	r3, #3
 800340a:	d81b      	bhi.n	8003444 <UART_SetConfig+0xd0>
 800340c:	a201      	add	r2, pc, #4	@ (adr r2, 8003414 <UART_SetConfig+0xa0>)
 800340e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003412:	bf00      	nop
 8003414:	08003425 	.word	0x08003425
 8003418:	08003435 	.word	0x08003435
 800341c:	0800342d 	.word	0x0800342d
 8003420:	0800343d 	.word	0x0800343d
 8003424:	2301      	movs	r3, #1
 8003426:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800342a:	e080      	b.n	800352e <UART_SetConfig+0x1ba>
 800342c:	2302      	movs	r3, #2
 800342e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003432:	e07c      	b.n	800352e <UART_SetConfig+0x1ba>
 8003434:	2304      	movs	r3, #4
 8003436:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800343a:	e078      	b.n	800352e <UART_SetConfig+0x1ba>
 800343c:	2308      	movs	r3, #8
 800343e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003442:	e074      	b.n	800352e <UART_SetConfig+0x1ba>
 8003444:	2310      	movs	r3, #16
 8003446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800344a:	e070      	b.n	800352e <UART_SetConfig+0x1ba>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a8c      	ldr	r2, [pc, #560]	@ (8003684 <UART_SetConfig+0x310>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d138      	bne.n	80034c8 <UART_SetConfig+0x154>
 8003456:	4b8a      	ldr	r3, [pc, #552]	@ (8003680 <UART_SetConfig+0x30c>)
 8003458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800345c:	f003 030c 	and.w	r3, r3, #12
 8003460:	2b0c      	cmp	r3, #12
 8003462:	d82d      	bhi.n	80034c0 <UART_SetConfig+0x14c>
 8003464:	a201      	add	r2, pc, #4	@ (adr r2, 800346c <UART_SetConfig+0xf8>)
 8003466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346a:	bf00      	nop
 800346c:	080034a1 	.word	0x080034a1
 8003470:	080034c1 	.word	0x080034c1
 8003474:	080034c1 	.word	0x080034c1
 8003478:	080034c1 	.word	0x080034c1
 800347c:	080034b1 	.word	0x080034b1
 8003480:	080034c1 	.word	0x080034c1
 8003484:	080034c1 	.word	0x080034c1
 8003488:	080034c1 	.word	0x080034c1
 800348c:	080034a9 	.word	0x080034a9
 8003490:	080034c1 	.word	0x080034c1
 8003494:	080034c1 	.word	0x080034c1
 8003498:	080034c1 	.word	0x080034c1
 800349c:	080034b9 	.word	0x080034b9
 80034a0:	2300      	movs	r3, #0
 80034a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034a6:	e042      	b.n	800352e <UART_SetConfig+0x1ba>
 80034a8:	2302      	movs	r3, #2
 80034aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034ae:	e03e      	b.n	800352e <UART_SetConfig+0x1ba>
 80034b0:	2304      	movs	r3, #4
 80034b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034b6:	e03a      	b.n	800352e <UART_SetConfig+0x1ba>
 80034b8:	2308      	movs	r3, #8
 80034ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034be:	e036      	b.n	800352e <UART_SetConfig+0x1ba>
 80034c0:	2310      	movs	r3, #16
 80034c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034c6:	e032      	b.n	800352e <UART_SetConfig+0x1ba>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a6a      	ldr	r2, [pc, #424]	@ (8003678 <UART_SetConfig+0x304>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d12a      	bne.n	8003528 <UART_SetConfig+0x1b4>
 80034d2:	4b6b      	ldr	r3, [pc, #428]	@ (8003680 <UART_SetConfig+0x30c>)
 80034d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80034dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80034e0:	d01a      	beq.n	8003518 <UART_SetConfig+0x1a4>
 80034e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80034e6:	d81b      	bhi.n	8003520 <UART_SetConfig+0x1ac>
 80034e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034ec:	d00c      	beq.n	8003508 <UART_SetConfig+0x194>
 80034ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034f2:	d815      	bhi.n	8003520 <UART_SetConfig+0x1ac>
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <UART_SetConfig+0x18c>
 80034f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034fc:	d008      	beq.n	8003510 <UART_SetConfig+0x19c>
 80034fe:	e00f      	b.n	8003520 <UART_SetConfig+0x1ac>
 8003500:	2300      	movs	r3, #0
 8003502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003506:	e012      	b.n	800352e <UART_SetConfig+0x1ba>
 8003508:	2302      	movs	r3, #2
 800350a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800350e:	e00e      	b.n	800352e <UART_SetConfig+0x1ba>
 8003510:	2304      	movs	r3, #4
 8003512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003516:	e00a      	b.n	800352e <UART_SetConfig+0x1ba>
 8003518:	2308      	movs	r3, #8
 800351a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800351e:	e006      	b.n	800352e <UART_SetConfig+0x1ba>
 8003520:	2310      	movs	r3, #16
 8003522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003526:	e002      	b.n	800352e <UART_SetConfig+0x1ba>
 8003528:	2310      	movs	r3, #16
 800352a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a51      	ldr	r2, [pc, #324]	@ (8003678 <UART_SetConfig+0x304>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d17a      	bne.n	800362e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003538:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800353c:	2b08      	cmp	r3, #8
 800353e:	d824      	bhi.n	800358a <UART_SetConfig+0x216>
 8003540:	a201      	add	r2, pc, #4	@ (adr r2, 8003548 <UART_SetConfig+0x1d4>)
 8003542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003546:	bf00      	nop
 8003548:	0800356d 	.word	0x0800356d
 800354c:	0800358b 	.word	0x0800358b
 8003550:	08003575 	.word	0x08003575
 8003554:	0800358b 	.word	0x0800358b
 8003558:	0800357b 	.word	0x0800357b
 800355c:	0800358b 	.word	0x0800358b
 8003560:	0800358b 	.word	0x0800358b
 8003564:	0800358b 	.word	0x0800358b
 8003568:	08003583 	.word	0x08003583
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800356c:	f7fe ff28 	bl	80023c0 <HAL_RCC_GetPCLK1Freq>
 8003570:	61f8      	str	r0, [r7, #28]
        break;
 8003572:	e010      	b.n	8003596 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003574:	4b44      	ldr	r3, [pc, #272]	@ (8003688 <UART_SetConfig+0x314>)
 8003576:	61fb      	str	r3, [r7, #28]
        break;
 8003578:	e00d      	b.n	8003596 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800357a:	f7fe fe89 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 800357e:	61f8      	str	r0, [r7, #28]
        break;
 8003580:	e009      	b.n	8003596 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003582:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003586:	61fb      	str	r3, [r7, #28]
        break;
 8003588:	e005      	b.n	8003596 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800358a:	2300      	movs	r3, #0
 800358c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003594:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 8107 	beq.w	80037ac <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	4413      	add	r3, r2
 80035a8:	69fa      	ldr	r2, [r7, #28]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d305      	bcc.n	80035ba <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035b4:	69fa      	ldr	r2, [r7, #28]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d903      	bls.n	80035c2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80035c0:	e0f4      	b.n	80037ac <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	2200      	movs	r2, #0
 80035c6:	461c      	mov	r4, r3
 80035c8:	4615      	mov	r5, r2
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	f04f 0300 	mov.w	r3, #0
 80035d2:	022b      	lsls	r3, r5, #8
 80035d4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80035d8:	0222      	lsls	r2, r4, #8
 80035da:	68f9      	ldr	r1, [r7, #12]
 80035dc:	6849      	ldr	r1, [r1, #4]
 80035de:	0849      	lsrs	r1, r1, #1
 80035e0:	2000      	movs	r0, #0
 80035e2:	4688      	mov	r8, r1
 80035e4:	4681      	mov	r9, r0
 80035e6:	eb12 0a08 	adds.w	sl, r2, r8
 80035ea:	eb43 0b09 	adc.w	fp, r3, r9
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	603b      	str	r3, [r7, #0]
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035fc:	4650      	mov	r0, sl
 80035fe:	4659      	mov	r1, fp
 8003600:	f7fc fe3e 	bl	8000280 <__aeabi_uldivmod>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4613      	mov	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003612:	d308      	bcc.n	8003626 <UART_SetConfig+0x2b2>
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800361a:	d204      	bcs.n	8003626 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	60da      	str	r2, [r3, #12]
 8003624:	e0c2      	b.n	80037ac <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800362c:	e0be      	b.n	80037ac <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003636:	d16a      	bne.n	800370e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003638:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800363c:	2b08      	cmp	r3, #8
 800363e:	d834      	bhi.n	80036aa <UART_SetConfig+0x336>
 8003640:	a201      	add	r2, pc, #4	@ (adr r2, 8003648 <UART_SetConfig+0x2d4>)
 8003642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003646:	bf00      	nop
 8003648:	0800366d 	.word	0x0800366d
 800364c:	0800368d 	.word	0x0800368d
 8003650:	08003695 	.word	0x08003695
 8003654:	080036ab 	.word	0x080036ab
 8003658:	0800369b 	.word	0x0800369b
 800365c:	080036ab 	.word	0x080036ab
 8003660:	080036ab 	.word	0x080036ab
 8003664:	080036ab 	.word	0x080036ab
 8003668:	080036a3 	.word	0x080036a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800366c:	f7fe fea8 	bl	80023c0 <HAL_RCC_GetPCLK1Freq>
 8003670:	61f8      	str	r0, [r7, #28]
        break;
 8003672:	e020      	b.n	80036b6 <UART_SetConfig+0x342>
 8003674:	efff69f3 	.word	0xefff69f3
 8003678:	40008000 	.word	0x40008000
 800367c:	40013800 	.word	0x40013800
 8003680:	40021000 	.word	0x40021000
 8003684:	40004400 	.word	0x40004400
 8003688:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800368c:	f7fe feae 	bl	80023ec <HAL_RCC_GetPCLK2Freq>
 8003690:	61f8      	str	r0, [r7, #28]
        break;
 8003692:	e010      	b.n	80036b6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003694:	4b4c      	ldr	r3, [pc, #304]	@ (80037c8 <UART_SetConfig+0x454>)
 8003696:	61fb      	str	r3, [r7, #28]
        break;
 8003698:	e00d      	b.n	80036b6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800369a:	f7fe fdf9 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 800369e:	61f8      	str	r0, [r7, #28]
        break;
 80036a0:	e009      	b.n	80036b6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036a6:	61fb      	str	r3, [r7, #28]
        break;
 80036a8:	e005      	b.n	80036b6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80036b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d077      	beq.n	80037ac <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	005a      	lsls	r2, r3, #1
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	085b      	lsrs	r3, r3, #1
 80036c6:	441a      	add	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	2b0f      	cmp	r3, #15
 80036d6:	d916      	bls.n	8003706 <UART_SetConfig+0x392>
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036de:	d212      	bcs.n	8003706 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	f023 030f 	bic.w	r3, r3, #15
 80036e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	085b      	lsrs	r3, r3, #1
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	8afb      	ldrh	r3, [r7, #22]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	8afa      	ldrh	r2, [r7, #22]
 8003702:	60da      	str	r2, [r3, #12]
 8003704:	e052      	b.n	80037ac <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800370c:	e04e      	b.n	80037ac <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800370e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003712:	2b08      	cmp	r3, #8
 8003714:	d827      	bhi.n	8003766 <UART_SetConfig+0x3f2>
 8003716:	a201      	add	r2, pc, #4	@ (adr r2, 800371c <UART_SetConfig+0x3a8>)
 8003718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371c:	08003741 	.word	0x08003741
 8003720:	08003749 	.word	0x08003749
 8003724:	08003751 	.word	0x08003751
 8003728:	08003767 	.word	0x08003767
 800372c:	08003757 	.word	0x08003757
 8003730:	08003767 	.word	0x08003767
 8003734:	08003767 	.word	0x08003767
 8003738:	08003767 	.word	0x08003767
 800373c:	0800375f 	.word	0x0800375f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003740:	f7fe fe3e 	bl	80023c0 <HAL_RCC_GetPCLK1Freq>
 8003744:	61f8      	str	r0, [r7, #28]
        break;
 8003746:	e014      	b.n	8003772 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003748:	f7fe fe50 	bl	80023ec <HAL_RCC_GetPCLK2Freq>
 800374c:	61f8      	str	r0, [r7, #28]
        break;
 800374e:	e010      	b.n	8003772 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003750:	4b1d      	ldr	r3, [pc, #116]	@ (80037c8 <UART_SetConfig+0x454>)
 8003752:	61fb      	str	r3, [r7, #28]
        break;
 8003754:	e00d      	b.n	8003772 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003756:	f7fe fd9b 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 800375a:	61f8      	str	r0, [r7, #28]
        break;
 800375c:	e009      	b.n	8003772 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800375e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003762:	61fb      	str	r3, [r7, #28]
        break;
 8003764:	e005      	b.n	8003772 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003766:	2300      	movs	r3, #0
 8003768:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003770:	bf00      	nop
    }

    if (pclk != 0U)
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d019      	beq.n	80037ac <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	085a      	lsrs	r2, r3, #1
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	441a      	add	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	fbb2 f3f3 	udiv	r3, r2, r3
 800378a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	2b0f      	cmp	r3, #15
 8003790:	d909      	bls.n	80037a6 <UART_SetConfig+0x432>
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003798:	d205      	bcs.n	80037a6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60da      	str	r2, [r3, #12]
 80037a4:	e002      	b.n	80037ac <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80037b8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3728      	adds	r7, #40	@ 0x28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037c6:	bf00      	nop
 80037c8:	00f42400 	.word	0x00f42400

080037cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d8:	f003 0308 	and.w	r3, r3, #8
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003860:	f003 0310 	and.w	r3, r3, #16
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003882:	f003 0320 	and.w	r3, r3, #32
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d01a      	beq.n	80038e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038ca:	d10a      	bne.n	80038e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	605a      	str	r2, [r3, #4]
  }
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b098      	sub	sp, #96	@ 0x60
 8003914:	af02      	add	r7, sp, #8
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003920:	f7fd fc96 	bl	8001250 <HAL_GetTick>
 8003924:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	2b08      	cmp	r3, #8
 8003932:	d12e      	bne.n	8003992 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003934:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800393c:	2200      	movs	r2, #0
 800393e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f88c 	bl	8003a60 <UART_WaitOnFlagUntilTimeout>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d021      	beq.n	8003992 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003956:	e853 3f00 	ldrex	r3, [r3]
 800395a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800395c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800395e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003962:	653b      	str	r3, [r7, #80]	@ 0x50
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	461a      	mov	r2, r3
 800396a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800396c:	647b      	str	r3, [r7, #68]	@ 0x44
 800396e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003970:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003972:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003974:	e841 2300 	strex	r3, r2, [r1]
 8003978:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800397a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1e6      	bne.n	800394e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2220      	movs	r2, #32
 8003984:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e062      	b.n	8003a58 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b04      	cmp	r3, #4
 800399e:	d149      	bne.n	8003a34 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039a8:	2200      	movs	r2, #0
 80039aa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f856 	bl	8003a60 <UART_WaitOnFlagUntilTimeout>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d03c      	beq.n	8003a34 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c2:	e853 3f00 	ldrex	r3, [r3]
 80039c6:	623b      	str	r3, [r7, #32]
   return(result);
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	461a      	mov	r2, r3
 80039d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80039da:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039e0:	e841 2300 	strex	r3, r2, [r1]
 80039e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80039e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1e6      	bne.n	80039ba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	3308      	adds	r3, #8
 80039f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	e853 3f00 	ldrex	r3, [r3]
 80039fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f023 0301 	bic.w	r3, r3, #1
 8003a02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3308      	adds	r3, #8
 8003a0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a0c:	61fa      	str	r2, [r7, #28]
 8003a0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a10:	69b9      	ldr	r1, [r7, #24]
 8003a12:	69fa      	ldr	r2, [r7, #28]
 8003a14:	e841 2300 	strex	r3, r2, [r1]
 8003a18:	617b      	str	r3, [r7, #20]
   return(result);
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1e5      	bne.n	80039ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e011      	b.n	8003a58 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2220      	movs	r2, #32
 8003a38:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3758      	adds	r7, #88	@ 0x58
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a70:	e04f      	b.n	8003b12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a78:	d04b      	beq.n	8003b12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a7a:	f7fd fbe9 	bl	8001250 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d302      	bcc.n	8003a90 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e04e      	b.n	8003b32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0304 	and.w	r3, r3, #4
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d037      	beq.n	8003b12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b80      	cmp	r3, #128	@ 0x80
 8003aa6:	d034      	beq.n	8003b12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2b40      	cmp	r3, #64	@ 0x40
 8003aac:	d031      	beq.n	8003b12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	f003 0308 	and.w	r3, r3, #8
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d110      	bne.n	8003ade <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2208      	movs	r2, #8
 8003ac2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 f838 	bl	8003b3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2208      	movs	r2, #8
 8003ace:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e029      	b.n	8003b32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	69db      	ldr	r3, [r3, #28]
 8003ae4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ae8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003aec:	d111      	bne.n	8003b12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003af6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 f81e 	bl	8003b3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e00f      	b.n	8003b32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69da      	ldr	r2, [r3, #28]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	bf0c      	ite	eq
 8003b22:	2301      	moveq	r3, #1
 8003b24:	2300      	movne	r3, #0
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	461a      	mov	r2, r3
 8003b2a:	79fb      	ldrb	r3, [r7, #7]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d0a0      	beq.n	8003a72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b095      	sub	sp, #84	@ 0x54
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b4a:	e853 3f00 	ldrex	r3, [r3]
 8003b4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b60:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b62:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b68:	e841 2300 	strex	r3, r2, [r1]
 8003b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1e6      	bne.n	8003b42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	3308      	adds	r3, #8
 8003b7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	e853 3f00 	ldrex	r3, [r3]
 8003b82:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f023 0301 	bic.w	r3, r3, #1
 8003b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	3308      	adds	r3, #8
 8003b92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b9c:	e841 2300 	strex	r3, r2, [r1]
 8003ba0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1e5      	bne.n	8003b74 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d118      	bne.n	8003be2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	e853 3f00 	ldrex	r3, [r3]
 8003bbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	f023 0310 	bic.w	r3, r3, #16
 8003bc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bce:	61bb      	str	r3, [r7, #24]
 8003bd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd2:	6979      	ldr	r1, [r7, #20]
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	e841 2300 	strex	r3, r2, [r1]
 8003bda:	613b      	str	r3, [r7, #16]
   return(result);
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1e6      	bne.n	8003bb0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003bf6:	bf00      	nop
 8003bf8:	3754      	adds	r7, #84	@ 0x54
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
	...

08003c04 <srand>:
 8003c04:	b538      	push	{r3, r4, r5, lr}
 8003c06:	4b10      	ldr	r3, [pc, #64]	@ (8003c48 <srand+0x44>)
 8003c08:	681d      	ldr	r5, [r3, #0]
 8003c0a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003c0c:	4604      	mov	r4, r0
 8003c0e:	b9b3      	cbnz	r3, 8003c3e <srand+0x3a>
 8003c10:	2018      	movs	r0, #24
 8003c12:	f000 fa7b 	bl	800410c <malloc>
 8003c16:	4602      	mov	r2, r0
 8003c18:	6328      	str	r0, [r5, #48]	@ 0x30
 8003c1a:	b920      	cbnz	r0, 8003c26 <srand+0x22>
 8003c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c4c <srand+0x48>)
 8003c1e:	480c      	ldr	r0, [pc, #48]	@ (8003c50 <srand+0x4c>)
 8003c20:	2146      	movs	r1, #70	@ 0x46
 8003c22:	f000 fa0b 	bl	800403c <__assert_func>
 8003c26:	490b      	ldr	r1, [pc, #44]	@ (8003c54 <srand+0x50>)
 8003c28:	4b0b      	ldr	r3, [pc, #44]	@ (8003c58 <srand+0x54>)
 8003c2a:	e9c0 1300 	strd	r1, r3, [r0]
 8003c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c5c <srand+0x58>)
 8003c30:	6083      	str	r3, [r0, #8]
 8003c32:	230b      	movs	r3, #11
 8003c34:	8183      	strh	r3, [r0, #12]
 8003c36:	2100      	movs	r1, #0
 8003c38:	2001      	movs	r0, #1
 8003c3a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003c3e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003c40:	2200      	movs	r2, #0
 8003c42:	611c      	str	r4, [r3, #16]
 8003c44:	615a      	str	r2, [r3, #20]
 8003c46:	bd38      	pop	{r3, r4, r5, pc}
 8003c48:	20000018 	.word	0x20000018
 8003c4c:	08004d2c 	.word	0x08004d2c
 8003c50:	08004d43 	.word	0x08004d43
 8003c54:	abcd330e 	.word	0xabcd330e
 8003c58:	e66d1234 	.word	0xe66d1234
 8003c5c:	0005deec 	.word	0x0005deec

08003c60 <rand>:
 8003c60:	4b16      	ldr	r3, [pc, #88]	@ (8003cbc <rand+0x5c>)
 8003c62:	b510      	push	{r4, lr}
 8003c64:	681c      	ldr	r4, [r3, #0]
 8003c66:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003c68:	b9b3      	cbnz	r3, 8003c98 <rand+0x38>
 8003c6a:	2018      	movs	r0, #24
 8003c6c:	f000 fa4e 	bl	800410c <malloc>
 8003c70:	4602      	mov	r2, r0
 8003c72:	6320      	str	r0, [r4, #48]	@ 0x30
 8003c74:	b920      	cbnz	r0, 8003c80 <rand+0x20>
 8003c76:	4b12      	ldr	r3, [pc, #72]	@ (8003cc0 <rand+0x60>)
 8003c78:	4812      	ldr	r0, [pc, #72]	@ (8003cc4 <rand+0x64>)
 8003c7a:	2152      	movs	r1, #82	@ 0x52
 8003c7c:	f000 f9de 	bl	800403c <__assert_func>
 8003c80:	4911      	ldr	r1, [pc, #68]	@ (8003cc8 <rand+0x68>)
 8003c82:	4b12      	ldr	r3, [pc, #72]	@ (8003ccc <rand+0x6c>)
 8003c84:	e9c0 1300 	strd	r1, r3, [r0]
 8003c88:	4b11      	ldr	r3, [pc, #68]	@ (8003cd0 <rand+0x70>)
 8003c8a:	6083      	str	r3, [r0, #8]
 8003c8c:	230b      	movs	r3, #11
 8003c8e:	8183      	strh	r3, [r0, #12]
 8003c90:	2100      	movs	r1, #0
 8003c92:	2001      	movs	r0, #1
 8003c94:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003c98:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003c9a:	480e      	ldr	r0, [pc, #56]	@ (8003cd4 <rand+0x74>)
 8003c9c:	690b      	ldr	r3, [r1, #16]
 8003c9e:	694c      	ldr	r4, [r1, #20]
 8003ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8003cd8 <rand+0x78>)
 8003ca2:	4358      	muls	r0, r3
 8003ca4:	fb02 0004 	mla	r0, r2, r4, r0
 8003ca8:	fba3 3202 	umull	r3, r2, r3, r2
 8003cac:	3301      	adds	r3, #1
 8003cae:	eb40 0002 	adc.w	r0, r0, r2
 8003cb2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003cb6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003cba:	bd10      	pop	{r4, pc}
 8003cbc:	20000018 	.word	0x20000018
 8003cc0:	08004d2c 	.word	0x08004d2c
 8003cc4:	08004d43 	.word	0x08004d43
 8003cc8:	abcd330e 	.word	0xabcd330e
 8003ccc:	e66d1234 	.word	0xe66d1234
 8003cd0:	0005deec 	.word	0x0005deec
 8003cd4:	5851f42d 	.word	0x5851f42d
 8003cd8:	4c957f2d 	.word	0x4c957f2d

08003cdc <std>:
 8003cdc:	2300      	movs	r3, #0
 8003cde:	b510      	push	{r4, lr}
 8003ce0:	4604      	mov	r4, r0
 8003ce2:	e9c0 3300 	strd	r3, r3, [r0]
 8003ce6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003cea:	6083      	str	r3, [r0, #8]
 8003cec:	8181      	strh	r1, [r0, #12]
 8003cee:	6643      	str	r3, [r0, #100]	@ 0x64
 8003cf0:	81c2      	strh	r2, [r0, #14]
 8003cf2:	6183      	str	r3, [r0, #24]
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	2208      	movs	r2, #8
 8003cf8:	305c      	adds	r0, #92	@ 0x5c
 8003cfa:	f000 f8f4 	bl	8003ee6 <memset>
 8003cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8003d34 <std+0x58>)
 8003d00:	6263      	str	r3, [r4, #36]	@ 0x24
 8003d02:	4b0d      	ldr	r3, [pc, #52]	@ (8003d38 <std+0x5c>)
 8003d04:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003d06:	4b0d      	ldr	r3, [pc, #52]	@ (8003d3c <std+0x60>)
 8003d08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d40 <std+0x64>)
 8003d0c:	6323      	str	r3, [r4, #48]	@ 0x30
 8003d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d44 <std+0x68>)
 8003d10:	6224      	str	r4, [r4, #32]
 8003d12:	429c      	cmp	r4, r3
 8003d14:	d006      	beq.n	8003d24 <std+0x48>
 8003d16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003d1a:	4294      	cmp	r4, r2
 8003d1c:	d002      	beq.n	8003d24 <std+0x48>
 8003d1e:	33d0      	adds	r3, #208	@ 0xd0
 8003d20:	429c      	cmp	r4, r3
 8003d22:	d105      	bne.n	8003d30 <std+0x54>
 8003d24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d2c:	f000 b982 	b.w	8004034 <__retarget_lock_init_recursive>
 8003d30:	bd10      	pop	{r4, pc}
 8003d32:	bf00      	nop
 8003d34:	08003e61 	.word	0x08003e61
 8003d38:	08003e83 	.word	0x08003e83
 8003d3c:	08003ebb 	.word	0x08003ebb
 8003d40:	08003edf 	.word	0x08003edf
 8003d44:	200003cc 	.word	0x200003cc

08003d48 <stdio_exit_handler>:
 8003d48:	4a02      	ldr	r2, [pc, #8]	@ (8003d54 <stdio_exit_handler+0xc>)
 8003d4a:	4903      	ldr	r1, [pc, #12]	@ (8003d58 <stdio_exit_handler+0x10>)
 8003d4c:	4803      	ldr	r0, [pc, #12]	@ (8003d5c <stdio_exit_handler+0x14>)
 8003d4e:	f000 b869 	b.w	8003e24 <_fwalk_sglue>
 8003d52:	bf00      	nop
 8003d54:	2000000c 	.word	0x2000000c
 8003d58:	08004381 	.word	0x08004381
 8003d5c:	2000001c 	.word	0x2000001c

08003d60 <cleanup_stdio>:
 8003d60:	6841      	ldr	r1, [r0, #4]
 8003d62:	4b0c      	ldr	r3, [pc, #48]	@ (8003d94 <cleanup_stdio+0x34>)
 8003d64:	4299      	cmp	r1, r3
 8003d66:	b510      	push	{r4, lr}
 8003d68:	4604      	mov	r4, r0
 8003d6a:	d001      	beq.n	8003d70 <cleanup_stdio+0x10>
 8003d6c:	f000 fb08 	bl	8004380 <_fflush_r>
 8003d70:	68a1      	ldr	r1, [r4, #8]
 8003d72:	4b09      	ldr	r3, [pc, #36]	@ (8003d98 <cleanup_stdio+0x38>)
 8003d74:	4299      	cmp	r1, r3
 8003d76:	d002      	beq.n	8003d7e <cleanup_stdio+0x1e>
 8003d78:	4620      	mov	r0, r4
 8003d7a:	f000 fb01 	bl	8004380 <_fflush_r>
 8003d7e:	68e1      	ldr	r1, [r4, #12]
 8003d80:	4b06      	ldr	r3, [pc, #24]	@ (8003d9c <cleanup_stdio+0x3c>)
 8003d82:	4299      	cmp	r1, r3
 8003d84:	d004      	beq.n	8003d90 <cleanup_stdio+0x30>
 8003d86:	4620      	mov	r0, r4
 8003d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d8c:	f000 baf8 	b.w	8004380 <_fflush_r>
 8003d90:	bd10      	pop	{r4, pc}
 8003d92:	bf00      	nop
 8003d94:	200003cc 	.word	0x200003cc
 8003d98:	20000434 	.word	0x20000434
 8003d9c:	2000049c 	.word	0x2000049c

08003da0 <global_stdio_init.part.0>:
 8003da0:	b510      	push	{r4, lr}
 8003da2:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd0 <global_stdio_init.part.0+0x30>)
 8003da4:	4c0b      	ldr	r4, [pc, #44]	@ (8003dd4 <global_stdio_init.part.0+0x34>)
 8003da6:	4a0c      	ldr	r2, [pc, #48]	@ (8003dd8 <global_stdio_init.part.0+0x38>)
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	4620      	mov	r0, r4
 8003dac:	2200      	movs	r2, #0
 8003dae:	2104      	movs	r1, #4
 8003db0:	f7ff ff94 	bl	8003cdc <std>
 8003db4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003db8:	2201      	movs	r2, #1
 8003dba:	2109      	movs	r1, #9
 8003dbc:	f7ff ff8e 	bl	8003cdc <std>
 8003dc0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dca:	2112      	movs	r1, #18
 8003dcc:	f7ff bf86 	b.w	8003cdc <std>
 8003dd0:	20000504 	.word	0x20000504
 8003dd4:	200003cc 	.word	0x200003cc
 8003dd8:	08003d49 	.word	0x08003d49

08003ddc <__sfp_lock_acquire>:
 8003ddc:	4801      	ldr	r0, [pc, #4]	@ (8003de4 <__sfp_lock_acquire+0x8>)
 8003dde:	f000 b92a 	b.w	8004036 <__retarget_lock_acquire_recursive>
 8003de2:	bf00      	nop
 8003de4:	2000050d 	.word	0x2000050d

08003de8 <__sfp_lock_release>:
 8003de8:	4801      	ldr	r0, [pc, #4]	@ (8003df0 <__sfp_lock_release+0x8>)
 8003dea:	f000 b925 	b.w	8004038 <__retarget_lock_release_recursive>
 8003dee:	bf00      	nop
 8003df0:	2000050d 	.word	0x2000050d

08003df4 <__sinit>:
 8003df4:	b510      	push	{r4, lr}
 8003df6:	4604      	mov	r4, r0
 8003df8:	f7ff fff0 	bl	8003ddc <__sfp_lock_acquire>
 8003dfc:	6a23      	ldr	r3, [r4, #32]
 8003dfe:	b11b      	cbz	r3, 8003e08 <__sinit+0x14>
 8003e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e04:	f7ff bff0 	b.w	8003de8 <__sfp_lock_release>
 8003e08:	4b04      	ldr	r3, [pc, #16]	@ (8003e1c <__sinit+0x28>)
 8003e0a:	6223      	str	r3, [r4, #32]
 8003e0c:	4b04      	ldr	r3, [pc, #16]	@ (8003e20 <__sinit+0x2c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1f5      	bne.n	8003e00 <__sinit+0xc>
 8003e14:	f7ff ffc4 	bl	8003da0 <global_stdio_init.part.0>
 8003e18:	e7f2      	b.n	8003e00 <__sinit+0xc>
 8003e1a:	bf00      	nop
 8003e1c:	08003d61 	.word	0x08003d61
 8003e20:	20000504 	.word	0x20000504

08003e24 <_fwalk_sglue>:
 8003e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e28:	4607      	mov	r7, r0
 8003e2a:	4688      	mov	r8, r1
 8003e2c:	4614      	mov	r4, r2
 8003e2e:	2600      	movs	r6, #0
 8003e30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e34:	f1b9 0901 	subs.w	r9, r9, #1
 8003e38:	d505      	bpl.n	8003e46 <_fwalk_sglue+0x22>
 8003e3a:	6824      	ldr	r4, [r4, #0]
 8003e3c:	2c00      	cmp	r4, #0
 8003e3e:	d1f7      	bne.n	8003e30 <_fwalk_sglue+0xc>
 8003e40:	4630      	mov	r0, r6
 8003e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e46:	89ab      	ldrh	r3, [r5, #12]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d907      	bls.n	8003e5c <_fwalk_sglue+0x38>
 8003e4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e50:	3301      	adds	r3, #1
 8003e52:	d003      	beq.n	8003e5c <_fwalk_sglue+0x38>
 8003e54:	4629      	mov	r1, r5
 8003e56:	4638      	mov	r0, r7
 8003e58:	47c0      	blx	r8
 8003e5a:	4306      	orrs	r6, r0
 8003e5c:	3568      	adds	r5, #104	@ 0x68
 8003e5e:	e7e9      	b.n	8003e34 <_fwalk_sglue+0x10>

08003e60 <__sread>:
 8003e60:	b510      	push	{r4, lr}
 8003e62:	460c      	mov	r4, r1
 8003e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e68:	f000 f896 	bl	8003f98 <_read_r>
 8003e6c:	2800      	cmp	r0, #0
 8003e6e:	bfab      	itete	ge
 8003e70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003e72:	89a3      	ldrhlt	r3, [r4, #12]
 8003e74:	181b      	addge	r3, r3, r0
 8003e76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003e7a:	bfac      	ite	ge
 8003e7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003e7e:	81a3      	strhlt	r3, [r4, #12]
 8003e80:	bd10      	pop	{r4, pc}

08003e82 <__swrite>:
 8003e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e86:	461f      	mov	r7, r3
 8003e88:	898b      	ldrh	r3, [r1, #12]
 8003e8a:	05db      	lsls	r3, r3, #23
 8003e8c:	4605      	mov	r5, r0
 8003e8e:	460c      	mov	r4, r1
 8003e90:	4616      	mov	r6, r2
 8003e92:	d505      	bpl.n	8003ea0 <__swrite+0x1e>
 8003e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e98:	2302      	movs	r3, #2
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f000 f86a 	bl	8003f74 <_lseek_r>
 8003ea0:	89a3      	ldrh	r3, [r4, #12]
 8003ea2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ea6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003eaa:	81a3      	strh	r3, [r4, #12]
 8003eac:	4632      	mov	r2, r6
 8003eae:	463b      	mov	r3, r7
 8003eb0:	4628      	mov	r0, r5
 8003eb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003eb6:	f000 b881 	b.w	8003fbc <_write_r>

08003eba <__sseek>:
 8003eba:	b510      	push	{r4, lr}
 8003ebc:	460c      	mov	r4, r1
 8003ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ec2:	f000 f857 	bl	8003f74 <_lseek_r>
 8003ec6:	1c43      	adds	r3, r0, #1
 8003ec8:	89a3      	ldrh	r3, [r4, #12]
 8003eca:	bf15      	itete	ne
 8003ecc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003ece:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003ed2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003ed6:	81a3      	strheq	r3, [r4, #12]
 8003ed8:	bf18      	it	ne
 8003eda:	81a3      	strhne	r3, [r4, #12]
 8003edc:	bd10      	pop	{r4, pc}

08003ede <__sclose>:
 8003ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ee2:	f000 b825 	b.w	8003f30 <_close_r>

08003ee6 <memset>:
 8003ee6:	4402      	add	r2, r0
 8003ee8:	4603      	mov	r3, r0
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d100      	bne.n	8003ef0 <memset+0xa>
 8003eee:	4770      	bx	lr
 8003ef0:	f803 1b01 	strb.w	r1, [r3], #1
 8003ef4:	e7f9      	b.n	8003eea <memset+0x4>
	...

08003ef8 <time>:
 8003ef8:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8003efa:	4b0c      	ldr	r3, [pc, #48]	@ (8003f2c <time+0x34>)
 8003efc:	f04f 36ff 	mov.w	r6, #4294967295
 8003f00:	f04f 37ff 	mov.w	r7, #4294967295
 8003f04:	4669      	mov	r1, sp
 8003f06:	4604      	mov	r4, r0
 8003f08:	2200      	movs	r2, #0
 8003f0a:	6818      	ldr	r0, [r3, #0]
 8003f0c:	e9cd 6700 	strd	r6, r7, [sp]
 8003f10:	f000 f81e 	bl	8003f50 <_gettimeofday_r>
 8003f14:	2800      	cmp	r0, #0
 8003f16:	bfb8      	it	lt
 8003f18:	e9cd 6700 	strdlt	r6, r7, [sp]
 8003f1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f20:	b10c      	cbz	r4, 8003f26 <time+0x2e>
 8003f22:	e9c4 0100 	strd	r0, r1, [r4]
 8003f26:	b004      	add	sp, #16
 8003f28:	bdd0      	pop	{r4, r6, r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20000018 	.word	0x20000018

08003f30 <_close_r>:
 8003f30:	b538      	push	{r3, r4, r5, lr}
 8003f32:	4d06      	ldr	r5, [pc, #24]	@ (8003f4c <_close_r+0x1c>)
 8003f34:	2300      	movs	r3, #0
 8003f36:	4604      	mov	r4, r0
 8003f38:	4608      	mov	r0, r1
 8003f3a:	602b      	str	r3, [r5, #0]
 8003f3c:	f7fc ffdf 	bl	8000efe <_close>
 8003f40:	1c43      	adds	r3, r0, #1
 8003f42:	d102      	bne.n	8003f4a <_close_r+0x1a>
 8003f44:	682b      	ldr	r3, [r5, #0]
 8003f46:	b103      	cbz	r3, 8003f4a <_close_r+0x1a>
 8003f48:	6023      	str	r3, [r4, #0]
 8003f4a:	bd38      	pop	{r3, r4, r5, pc}
 8003f4c:	20000508 	.word	0x20000508

08003f50 <_gettimeofday_r>:
 8003f50:	b538      	push	{r3, r4, r5, lr}
 8003f52:	4d07      	ldr	r5, [pc, #28]	@ (8003f70 <_gettimeofday_r+0x20>)
 8003f54:	2300      	movs	r3, #0
 8003f56:	4604      	mov	r4, r0
 8003f58:	4608      	mov	r0, r1
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	602b      	str	r3, [r5, #0]
 8003f5e:	f000 fe8b 	bl	8004c78 <_gettimeofday>
 8003f62:	1c43      	adds	r3, r0, #1
 8003f64:	d102      	bne.n	8003f6c <_gettimeofday_r+0x1c>
 8003f66:	682b      	ldr	r3, [r5, #0]
 8003f68:	b103      	cbz	r3, 8003f6c <_gettimeofday_r+0x1c>
 8003f6a:	6023      	str	r3, [r4, #0]
 8003f6c:	bd38      	pop	{r3, r4, r5, pc}
 8003f6e:	bf00      	nop
 8003f70:	20000508 	.word	0x20000508

08003f74 <_lseek_r>:
 8003f74:	b538      	push	{r3, r4, r5, lr}
 8003f76:	4d07      	ldr	r5, [pc, #28]	@ (8003f94 <_lseek_r+0x20>)
 8003f78:	4604      	mov	r4, r0
 8003f7a:	4608      	mov	r0, r1
 8003f7c:	4611      	mov	r1, r2
 8003f7e:	2200      	movs	r2, #0
 8003f80:	602a      	str	r2, [r5, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	f7fc ffe2 	bl	8000f4c <_lseek>
 8003f88:	1c43      	adds	r3, r0, #1
 8003f8a:	d102      	bne.n	8003f92 <_lseek_r+0x1e>
 8003f8c:	682b      	ldr	r3, [r5, #0]
 8003f8e:	b103      	cbz	r3, 8003f92 <_lseek_r+0x1e>
 8003f90:	6023      	str	r3, [r4, #0]
 8003f92:	bd38      	pop	{r3, r4, r5, pc}
 8003f94:	20000508 	.word	0x20000508

08003f98 <_read_r>:
 8003f98:	b538      	push	{r3, r4, r5, lr}
 8003f9a:	4d07      	ldr	r5, [pc, #28]	@ (8003fb8 <_read_r+0x20>)
 8003f9c:	4604      	mov	r4, r0
 8003f9e:	4608      	mov	r0, r1
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	602a      	str	r2, [r5, #0]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	f7fc ff70 	bl	8000e8c <_read>
 8003fac:	1c43      	adds	r3, r0, #1
 8003fae:	d102      	bne.n	8003fb6 <_read_r+0x1e>
 8003fb0:	682b      	ldr	r3, [r5, #0]
 8003fb2:	b103      	cbz	r3, 8003fb6 <_read_r+0x1e>
 8003fb4:	6023      	str	r3, [r4, #0]
 8003fb6:	bd38      	pop	{r3, r4, r5, pc}
 8003fb8:	20000508 	.word	0x20000508

08003fbc <_write_r>:
 8003fbc:	b538      	push	{r3, r4, r5, lr}
 8003fbe:	4d07      	ldr	r5, [pc, #28]	@ (8003fdc <_write_r+0x20>)
 8003fc0:	4604      	mov	r4, r0
 8003fc2:	4608      	mov	r0, r1
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	602a      	str	r2, [r5, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f7fc ff7b 	bl	8000ec6 <_write>
 8003fd0:	1c43      	adds	r3, r0, #1
 8003fd2:	d102      	bne.n	8003fda <_write_r+0x1e>
 8003fd4:	682b      	ldr	r3, [r5, #0]
 8003fd6:	b103      	cbz	r3, 8003fda <_write_r+0x1e>
 8003fd8:	6023      	str	r3, [r4, #0]
 8003fda:	bd38      	pop	{r3, r4, r5, pc}
 8003fdc:	20000508 	.word	0x20000508

08003fe0 <__errno>:
 8003fe0:	4b01      	ldr	r3, [pc, #4]	@ (8003fe8 <__errno+0x8>)
 8003fe2:	6818      	ldr	r0, [r3, #0]
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	20000018 	.word	0x20000018

08003fec <__libc_init_array>:
 8003fec:	b570      	push	{r4, r5, r6, lr}
 8003fee:	4d0d      	ldr	r5, [pc, #52]	@ (8004024 <__libc_init_array+0x38>)
 8003ff0:	4c0d      	ldr	r4, [pc, #52]	@ (8004028 <__libc_init_array+0x3c>)
 8003ff2:	1b64      	subs	r4, r4, r5
 8003ff4:	10a4      	asrs	r4, r4, #2
 8003ff6:	2600      	movs	r6, #0
 8003ff8:	42a6      	cmp	r6, r4
 8003ffa:	d109      	bne.n	8004010 <__libc_init_array+0x24>
 8003ffc:	4d0b      	ldr	r5, [pc, #44]	@ (800402c <__libc_init_array+0x40>)
 8003ffe:	4c0c      	ldr	r4, [pc, #48]	@ (8004030 <__libc_init_array+0x44>)
 8004000:	f000 fe42 	bl	8004c88 <_init>
 8004004:	1b64      	subs	r4, r4, r5
 8004006:	10a4      	asrs	r4, r4, #2
 8004008:	2600      	movs	r6, #0
 800400a:	42a6      	cmp	r6, r4
 800400c:	d105      	bne.n	800401a <__libc_init_array+0x2e>
 800400e:	bd70      	pop	{r4, r5, r6, pc}
 8004010:	f855 3b04 	ldr.w	r3, [r5], #4
 8004014:	4798      	blx	r3
 8004016:	3601      	adds	r6, #1
 8004018:	e7ee      	b.n	8003ff8 <__libc_init_array+0xc>
 800401a:	f855 3b04 	ldr.w	r3, [r5], #4
 800401e:	4798      	blx	r3
 8004020:	3601      	adds	r6, #1
 8004022:	e7f2      	b.n	800400a <__libc_init_array+0x1e>
 8004024:	08004e14 	.word	0x08004e14
 8004028:	08004e14 	.word	0x08004e14
 800402c:	08004e14 	.word	0x08004e14
 8004030:	08004e18 	.word	0x08004e18

08004034 <__retarget_lock_init_recursive>:
 8004034:	4770      	bx	lr

08004036 <__retarget_lock_acquire_recursive>:
 8004036:	4770      	bx	lr

08004038 <__retarget_lock_release_recursive>:
 8004038:	4770      	bx	lr
	...

0800403c <__assert_func>:
 800403c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800403e:	4614      	mov	r4, r2
 8004040:	461a      	mov	r2, r3
 8004042:	4b09      	ldr	r3, [pc, #36]	@ (8004068 <__assert_func+0x2c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4605      	mov	r5, r0
 8004048:	68d8      	ldr	r0, [r3, #12]
 800404a:	b954      	cbnz	r4, 8004062 <__assert_func+0x26>
 800404c:	4b07      	ldr	r3, [pc, #28]	@ (800406c <__assert_func+0x30>)
 800404e:	461c      	mov	r4, r3
 8004050:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004054:	9100      	str	r1, [sp, #0]
 8004056:	462b      	mov	r3, r5
 8004058:	4905      	ldr	r1, [pc, #20]	@ (8004070 <__assert_func+0x34>)
 800405a:	f000 f9b9 	bl	80043d0 <fiprintf>
 800405e:	f000 f9d9 	bl	8004414 <abort>
 8004062:	4b04      	ldr	r3, [pc, #16]	@ (8004074 <__assert_func+0x38>)
 8004064:	e7f4      	b.n	8004050 <__assert_func+0x14>
 8004066:	bf00      	nop
 8004068:	20000018 	.word	0x20000018
 800406c:	08004dd6 	.word	0x08004dd6
 8004070:	08004da8 	.word	0x08004da8
 8004074:	08004d9b 	.word	0x08004d9b

08004078 <_free_r>:
 8004078:	b538      	push	{r3, r4, r5, lr}
 800407a:	4605      	mov	r5, r0
 800407c:	2900      	cmp	r1, #0
 800407e:	d041      	beq.n	8004104 <_free_r+0x8c>
 8004080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004084:	1f0c      	subs	r4, r1, #4
 8004086:	2b00      	cmp	r3, #0
 8004088:	bfb8      	it	lt
 800408a:	18e4      	addlt	r4, r4, r3
 800408c:	f000 f8e8 	bl	8004260 <__malloc_lock>
 8004090:	4a1d      	ldr	r2, [pc, #116]	@ (8004108 <_free_r+0x90>)
 8004092:	6813      	ldr	r3, [r2, #0]
 8004094:	b933      	cbnz	r3, 80040a4 <_free_r+0x2c>
 8004096:	6063      	str	r3, [r4, #4]
 8004098:	6014      	str	r4, [r2, #0]
 800409a:	4628      	mov	r0, r5
 800409c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040a0:	f000 b8e4 	b.w	800426c <__malloc_unlock>
 80040a4:	42a3      	cmp	r3, r4
 80040a6:	d908      	bls.n	80040ba <_free_r+0x42>
 80040a8:	6820      	ldr	r0, [r4, #0]
 80040aa:	1821      	adds	r1, r4, r0
 80040ac:	428b      	cmp	r3, r1
 80040ae:	bf01      	itttt	eq
 80040b0:	6819      	ldreq	r1, [r3, #0]
 80040b2:	685b      	ldreq	r3, [r3, #4]
 80040b4:	1809      	addeq	r1, r1, r0
 80040b6:	6021      	streq	r1, [r4, #0]
 80040b8:	e7ed      	b.n	8004096 <_free_r+0x1e>
 80040ba:	461a      	mov	r2, r3
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	b10b      	cbz	r3, 80040c4 <_free_r+0x4c>
 80040c0:	42a3      	cmp	r3, r4
 80040c2:	d9fa      	bls.n	80040ba <_free_r+0x42>
 80040c4:	6811      	ldr	r1, [r2, #0]
 80040c6:	1850      	adds	r0, r2, r1
 80040c8:	42a0      	cmp	r0, r4
 80040ca:	d10b      	bne.n	80040e4 <_free_r+0x6c>
 80040cc:	6820      	ldr	r0, [r4, #0]
 80040ce:	4401      	add	r1, r0
 80040d0:	1850      	adds	r0, r2, r1
 80040d2:	4283      	cmp	r3, r0
 80040d4:	6011      	str	r1, [r2, #0]
 80040d6:	d1e0      	bne.n	800409a <_free_r+0x22>
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	6053      	str	r3, [r2, #4]
 80040de:	4408      	add	r0, r1
 80040e0:	6010      	str	r0, [r2, #0]
 80040e2:	e7da      	b.n	800409a <_free_r+0x22>
 80040e4:	d902      	bls.n	80040ec <_free_r+0x74>
 80040e6:	230c      	movs	r3, #12
 80040e8:	602b      	str	r3, [r5, #0]
 80040ea:	e7d6      	b.n	800409a <_free_r+0x22>
 80040ec:	6820      	ldr	r0, [r4, #0]
 80040ee:	1821      	adds	r1, r4, r0
 80040f0:	428b      	cmp	r3, r1
 80040f2:	bf04      	itt	eq
 80040f4:	6819      	ldreq	r1, [r3, #0]
 80040f6:	685b      	ldreq	r3, [r3, #4]
 80040f8:	6063      	str	r3, [r4, #4]
 80040fa:	bf04      	itt	eq
 80040fc:	1809      	addeq	r1, r1, r0
 80040fe:	6021      	streq	r1, [r4, #0]
 8004100:	6054      	str	r4, [r2, #4]
 8004102:	e7ca      	b.n	800409a <_free_r+0x22>
 8004104:	bd38      	pop	{r3, r4, r5, pc}
 8004106:	bf00      	nop
 8004108:	20000514 	.word	0x20000514

0800410c <malloc>:
 800410c:	4b02      	ldr	r3, [pc, #8]	@ (8004118 <malloc+0xc>)
 800410e:	4601      	mov	r1, r0
 8004110:	6818      	ldr	r0, [r3, #0]
 8004112:	f000 b825 	b.w	8004160 <_malloc_r>
 8004116:	bf00      	nop
 8004118:	20000018 	.word	0x20000018

0800411c <sbrk_aligned>:
 800411c:	b570      	push	{r4, r5, r6, lr}
 800411e:	4e0f      	ldr	r6, [pc, #60]	@ (800415c <sbrk_aligned+0x40>)
 8004120:	460c      	mov	r4, r1
 8004122:	6831      	ldr	r1, [r6, #0]
 8004124:	4605      	mov	r5, r0
 8004126:	b911      	cbnz	r1, 800412e <sbrk_aligned+0x12>
 8004128:	f000 f964 	bl	80043f4 <_sbrk_r>
 800412c:	6030      	str	r0, [r6, #0]
 800412e:	4621      	mov	r1, r4
 8004130:	4628      	mov	r0, r5
 8004132:	f000 f95f 	bl	80043f4 <_sbrk_r>
 8004136:	1c43      	adds	r3, r0, #1
 8004138:	d103      	bne.n	8004142 <sbrk_aligned+0x26>
 800413a:	f04f 34ff 	mov.w	r4, #4294967295
 800413e:	4620      	mov	r0, r4
 8004140:	bd70      	pop	{r4, r5, r6, pc}
 8004142:	1cc4      	adds	r4, r0, #3
 8004144:	f024 0403 	bic.w	r4, r4, #3
 8004148:	42a0      	cmp	r0, r4
 800414a:	d0f8      	beq.n	800413e <sbrk_aligned+0x22>
 800414c:	1a21      	subs	r1, r4, r0
 800414e:	4628      	mov	r0, r5
 8004150:	f000 f950 	bl	80043f4 <_sbrk_r>
 8004154:	3001      	adds	r0, #1
 8004156:	d1f2      	bne.n	800413e <sbrk_aligned+0x22>
 8004158:	e7ef      	b.n	800413a <sbrk_aligned+0x1e>
 800415a:	bf00      	nop
 800415c:	20000510 	.word	0x20000510

08004160 <_malloc_r>:
 8004160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004164:	1ccd      	adds	r5, r1, #3
 8004166:	f025 0503 	bic.w	r5, r5, #3
 800416a:	3508      	adds	r5, #8
 800416c:	2d0c      	cmp	r5, #12
 800416e:	bf38      	it	cc
 8004170:	250c      	movcc	r5, #12
 8004172:	2d00      	cmp	r5, #0
 8004174:	4606      	mov	r6, r0
 8004176:	db01      	blt.n	800417c <_malloc_r+0x1c>
 8004178:	42a9      	cmp	r1, r5
 800417a:	d904      	bls.n	8004186 <_malloc_r+0x26>
 800417c:	230c      	movs	r3, #12
 800417e:	6033      	str	r3, [r6, #0]
 8004180:	2000      	movs	r0, #0
 8004182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004186:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800425c <_malloc_r+0xfc>
 800418a:	f000 f869 	bl	8004260 <__malloc_lock>
 800418e:	f8d8 3000 	ldr.w	r3, [r8]
 8004192:	461c      	mov	r4, r3
 8004194:	bb44      	cbnz	r4, 80041e8 <_malloc_r+0x88>
 8004196:	4629      	mov	r1, r5
 8004198:	4630      	mov	r0, r6
 800419a:	f7ff ffbf 	bl	800411c <sbrk_aligned>
 800419e:	1c43      	adds	r3, r0, #1
 80041a0:	4604      	mov	r4, r0
 80041a2:	d158      	bne.n	8004256 <_malloc_r+0xf6>
 80041a4:	f8d8 4000 	ldr.w	r4, [r8]
 80041a8:	4627      	mov	r7, r4
 80041aa:	2f00      	cmp	r7, #0
 80041ac:	d143      	bne.n	8004236 <_malloc_r+0xd6>
 80041ae:	2c00      	cmp	r4, #0
 80041b0:	d04b      	beq.n	800424a <_malloc_r+0xea>
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	4639      	mov	r1, r7
 80041b6:	4630      	mov	r0, r6
 80041b8:	eb04 0903 	add.w	r9, r4, r3
 80041bc:	f000 f91a 	bl	80043f4 <_sbrk_r>
 80041c0:	4581      	cmp	r9, r0
 80041c2:	d142      	bne.n	800424a <_malloc_r+0xea>
 80041c4:	6821      	ldr	r1, [r4, #0]
 80041c6:	1a6d      	subs	r5, r5, r1
 80041c8:	4629      	mov	r1, r5
 80041ca:	4630      	mov	r0, r6
 80041cc:	f7ff ffa6 	bl	800411c <sbrk_aligned>
 80041d0:	3001      	adds	r0, #1
 80041d2:	d03a      	beq.n	800424a <_malloc_r+0xea>
 80041d4:	6823      	ldr	r3, [r4, #0]
 80041d6:	442b      	add	r3, r5
 80041d8:	6023      	str	r3, [r4, #0]
 80041da:	f8d8 3000 	ldr.w	r3, [r8]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	bb62      	cbnz	r2, 800423c <_malloc_r+0xdc>
 80041e2:	f8c8 7000 	str.w	r7, [r8]
 80041e6:	e00f      	b.n	8004208 <_malloc_r+0xa8>
 80041e8:	6822      	ldr	r2, [r4, #0]
 80041ea:	1b52      	subs	r2, r2, r5
 80041ec:	d420      	bmi.n	8004230 <_malloc_r+0xd0>
 80041ee:	2a0b      	cmp	r2, #11
 80041f0:	d917      	bls.n	8004222 <_malloc_r+0xc2>
 80041f2:	1961      	adds	r1, r4, r5
 80041f4:	42a3      	cmp	r3, r4
 80041f6:	6025      	str	r5, [r4, #0]
 80041f8:	bf18      	it	ne
 80041fa:	6059      	strne	r1, [r3, #4]
 80041fc:	6863      	ldr	r3, [r4, #4]
 80041fe:	bf08      	it	eq
 8004200:	f8c8 1000 	streq.w	r1, [r8]
 8004204:	5162      	str	r2, [r4, r5]
 8004206:	604b      	str	r3, [r1, #4]
 8004208:	4630      	mov	r0, r6
 800420a:	f000 f82f 	bl	800426c <__malloc_unlock>
 800420e:	f104 000b 	add.w	r0, r4, #11
 8004212:	1d23      	adds	r3, r4, #4
 8004214:	f020 0007 	bic.w	r0, r0, #7
 8004218:	1ac2      	subs	r2, r0, r3
 800421a:	bf1c      	itt	ne
 800421c:	1a1b      	subne	r3, r3, r0
 800421e:	50a3      	strne	r3, [r4, r2]
 8004220:	e7af      	b.n	8004182 <_malloc_r+0x22>
 8004222:	6862      	ldr	r2, [r4, #4]
 8004224:	42a3      	cmp	r3, r4
 8004226:	bf0c      	ite	eq
 8004228:	f8c8 2000 	streq.w	r2, [r8]
 800422c:	605a      	strne	r2, [r3, #4]
 800422e:	e7eb      	b.n	8004208 <_malloc_r+0xa8>
 8004230:	4623      	mov	r3, r4
 8004232:	6864      	ldr	r4, [r4, #4]
 8004234:	e7ae      	b.n	8004194 <_malloc_r+0x34>
 8004236:	463c      	mov	r4, r7
 8004238:	687f      	ldr	r7, [r7, #4]
 800423a:	e7b6      	b.n	80041aa <_malloc_r+0x4a>
 800423c:	461a      	mov	r2, r3
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	42a3      	cmp	r3, r4
 8004242:	d1fb      	bne.n	800423c <_malloc_r+0xdc>
 8004244:	2300      	movs	r3, #0
 8004246:	6053      	str	r3, [r2, #4]
 8004248:	e7de      	b.n	8004208 <_malloc_r+0xa8>
 800424a:	230c      	movs	r3, #12
 800424c:	6033      	str	r3, [r6, #0]
 800424e:	4630      	mov	r0, r6
 8004250:	f000 f80c 	bl	800426c <__malloc_unlock>
 8004254:	e794      	b.n	8004180 <_malloc_r+0x20>
 8004256:	6005      	str	r5, [r0, #0]
 8004258:	e7d6      	b.n	8004208 <_malloc_r+0xa8>
 800425a:	bf00      	nop
 800425c:	20000514 	.word	0x20000514

08004260 <__malloc_lock>:
 8004260:	4801      	ldr	r0, [pc, #4]	@ (8004268 <__malloc_lock+0x8>)
 8004262:	f7ff bee8 	b.w	8004036 <__retarget_lock_acquire_recursive>
 8004266:	bf00      	nop
 8004268:	2000050c 	.word	0x2000050c

0800426c <__malloc_unlock>:
 800426c:	4801      	ldr	r0, [pc, #4]	@ (8004274 <__malloc_unlock+0x8>)
 800426e:	f7ff bee3 	b.w	8004038 <__retarget_lock_release_recursive>
 8004272:	bf00      	nop
 8004274:	2000050c 	.word	0x2000050c

08004278 <__sflush_r>:
 8004278:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800427c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004280:	0716      	lsls	r6, r2, #28
 8004282:	4605      	mov	r5, r0
 8004284:	460c      	mov	r4, r1
 8004286:	d454      	bmi.n	8004332 <__sflush_r+0xba>
 8004288:	684b      	ldr	r3, [r1, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	dc02      	bgt.n	8004294 <__sflush_r+0x1c>
 800428e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004290:	2b00      	cmp	r3, #0
 8004292:	dd48      	ble.n	8004326 <__sflush_r+0xae>
 8004294:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004296:	2e00      	cmp	r6, #0
 8004298:	d045      	beq.n	8004326 <__sflush_r+0xae>
 800429a:	2300      	movs	r3, #0
 800429c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80042a0:	682f      	ldr	r7, [r5, #0]
 80042a2:	6a21      	ldr	r1, [r4, #32]
 80042a4:	602b      	str	r3, [r5, #0]
 80042a6:	d030      	beq.n	800430a <__sflush_r+0x92>
 80042a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80042aa:	89a3      	ldrh	r3, [r4, #12]
 80042ac:	0759      	lsls	r1, r3, #29
 80042ae:	d505      	bpl.n	80042bc <__sflush_r+0x44>
 80042b0:	6863      	ldr	r3, [r4, #4]
 80042b2:	1ad2      	subs	r2, r2, r3
 80042b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80042b6:	b10b      	cbz	r3, 80042bc <__sflush_r+0x44>
 80042b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80042ba:	1ad2      	subs	r2, r2, r3
 80042bc:	2300      	movs	r3, #0
 80042be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80042c0:	6a21      	ldr	r1, [r4, #32]
 80042c2:	4628      	mov	r0, r5
 80042c4:	47b0      	blx	r6
 80042c6:	1c43      	adds	r3, r0, #1
 80042c8:	89a3      	ldrh	r3, [r4, #12]
 80042ca:	d106      	bne.n	80042da <__sflush_r+0x62>
 80042cc:	6829      	ldr	r1, [r5, #0]
 80042ce:	291d      	cmp	r1, #29
 80042d0:	d82b      	bhi.n	800432a <__sflush_r+0xb2>
 80042d2:	4a2a      	ldr	r2, [pc, #168]	@ (800437c <__sflush_r+0x104>)
 80042d4:	410a      	asrs	r2, r1
 80042d6:	07d6      	lsls	r6, r2, #31
 80042d8:	d427      	bmi.n	800432a <__sflush_r+0xb2>
 80042da:	2200      	movs	r2, #0
 80042dc:	6062      	str	r2, [r4, #4]
 80042de:	04d9      	lsls	r1, r3, #19
 80042e0:	6922      	ldr	r2, [r4, #16]
 80042e2:	6022      	str	r2, [r4, #0]
 80042e4:	d504      	bpl.n	80042f0 <__sflush_r+0x78>
 80042e6:	1c42      	adds	r2, r0, #1
 80042e8:	d101      	bne.n	80042ee <__sflush_r+0x76>
 80042ea:	682b      	ldr	r3, [r5, #0]
 80042ec:	b903      	cbnz	r3, 80042f0 <__sflush_r+0x78>
 80042ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80042f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80042f2:	602f      	str	r7, [r5, #0]
 80042f4:	b1b9      	cbz	r1, 8004326 <__sflush_r+0xae>
 80042f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80042fa:	4299      	cmp	r1, r3
 80042fc:	d002      	beq.n	8004304 <__sflush_r+0x8c>
 80042fe:	4628      	mov	r0, r5
 8004300:	f7ff feba 	bl	8004078 <_free_r>
 8004304:	2300      	movs	r3, #0
 8004306:	6363      	str	r3, [r4, #52]	@ 0x34
 8004308:	e00d      	b.n	8004326 <__sflush_r+0xae>
 800430a:	2301      	movs	r3, #1
 800430c:	4628      	mov	r0, r5
 800430e:	47b0      	blx	r6
 8004310:	4602      	mov	r2, r0
 8004312:	1c50      	adds	r0, r2, #1
 8004314:	d1c9      	bne.n	80042aa <__sflush_r+0x32>
 8004316:	682b      	ldr	r3, [r5, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0c6      	beq.n	80042aa <__sflush_r+0x32>
 800431c:	2b1d      	cmp	r3, #29
 800431e:	d001      	beq.n	8004324 <__sflush_r+0xac>
 8004320:	2b16      	cmp	r3, #22
 8004322:	d11e      	bne.n	8004362 <__sflush_r+0xea>
 8004324:	602f      	str	r7, [r5, #0]
 8004326:	2000      	movs	r0, #0
 8004328:	e022      	b.n	8004370 <__sflush_r+0xf8>
 800432a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800432e:	b21b      	sxth	r3, r3
 8004330:	e01b      	b.n	800436a <__sflush_r+0xf2>
 8004332:	690f      	ldr	r7, [r1, #16]
 8004334:	2f00      	cmp	r7, #0
 8004336:	d0f6      	beq.n	8004326 <__sflush_r+0xae>
 8004338:	0793      	lsls	r3, r2, #30
 800433a:	680e      	ldr	r6, [r1, #0]
 800433c:	bf08      	it	eq
 800433e:	694b      	ldreq	r3, [r1, #20]
 8004340:	600f      	str	r7, [r1, #0]
 8004342:	bf18      	it	ne
 8004344:	2300      	movne	r3, #0
 8004346:	eba6 0807 	sub.w	r8, r6, r7
 800434a:	608b      	str	r3, [r1, #8]
 800434c:	f1b8 0f00 	cmp.w	r8, #0
 8004350:	dde9      	ble.n	8004326 <__sflush_r+0xae>
 8004352:	6a21      	ldr	r1, [r4, #32]
 8004354:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004356:	4643      	mov	r3, r8
 8004358:	463a      	mov	r2, r7
 800435a:	4628      	mov	r0, r5
 800435c:	47b0      	blx	r6
 800435e:	2800      	cmp	r0, #0
 8004360:	dc08      	bgt.n	8004374 <__sflush_r+0xfc>
 8004362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004366:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800436a:	81a3      	strh	r3, [r4, #12]
 800436c:	f04f 30ff 	mov.w	r0, #4294967295
 8004370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004374:	4407      	add	r7, r0
 8004376:	eba8 0800 	sub.w	r8, r8, r0
 800437a:	e7e7      	b.n	800434c <__sflush_r+0xd4>
 800437c:	dfbffffe 	.word	0xdfbffffe

08004380 <_fflush_r>:
 8004380:	b538      	push	{r3, r4, r5, lr}
 8004382:	690b      	ldr	r3, [r1, #16]
 8004384:	4605      	mov	r5, r0
 8004386:	460c      	mov	r4, r1
 8004388:	b913      	cbnz	r3, 8004390 <_fflush_r+0x10>
 800438a:	2500      	movs	r5, #0
 800438c:	4628      	mov	r0, r5
 800438e:	bd38      	pop	{r3, r4, r5, pc}
 8004390:	b118      	cbz	r0, 800439a <_fflush_r+0x1a>
 8004392:	6a03      	ldr	r3, [r0, #32]
 8004394:	b90b      	cbnz	r3, 800439a <_fflush_r+0x1a>
 8004396:	f7ff fd2d 	bl	8003df4 <__sinit>
 800439a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0f3      	beq.n	800438a <_fflush_r+0xa>
 80043a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80043a4:	07d0      	lsls	r0, r2, #31
 80043a6:	d404      	bmi.n	80043b2 <_fflush_r+0x32>
 80043a8:	0599      	lsls	r1, r3, #22
 80043aa:	d402      	bmi.n	80043b2 <_fflush_r+0x32>
 80043ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043ae:	f7ff fe42 	bl	8004036 <__retarget_lock_acquire_recursive>
 80043b2:	4628      	mov	r0, r5
 80043b4:	4621      	mov	r1, r4
 80043b6:	f7ff ff5f 	bl	8004278 <__sflush_r>
 80043ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80043bc:	07da      	lsls	r2, r3, #31
 80043be:	4605      	mov	r5, r0
 80043c0:	d4e4      	bmi.n	800438c <_fflush_r+0xc>
 80043c2:	89a3      	ldrh	r3, [r4, #12]
 80043c4:	059b      	lsls	r3, r3, #22
 80043c6:	d4e1      	bmi.n	800438c <_fflush_r+0xc>
 80043c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043ca:	f7ff fe35 	bl	8004038 <__retarget_lock_release_recursive>
 80043ce:	e7dd      	b.n	800438c <_fflush_r+0xc>

080043d0 <fiprintf>:
 80043d0:	b40e      	push	{r1, r2, r3}
 80043d2:	b503      	push	{r0, r1, lr}
 80043d4:	4601      	mov	r1, r0
 80043d6:	ab03      	add	r3, sp, #12
 80043d8:	4805      	ldr	r0, [pc, #20]	@ (80043f0 <fiprintf+0x20>)
 80043da:	f853 2b04 	ldr.w	r2, [r3], #4
 80043de:	6800      	ldr	r0, [r0, #0]
 80043e0:	9301      	str	r3, [sp, #4]
 80043e2:	f000 f847 	bl	8004474 <_vfiprintf_r>
 80043e6:	b002      	add	sp, #8
 80043e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80043ec:	b003      	add	sp, #12
 80043ee:	4770      	bx	lr
 80043f0:	20000018 	.word	0x20000018

080043f4 <_sbrk_r>:
 80043f4:	b538      	push	{r3, r4, r5, lr}
 80043f6:	4d06      	ldr	r5, [pc, #24]	@ (8004410 <_sbrk_r+0x1c>)
 80043f8:	2300      	movs	r3, #0
 80043fa:	4604      	mov	r4, r0
 80043fc:	4608      	mov	r0, r1
 80043fe:	602b      	str	r3, [r5, #0]
 8004400:	f7fc fdb2 	bl	8000f68 <_sbrk>
 8004404:	1c43      	adds	r3, r0, #1
 8004406:	d102      	bne.n	800440e <_sbrk_r+0x1a>
 8004408:	682b      	ldr	r3, [r5, #0]
 800440a:	b103      	cbz	r3, 800440e <_sbrk_r+0x1a>
 800440c:	6023      	str	r3, [r4, #0]
 800440e:	bd38      	pop	{r3, r4, r5, pc}
 8004410:	20000508 	.word	0x20000508

08004414 <abort>:
 8004414:	b508      	push	{r3, lr}
 8004416:	2006      	movs	r0, #6
 8004418:	f000 fb8e 	bl	8004b38 <raise>
 800441c:	2001      	movs	r0, #1
 800441e:	f7fc fd2a 	bl	8000e76 <_exit>

08004422 <__sfputc_r>:
 8004422:	6893      	ldr	r3, [r2, #8]
 8004424:	3b01      	subs	r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	b410      	push	{r4}
 800442a:	6093      	str	r3, [r2, #8]
 800442c:	da08      	bge.n	8004440 <__sfputc_r+0x1e>
 800442e:	6994      	ldr	r4, [r2, #24]
 8004430:	42a3      	cmp	r3, r4
 8004432:	db01      	blt.n	8004438 <__sfputc_r+0x16>
 8004434:	290a      	cmp	r1, #10
 8004436:	d103      	bne.n	8004440 <__sfputc_r+0x1e>
 8004438:	f85d 4b04 	ldr.w	r4, [sp], #4
 800443c:	f000 bac0 	b.w	80049c0 <__swbuf_r>
 8004440:	6813      	ldr	r3, [r2, #0]
 8004442:	1c58      	adds	r0, r3, #1
 8004444:	6010      	str	r0, [r2, #0]
 8004446:	7019      	strb	r1, [r3, #0]
 8004448:	4608      	mov	r0, r1
 800444a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800444e:	4770      	bx	lr

08004450 <__sfputs_r>:
 8004450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004452:	4606      	mov	r6, r0
 8004454:	460f      	mov	r7, r1
 8004456:	4614      	mov	r4, r2
 8004458:	18d5      	adds	r5, r2, r3
 800445a:	42ac      	cmp	r4, r5
 800445c:	d101      	bne.n	8004462 <__sfputs_r+0x12>
 800445e:	2000      	movs	r0, #0
 8004460:	e007      	b.n	8004472 <__sfputs_r+0x22>
 8004462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004466:	463a      	mov	r2, r7
 8004468:	4630      	mov	r0, r6
 800446a:	f7ff ffda 	bl	8004422 <__sfputc_r>
 800446e:	1c43      	adds	r3, r0, #1
 8004470:	d1f3      	bne.n	800445a <__sfputs_r+0xa>
 8004472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004474 <_vfiprintf_r>:
 8004474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004478:	460d      	mov	r5, r1
 800447a:	b09d      	sub	sp, #116	@ 0x74
 800447c:	4614      	mov	r4, r2
 800447e:	4698      	mov	r8, r3
 8004480:	4606      	mov	r6, r0
 8004482:	b118      	cbz	r0, 800448c <_vfiprintf_r+0x18>
 8004484:	6a03      	ldr	r3, [r0, #32]
 8004486:	b90b      	cbnz	r3, 800448c <_vfiprintf_r+0x18>
 8004488:	f7ff fcb4 	bl	8003df4 <__sinit>
 800448c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800448e:	07d9      	lsls	r1, r3, #31
 8004490:	d405      	bmi.n	800449e <_vfiprintf_r+0x2a>
 8004492:	89ab      	ldrh	r3, [r5, #12]
 8004494:	059a      	lsls	r2, r3, #22
 8004496:	d402      	bmi.n	800449e <_vfiprintf_r+0x2a>
 8004498:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800449a:	f7ff fdcc 	bl	8004036 <__retarget_lock_acquire_recursive>
 800449e:	89ab      	ldrh	r3, [r5, #12]
 80044a0:	071b      	lsls	r3, r3, #28
 80044a2:	d501      	bpl.n	80044a8 <_vfiprintf_r+0x34>
 80044a4:	692b      	ldr	r3, [r5, #16]
 80044a6:	b99b      	cbnz	r3, 80044d0 <_vfiprintf_r+0x5c>
 80044a8:	4629      	mov	r1, r5
 80044aa:	4630      	mov	r0, r6
 80044ac:	f000 fac6 	bl	8004a3c <__swsetup_r>
 80044b0:	b170      	cbz	r0, 80044d0 <_vfiprintf_r+0x5c>
 80044b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044b4:	07dc      	lsls	r4, r3, #31
 80044b6:	d504      	bpl.n	80044c2 <_vfiprintf_r+0x4e>
 80044b8:	f04f 30ff 	mov.w	r0, #4294967295
 80044bc:	b01d      	add	sp, #116	@ 0x74
 80044be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044c2:	89ab      	ldrh	r3, [r5, #12]
 80044c4:	0598      	lsls	r0, r3, #22
 80044c6:	d4f7      	bmi.n	80044b8 <_vfiprintf_r+0x44>
 80044c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044ca:	f7ff fdb5 	bl	8004038 <__retarget_lock_release_recursive>
 80044ce:	e7f3      	b.n	80044b8 <_vfiprintf_r+0x44>
 80044d0:	2300      	movs	r3, #0
 80044d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80044d4:	2320      	movs	r3, #32
 80044d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80044da:	f8cd 800c 	str.w	r8, [sp, #12]
 80044de:	2330      	movs	r3, #48	@ 0x30
 80044e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004690 <_vfiprintf_r+0x21c>
 80044e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80044e8:	f04f 0901 	mov.w	r9, #1
 80044ec:	4623      	mov	r3, r4
 80044ee:	469a      	mov	sl, r3
 80044f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044f4:	b10a      	cbz	r2, 80044fa <_vfiprintf_r+0x86>
 80044f6:	2a25      	cmp	r2, #37	@ 0x25
 80044f8:	d1f9      	bne.n	80044ee <_vfiprintf_r+0x7a>
 80044fa:	ebba 0b04 	subs.w	fp, sl, r4
 80044fe:	d00b      	beq.n	8004518 <_vfiprintf_r+0xa4>
 8004500:	465b      	mov	r3, fp
 8004502:	4622      	mov	r2, r4
 8004504:	4629      	mov	r1, r5
 8004506:	4630      	mov	r0, r6
 8004508:	f7ff ffa2 	bl	8004450 <__sfputs_r>
 800450c:	3001      	adds	r0, #1
 800450e:	f000 80a7 	beq.w	8004660 <_vfiprintf_r+0x1ec>
 8004512:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004514:	445a      	add	r2, fp
 8004516:	9209      	str	r2, [sp, #36]	@ 0x24
 8004518:	f89a 3000 	ldrb.w	r3, [sl]
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 809f 	beq.w	8004660 <_vfiprintf_r+0x1ec>
 8004522:	2300      	movs	r3, #0
 8004524:	f04f 32ff 	mov.w	r2, #4294967295
 8004528:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800452c:	f10a 0a01 	add.w	sl, sl, #1
 8004530:	9304      	str	r3, [sp, #16]
 8004532:	9307      	str	r3, [sp, #28]
 8004534:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004538:	931a      	str	r3, [sp, #104]	@ 0x68
 800453a:	4654      	mov	r4, sl
 800453c:	2205      	movs	r2, #5
 800453e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004542:	4853      	ldr	r0, [pc, #332]	@ (8004690 <_vfiprintf_r+0x21c>)
 8004544:	f7fb fe4c 	bl	80001e0 <memchr>
 8004548:	9a04      	ldr	r2, [sp, #16]
 800454a:	b9d8      	cbnz	r0, 8004584 <_vfiprintf_r+0x110>
 800454c:	06d1      	lsls	r1, r2, #27
 800454e:	bf44      	itt	mi
 8004550:	2320      	movmi	r3, #32
 8004552:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004556:	0713      	lsls	r3, r2, #28
 8004558:	bf44      	itt	mi
 800455a:	232b      	movmi	r3, #43	@ 0x2b
 800455c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004560:	f89a 3000 	ldrb.w	r3, [sl]
 8004564:	2b2a      	cmp	r3, #42	@ 0x2a
 8004566:	d015      	beq.n	8004594 <_vfiprintf_r+0x120>
 8004568:	9a07      	ldr	r2, [sp, #28]
 800456a:	4654      	mov	r4, sl
 800456c:	2000      	movs	r0, #0
 800456e:	f04f 0c0a 	mov.w	ip, #10
 8004572:	4621      	mov	r1, r4
 8004574:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004578:	3b30      	subs	r3, #48	@ 0x30
 800457a:	2b09      	cmp	r3, #9
 800457c:	d94b      	bls.n	8004616 <_vfiprintf_r+0x1a2>
 800457e:	b1b0      	cbz	r0, 80045ae <_vfiprintf_r+0x13a>
 8004580:	9207      	str	r2, [sp, #28]
 8004582:	e014      	b.n	80045ae <_vfiprintf_r+0x13a>
 8004584:	eba0 0308 	sub.w	r3, r0, r8
 8004588:	fa09 f303 	lsl.w	r3, r9, r3
 800458c:	4313      	orrs	r3, r2
 800458e:	9304      	str	r3, [sp, #16]
 8004590:	46a2      	mov	sl, r4
 8004592:	e7d2      	b.n	800453a <_vfiprintf_r+0xc6>
 8004594:	9b03      	ldr	r3, [sp, #12]
 8004596:	1d19      	adds	r1, r3, #4
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	9103      	str	r1, [sp, #12]
 800459c:	2b00      	cmp	r3, #0
 800459e:	bfbb      	ittet	lt
 80045a0:	425b      	neglt	r3, r3
 80045a2:	f042 0202 	orrlt.w	r2, r2, #2
 80045a6:	9307      	strge	r3, [sp, #28]
 80045a8:	9307      	strlt	r3, [sp, #28]
 80045aa:	bfb8      	it	lt
 80045ac:	9204      	strlt	r2, [sp, #16]
 80045ae:	7823      	ldrb	r3, [r4, #0]
 80045b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80045b2:	d10a      	bne.n	80045ca <_vfiprintf_r+0x156>
 80045b4:	7863      	ldrb	r3, [r4, #1]
 80045b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80045b8:	d132      	bne.n	8004620 <_vfiprintf_r+0x1ac>
 80045ba:	9b03      	ldr	r3, [sp, #12]
 80045bc:	1d1a      	adds	r2, r3, #4
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	9203      	str	r2, [sp, #12]
 80045c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80045c6:	3402      	adds	r4, #2
 80045c8:	9305      	str	r3, [sp, #20]
 80045ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80046a0 <_vfiprintf_r+0x22c>
 80045ce:	7821      	ldrb	r1, [r4, #0]
 80045d0:	2203      	movs	r2, #3
 80045d2:	4650      	mov	r0, sl
 80045d4:	f7fb fe04 	bl	80001e0 <memchr>
 80045d8:	b138      	cbz	r0, 80045ea <_vfiprintf_r+0x176>
 80045da:	9b04      	ldr	r3, [sp, #16]
 80045dc:	eba0 000a 	sub.w	r0, r0, sl
 80045e0:	2240      	movs	r2, #64	@ 0x40
 80045e2:	4082      	lsls	r2, r0
 80045e4:	4313      	orrs	r3, r2
 80045e6:	3401      	adds	r4, #1
 80045e8:	9304      	str	r3, [sp, #16]
 80045ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045ee:	4829      	ldr	r0, [pc, #164]	@ (8004694 <_vfiprintf_r+0x220>)
 80045f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80045f4:	2206      	movs	r2, #6
 80045f6:	f7fb fdf3 	bl	80001e0 <memchr>
 80045fa:	2800      	cmp	r0, #0
 80045fc:	d03f      	beq.n	800467e <_vfiprintf_r+0x20a>
 80045fe:	4b26      	ldr	r3, [pc, #152]	@ (8004698 <_vfiprintf_r+0x224>)
 8004600:	bb1b      	cbnz	r3, 800464a <_vfiprintf_r+0x1d6>
 8004602:	9b03      	ldr	r3, [sp, #12]
 8004604:	3307      	adds	r3, #7
 8004606:	f023 0307 	bic.w	r3, r3, #7
 800460a:	3308      	adds	r3, #8
 800460c:	9303      	str	r3, [sp, #12]
 800460e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004610:	443b      	add	r3, r7
 8004612:	9309      	str	r3, [sp, #36]	@ 0x24
 8004614:	e76a      	b.n	80044ec <_vfiprintf_r+0x78>
 8004616:	fb0c 3202 	mla	r2, ip, r2, r3
 800461a:	460c      	mov	r4, r1
 800461c:	2001      	movs	r0, #1
 800461e:	e7a8      	b.n	8004572 <_vfiprintf_r+0xfe>
 8004620:	2300      	movs	r3, #0
 8004622:	3401      	adds	r4, #1
 8004624:	9305      	str	r3, [sp, #20]
 8004626:	4619      	mov	r1, r3
 8004628:	f04f 0c0a 	mov.w	ip, #10
 800462c:	4620      	mov	r0, r4
 800462e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004632:	3a30      	subs	r2, #48	@ 0x30
 8004634:	2a09      	cmp	r2, #9
 8004636:	d903      	bls.n	8004640 <_vfiprintf_r+0x1cc>
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0c6      	beq.n	80045ca <_vfiprintf_r+0x156>
 800463c:	9105      	str	r1, [sp, #20]
 800463e:	e7c4      	b.n	80045ca <_vfiprintf_r+0x156>
 8004640:	fb0c 2101 	mla	r1, ip, r1, r2
 8004644:	4604      	mov	r4, r0
 8004646:	2301      	movs	r3, #1
 8004648:	e7f0      	b.n	800462c <_vfiprintf_r+0x1b8>
 800464a:	ab03      	add	r3, sp, #12
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	462a      	mov	r2, r5
 8004650:	4b12      	ldr	r3, [pc, #72]	@ (800469c <_vfiprintf_r+0x228>)
 8004652:	a904      	add	r1, sp, #16
 8004654:	4630      	mov	r0, r6
 8004656:	f3af 8000 	nop.w
 800465a:	4607      	mov	r7, r0
 800465c:	1c78      	adds	r0, r7, #1
 800465e:	d1d6      	bne.n	800460e <_vfiprintf_r+0x19a>
 8004660:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004662:	07d9      	lsls	r1, r3, #31
 8004664:	d405      	bmi.n	8004672 <_vfiprintf_r+0x1fe>
 8004666:	89ab      	ldrh	r3, [r5, #12]
 8004668:	059a      	lsls	r2, r3, #22
 800466a:	d402      	bmi.n	8004672 <_vfiprintf_r+0x1fe>
 800466c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800466e:	f7ff fce3 	bl	8004038 <__retarget_lock_release_recursive>
 8004672:	89ab      	ldrh	r3, [r5, #12]
 8004674:	065b      	lsls	r3, r3, #25
 8004676:	f53f af1f 	bmi.w	80044b8 <_vfiprintf_r+0x44>
 800467a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800467c:	e71e      	b.n	80044bc <_vfiprintf_r+0x48>
 800467e:	ab03      	add	r3, sp, #12
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	462a      	mov	r2, r5
 8004684:	4b05      	ldr	r3, [pc, #20]	@ (800469c <_vfiprintf_r+0x228>)
 8004686:	a904      	add	r1, sp, #16
 8004688:	4630      	mov	r0, r6
 800468a:	f000 f879 	bl	8004780 <_printf_i>
 800468e:	e7e4      	b.n	800465a <_vfiprintf_r+0x1e6>
 8004690:	08004dd7 	.word	0x08004dd7
 8004694:	08004de1 	.word	0x08004de1
 8004698:	00000000 	.word	0x00000000
 800469c:	08004451 	.word	0x08004451
 80046a0:	08004ddd 	.word	0x08004ddd

080046a4 <_printf_common>:
 80046a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046a8:	4616      	mov	r6, r2
 80046aa:	4698      	mov	r8, r3
 80046ac:	688a      	ldr	r2, [r1, #8]
 80046ae:	690b      	ldr	r3, [r1, #16]
 80046b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046b4:	4293      	cmp	r3, r2
 80046b6:	bfb8      	it	lt
 80046b8:	4613      	movlt	r3, r2
 80046ba:	6033      	str	r3, [r6, #0]
 80046bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046c0:	4607      	mov	r7, r0
 80046c2:	460c      	mov	r4, r1
 80046c4:	b10a      	cbz	r2, 80046ca <_printf_common+0x26>
 80046c6:	3301      	adds	r3, #1
 80046c8:	6033      	str	r3, [r6, #0]
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	0699      	lsls	r1, r3, #26
 80046ce:	bf42      	ittt	mi
 80046d0:	6833      	ldrmi	r3, [r6, #0]
 80046d2:	3302      	addmi	r3, #2
 80046d4:	6033      	strmi	r3, [r6, #0]
 80046d6:	6825      	ldr	r5, [r4, #0]
 80046d8:	f015 0506 	ands.w	r5, r5, #6
 80046dc:	d106      	bne.n	80046ec <_printf_common+0x48>
 80046de:	f104 0a19 	add.w	sl, r4, #25
 80046e2:	68e3      	ldr	r3, [r4, #12]
 80046e4:	6832      	ldr	r2, [r6, #0]
 80046e6:	1a9b      	subs	r3, r3, r2
 80046e8:	42ab      	cmp	r3, r5
 80046ea:	dc26      	bgt.n	800473a <_printf_common+0x96>
 80046ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80046f0:	6822      	ldr	r2, [r4, #0]
 80046f2:	3b00      	subs	r3, #0
 80046f4:	bf18      	it	ne
 80046f6:	2301      	movne	r3, #1
 80046f8:	0692      	lsls	r2, r2, #26
 80046fa:	d42b      	bmi.n	8004754 <_printf_common+0xb0>
 80046fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004700:	4641      	mov	r1, r8
 8004702:	4638      	mov	r0, r7
 8004704:	47c8      	blx	r9
 8004706:	3001      	adds	r0, #1
 8004708:	d01e      	beq.n	8004748 <_printf_common+0xa4>
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	6922      	ldr	r2, [r4, #16]
 800470e:	f003 0306 	and.w	r3, r3, #6
 8004712:	2b04      	cmp	r3, #4
 8004714:	bf02      	ittt	eq
 8004716:	68e5      	ldreq	r5, [r4, #12]
 8004718:	6833      	ldreq	r3, [r6, #0]
 800471a:	1aed      	subeq	r5, r5, r3
 800471c:	68a3      	ldr	r3, [r4, #8]
 800471e:	bf0c      	ite	eq
 8004720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004724:	2500      	movne	r5, #0
 8004726:	4293      	cmp	r3, r2
 8004728:	bfc4      	itt	gt
 800472a:	1a9b      	subgt	r3, r3, r2
 800472c:	18ed      	addgt	r5, r5, r3
 800472e:	2600      	movs	r6, #0
 8004730:	341a      	adds	r4, #26
 8004732:	42b5      	cmp	r5, r6
 8004734:	d11a      	bne.n	800476c <_printf_common+0xc8>
 8004736:	2000      	movs	r0, #0
 8004738:	e008      	b.n	800474c <_printf_common+0xa8>
 800473a:	2301      	movs	r3, #1
 800473c:	4652      	mov	r2, sl
 800473e:	4641      	mov	r1, r8
 8004740:	4638      	mov	r0, r7
 8004742:	47c8      	blx	r9
 8004744:	3001      	adds	r0, #1
 8004746:	d103      	bne.n	8004750 <_printf_common+0xac>
 8004748:	f04f 30ff 	mov.w	r0, #4294967295
 800474c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004750:	3501      	adds	r5, #1
 8004752:	e7c6      	b.n	80046e2 <_printf_common+0x3e>
 8004754:	18e1      	adds	r1, r4, r3
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	2030      	movs	r0, #48	@ 0x30
 800475a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800475e:	4422      	add	r2, r4
 8004760:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004764:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004768:	3302      	adds	r3, #2
 800476a:	e7c7      	b.n	80046fc <_printf_common+0x58>
 800476c:	2301      	movs	r3, #1
 800476e:	4622      	mov	r2, r4
 8004770:	4641      	mov	r1, r8
 8004772:	4638      	mov	r0, r7
 8004774:	47c8      	blx	r9
 8004776:	3001      	adds	r0, #1
 8004778:	d0e6      	beq.n	8004748 <_printf_common+0xa4>
 800477a:	3601      	adds	r6, #1
 800477c:	e7d9      	b.n	8004732 <_printf_common+0x8e>
	...

08004780 <_printf_i>:
 8004780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004784:	7e0f      	ldrb	r7, [r1, #24]
 8004786:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004788:	2f78      	cmp	r7, #120	@ 0x78
 800478a:	4691      	mov	r9, r2
 800478c:	4680      	mov	r8, r0
 800478e:	460c      	mov	r4, r1
 8004790:	469a      	mov	sl, r3
 8004792:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004796:	d807      	bhi.n	80047a8 <_printf_i+0x28>
 8004798:	2f62      	cmp	r7, #98	@ 0x62
 800479a:	d80a      	bhi.n	80047b2 <_printf_i+0x32>
 800479c:	2f00      	cmp	r7, #0
 800479e:	f000 80d2 	beq.w	8004946 <_printf_i+0x1c6>
 80047a2:	2f58      	cmp	r7, #88	@ 0x58
 80047a4:	f000 80b9 	beq.w	800491a <_printf_i+0x19a>
 80047a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80047b0:	e03a      	b.n	8004828 <_printf_i+0xa8>
 80047b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80047b6:	2b15      	cmp	r3, #21
 80047b8:	d8f6      	bhi.n	80047a8 <_printf_i+0x28>
 80047ba:	a101      	add	r1, pc, #4	@ (adr r1, 80047c0 <_printf_i+0x40>)
 80047bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047c0:	08004819 	.word	0x08004819
 80047c4:	0800482d 	.word	0x0800482d
 80047c8:	080047a9 	.word	0x080047a9
 80047cc:	080047a9 	.word	0x080047a9
 80047d0:	080047a9 	.word	0x080047a9
 80047d4:	080047a9 	.word	0x080047a9
 80047d8:	0800482d 	.word	0x0800482d
 80047dc:	080047a9 	.word	0x080047a9
 80047e0:	080047a9 	.word	0x080047a9
 80047e4:	080047a9 	.word	0x080047a9
 80047e8:	080047a9 	.word	0x080047a9
 80047ec:	0800492d 	.word	0x0800492d
 80047f0:	08004857 	.word	0x08004857
 80047f4:	080048e7 	.word	0x080048e7
 80047f8:	080047a9 	.word	0x080047a9
 80047fc:	080047a9 	.word	0x080047a9
 8004800:	0800494f 	.word	0x0800494f
 8004804:	080047a9 	.word	0x080047a9
 8004808:	08004857 	.word	0x08004857
 800480c:	080047a9 	.word	0x080047a9
 8004810:	080047a9 	.word	0x080047a9
 8004814:	080048ef 	.word	0x080048ef
 8004818:	6833      	ldr	r3, [r6, #0]
 800481a:	1d1a      	adds	r2, r3, #4
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6032      	str	r2, [r6, #0]
 8004820:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004824:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004828:	2301      	movs	r3, #1
 800482a:	e09d      	b.n	8004968 <_printf_i+0x1e8>
 800482c:	6833      	ldr	r3, [r6, #0]
 800482e:	6820      	ldr	r0, [r4, #0]
 8004830:	1d19      	adds	r1, r3, #4
 8004832:	6031      	str	r1, [r6, #0]
 8004834:	0606      	lsls	r6, r0, #24
 8004836:	d501      	bpl.n	800483c <_printf_i+0xbc>
 8004838:	681d      	ldr	r5, [r3, #0]
 800483a:	e003      	b.n	8004844 <_printf_i+0xc4>
 800483c:	0645      	lsls	r5, r0, #25
 800483e:	d5fb      	bpl.n	8004838 <_printf_i+0xb8>
 8004840:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004844:	2d00      	cmp	r5, #0
 8004846:	da03      	bge.n	8004850 <_printf_i+0xd0>
 8004848:	232d      	movs	r3, #45	@ 0x2d
 800484a:	426d      	negs	r5, r5
 800484c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004850:	4859      	ldr	r0, [pc, #356]	@ (80049b8 <_printf_i+0x238>)
 8004852:	230a      	movs	r3, #10
 8004854:	e011      	b.n	800487a <_printf_i+0xfa>
 8004856:	6821      	ldr	r1, [r4, #0]
 8004858:	6833      	ldr	r3, [r6, #0]
 800485a:	0608      	lsls	r0, r1, #24
 800485c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004860:	d402      	bmi.n	8004868 <_printf_i+0xe8>
 8004862:	0649      	lsls	r1, r1, #25
 8004864:	bf48      	it	mi
 8004866:	b2ad      	uxthmi	r5, r5
 8004868:	2f6f      	cmp	r7, #111	@ 0x6f
 800486a:	4853      	ldr	r0, [pc, #332]	@ (80049b8 <_printf_i+0x238>)
 800486c:	6033      	str	r3, [r6, #0]
 800486e:	bf14      	ite	ne
 8004870:	230a      	movne	r3, #10
 8004872:	2308      	moveq	r3, #8
 8004874:	2100      	movs	r1, #0
 8004876:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800487a:	6866      	ldr	r6, [r4, #4]
 800487c:	60a6      	str	r6, [r4, #8]
 800487e:	2e00      	cmp	r6, #0
 8004880:	bfa2      	ittt	ge
 8004882:	6821      	ldrge	r1, [r4, #0]
 8004884:	f021 0104 	bicge.w	r1, r1, #4
 8004888:	6021      	strge	r1, [r4, #0]
 800488a:	b90d      	cbnz	r5, 8004890 <_printf_i+0x110>
 800488c:	2e00      	cmp	r6, #0
 800488e:	d04b      	beq.n	8004928 <_printf_i+0x1a8>
 8004890:	4616      	mov	r6, r2
 8004892:	fbb5 f1f3 	udiv	r1, r5, r3
 8004896:	fb03 5711 	mls	r7, r3, r1, r5
 800489a:	5dc7      	ldrb	r7, [r0, r7]
 800489c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048a0:	462f      	mov	r7, r5
 80048a2:	42bb      	cmp	r3, r7
 80048a4:	460d      	mov	r5, r1
 80048a6:	d9f4      	bls.n	8004892 <_printf_i+0x112>
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d10b      	bne.n	80048c4 <_printf_i+0x144>
 80048ac:	6823      	ldr	r3, [r4, #0]
 80048ae:	07df      	lsls	r7, r3, #31
 80048b0:	d508      	bpl.n	80048c4 <_printf_i+0x144>
 80048b2:	6923      	ldr	r3, [r4, #16]
 80048b4:	6861      	ldr	r1, [r4, #4]
 80048b6:	4299      	cmp	r1, r3
 80048b8:	bfde      	ittt	le
 80048ba:	2330      	movle	r3, #48	@ 0x30
 80048bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80048c4:	1b92      	subs	r2, r2, r6
 80048c6:	6122      	str	r2, [r4, #16]
 80048c8:	f8cd a000 	str.w	sl, [sp]
 80048cc:	464b      	mov	r3, r9
 80048ce:	aa03      	add	r2, sp, #12
 80048d0:	4621      	mov	r1, r4
 80048d2:	4640      	mov	r0, r8
 80048d4:	f7ff fee6 	bl	80046a4 <_printf_common>
 80048d8:	3001      	adds	r0, #1
 80048da:	d14a      	bne.n	8004972 <_printf_i+0x1f2>
 80048dc:	f04f 30ff 	mov.w	r0, #4294967295
 80048e0:	b004      	add	sp, #16
 80048e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048e6:	6823      	ldr	r3, [r4, #0]
 80048e8:	f043 0320 	orr.w	r3, r3, #32
 80048ec:	6023      	str	r3, [r4, #0]
 80048ee:	4833      	ldr	r0, [pc, #204]	@ (80049bc <_printf_i+0x23c>)
 80048f0:	2778      	movs	r7, #120	@ 0x78
 80048f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80048f6:	6823      	ldr	r3, [r4, #0]
 80048f8:	6831      	ldr	r1, [r6, #0]
 80048fa:	061f      	lsls	r7, r3, #24
 80048fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8004900:	d402      	bmi.n	8004908 <_printf_i+0x188>
 8004902:	065f      	lsls	r7, r3, #25
 8004904:	bf48      	it	mi
 8004906:	b2ad      	uxthmi	r5, r5
 8004908:	6031      	str	r1, [r6, #0]
 800490a:	07d9      	lsls	r1, r3, #31
 800490c:	bf44      	itt	mi
 800490e:	f043 0320 	orrmi.w	r3, r3, #32
 8004912:	6023      	strmi	r3, [r4, #0]
 8004914:	b11d      	cbz	r5, 800491e <_printf_i+0x19e>
 8004916:	2310      	movs	r3, #16
 8004918:	e7ac      	b.n	8004874 <_printf_i+0xf4>
 800491a:	4827      	ldr	r0, [pc, #156]	@ (80049b8 <_printf_i+0x238>)
 800491c:	e7e9      	b.n	80048f2 <_printf_i+0x172>
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	f023 0320 	bic.w	r3, r3, #32
 8004924:	6023      	str	r3, [r4, #0]
 8004926:	e7f6      	b.n	8004916 <_printf_i+0x196>
 8004928:	4616      	mov	r6, r2
 800492a:	e7bd      	b.n	80048a8 <_printf_i+0x128>
 800492c:	6833      	ldr	r3, [r6, #0]
 800492e:	6825      	ldr	r5, [r4, #0]
 8004930:	6961      	ldr	r1, [r4, #20]
 8004932:	1d18      	adds	r0, r3, #4
 8004934:	6030      	str	r0, [r6, #0]
 8004936:	062e      	lsls	r6, r5, #24
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	d501      	bpl.n	8004940 <_printf_i+0x1c0>
 800493c:	6019      	str	r1, [r3, #0]
 800493e:	e002      	b.n	8004946 <_printf_i+0x1c6>
 8004940:	0668      	lsls	r0, r5, #25
 8004942:	d5fb      	bpl.n	800493c <_printf_i+0x1bc>
 8004944:	8019      	strh	r1, [r3, #0]
 8004946:	2300      	movs	r3, #0
 8004948:	6123      	str	r3, [r4, #16]
 800494a:	4616      	mov	r6, r2
 800494c:	e7bc      	b.n	80048c8 <_printf_i+0x148>
 800494e:	6833      	ldr	r3, [r6, #0]
 8004950:	1d1a      	adds	r2, r3, #4
 8004952:	6032      	str	r2, [r6, #0]
 8004954:	681e      	ldr	r6, [r3, #0]
 8004956:	6862      	ldr	r2, [r4, #4]
 8004958:	2100      	movs	r1, #0
 800495a:	4630      	mov	r0, r6
 800495c:	f7fb fc40 	bl	80001e0 <memchr>
 8004960:	b108      	cbz	r0, 8004966 <_printf_i+0x1e6>
 8004962:	1b80      	subs	r0, r0, r6
 8004964:	6060      	str	r0, [r4, #4]
 8004966:	6863      	ldr	r3, [r4, #4]
 8004968:	6123      	str	r3, [r4, #16]
 800496a:	2300      	movs	r3, #0
 800496c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004970:	e7aa      	b.n	80048c8 <_printf_i+0x148>
 8004972:	6923      	ldr	r3, [r4, #16]
 8004974:	4632      	mov	r2, r6
 8004976:	4649      	mov	r1, r9
 8004978:	4640      	mov	r0, r8
 800497a:	47d0      	blx	sl
 800497c:	3001      	adds	r0, #1
 800497e:	d0ad      	beq.n	80048dc <_printf_i+0x15c>
 8004980:	6823      	ldr	r3, [r4, #0]
 8004982:	079b      	lsls	r3, r3, #30
 8004984:	d413      	bmi.n	80049ae <_printf_i+0x22e>
 8004986:	68e0      	ldr	r0, [r4, #12]
 8004988:	9b03      	ldr	r3, [sp, #12]
 800498a:	4298      	cmp	r0, r3
 800498c:	bfb8      	it	lt
 800498e:	4618      	movlt	r0, r3
 8004990:	e7a6      	b.n	80048e0 <_printf_i+0x160>
 8004992:	2301      	movs	r3, #1
 8004994:	4632      	mov	r2, r6
 8004996:	4649      	mov	r1, r9
 8004998:	4640      	mov	r0, r8
 800499a:	47d0      	blx	sl
 800499c:	3001      	adds	r0, #1
 800499e:	d09d      	beq.n	80048dc <_printf_i+0x15c>
 80049a0:	3501      	adds	r5, #1
 80049a2:	68e3      	ldr	r3, [r4, #12]
 80049a4:	9903      	ldr	r1, [sp, #12]
 80049a6:	1a5b      	subs	r3, r3, r1
 80049a8:	42ab      	cmp	r3, r5
 80049aa:	dcf2      	bgt.n	8004992 <_printf_i+0x212>
 80049ac:	e7eb      	b.n	8004986 <_printf_i+0x206>
 80049ae:	2500      	movs	r5, #0
 80049b0:	f104 0619 	add.w	r6, r4, #25
 80049b4:	e7f5      	b.n	80049a2 <_printf_i+0x222>
 80049b6:	bf00      	nop
 80049b8:	08004de8 	.word	0x08004de8
 80049bc:	08004df9 	.word	0x08004df9

080049c0 <__swbuf_r>:
 80049c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c2:	460e      	mov	r6, r1
 80049c4:	4614      	mov	r4, r2
 80049c6:	4605      	mov	r5, r0
 80049c8:	b118      	cbz	r0, 80049d2 <__swbuf_r+0x12>
 80049ca:	6a03      	ldr	r3, [r0, #32]
 80049cc:	b90b      	cbnz	r3, 80049d2 <__swbuf_r+0x12>
 80049ce:	f7ff fa11 	bl	8003df4 <__sinit>
 80049d2:	69a3      	ldr	r3, [r4, #24]
 80049d4:	60a3      	str	r3, [r4, #8]
 80049d6:	89a3      	ldrh	r3, [r4, #12]
 80049d8:	071a      	lsls	r2, r3, #28
 80049da:	d501      	bpl.n	80049e0 <__swbuf_r+0x20>
 80049dc:	6923      	ldr	r3, [r4, #16]
 80049de:	b943      	cbnz	r3, 80049f2 <__swbuf_r+0x32>
 80049e0:	4621      	mov	r1, r4
 80049e2:	4628      	mov	r0, r5
 80049e4:	f000 f82a 	bl	8004a3c <__swsetup_r>
 80049e8:	b118      	cbz	r0, 80049f2 <__swbuf_r+0x32>
 80049ea:	f04f 37ff 	mov.w	r7, #4294967295
 80049ee:	4638      	mov	r0, r7
 80049f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049f2:	6823      	ldr	r3, [r4, #0]
 80049f4:	6922      	ldr	r2, [r4, #16]
 80049f6:	1a98      	subs	r0, r3, r2
 80049f8:	6963      	ldr	r3, [r4, #20]
 80049fa:	b2f6      	uxtb	r6, r6
 80049fc:	4283      	cmp	r3, r0
 80049fe:	4637      	mov	r7, r6
 8004a00:	dc05      	bgt.n	8004a0e <__swbuf_r+0x4e>
 8004a02:	4621      	mov	r1, r4
 8004a04:	4628      	mov	r0, r5
 8004a06:	f7ff fcbb 	bl	8004380 <_fflush_r>
 8004a0a:	2800      	cmp	r0, #0
 8004a0c:	d1ed      	bne.n	80049ea <__swbuf_r+0x2a>
 8004a0e:	68a3      	ldr	r3, [r4, #8]
 8004a10:	3b01      	subs	r3, #1
 8004a12:	60a3      	str	r3, [r4, #8]
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	1c5a      	adds	r2, r3, #1
 8004a18:	6022      	str	r2, [r4, #0]
 8004a1a:	701e      	strb	r6, [r3, #0]
 8004a1c:	6962      	ldr	r2, [r4, #20]
 8004a1e:	1c43      	adds	r3, r0, #1
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d004      	beq.n	8004a2e <__swbuf_r+0x6e>
 8004a24:	89a3      	ldrh	r3, [r4, #12]
 8004a26:	07db      	lsls	r3, r3, #31
 8004a28:	d5e1      	bpl.n	80049ee <__swbuf_r+0x2e>
 8004a2a:	2e0a      	cmp	r6, #10
 8004a2c:	d1df      	bne.n	80049ee <__swbuf_r+0x2e>
 8004a2e:	4621      	mov	r1, r4
 8004a30:	4628      	mov	r0, r5
 8004a32:	f7ff fca5 	bl	8004380 <_fflush_r>
 8004a36:	2800      	cmp	r0, #0
 8004a38:	d0d9      	beq.n	80049ee <__swbuf_r+0x2e>
 8004a3a:	e7d6      	b.n	80049ea <__swbuf_r+0x2a>

08004a3c <__swsetup_r>:
 8004a3c:	b538      	push	{r3, r4, r5, lr}
 8004a3e:	4b29      	ldr	r3, [pc, #164]	@ (8004ae4 <__swsetup_r+0xa8>)
 8004a40:	4605      	mov	r5, r0
 8004a42:	6818      	ldr	r0, [r3, #0]
 8004a44:	460c      	mov	r4, r1
 8004a46:	b118      	cbz	r0, 8004a50 <__swsetup_r+0x14>
 8004a48:	6a03      	ldr	r3, [r0, #32]
 8004a4a:	b90b      	cbnz	r3, 8004a50 <__swsetup_r+0x14>
 8004a4c:	f7ff f9d2 	bl	8003df4 <__sinit>
 8004a50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a54:	0719      	lsls	r1, r3, #28
 8004a56:	d422      	bmi.n	8004a9e <__swsetup_r+0x62>
 8004a58:	06da      	lsls	r2, r3, #27
 8004a5a:	d407      	bmi.n	8004a6c <__swsetup_r+0x30>
 8004a5c:	2209      	movs	r2, #9
 8004a5e:	602a      	str	r2, [r5, #0]
 8004a60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a64:	81a3      	strh	r3, [r4, #12]
 8004a66:	f04f 30ff 	mov.w	r0, #4294967295
 8004a6a:	e033      	b.n	8004ad4 <__swsetup_r+0x98>
 8004a6c:	0758      	lsls	r0, r3, #29
 8004a6e:	d512      	bpl.n	8004a96 <__swsetup_r+0x5a>
 8004a70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a72:	b141      	cbz	r1, 8004a86 <__swsetup_r+0x4a>
 8004a74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a78:	4299      	cmp	r1, r3
 8004a7a:	d002      	beq.n	8004a82 <__swsetup_r+0x46>
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	f7ff fafb 	bl	8004078 <_free_r>
 8004a82:	2300      	movs	r3, #0
 8004a84:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a86:	89a3      	ldrh	r3, [r4, #12]
 8004a88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004a8c:	81a3      	strh	r3, [r4, #12]
 8004a8e:	2300      	movs	r3, #0
 8004a90:	6063      	str	r3, [r4, #4]
 8004a92:	6923      	ldr	r3, [r4, #16]
 8004a94:	6023      	str	r3, [r4, #0]
 8004a96:	89a3      	ldrh	r3, [r4, #12]
 8004a98:	f043 0308 	orr.w	r3, r3, #8
 8004a9c:	81a3      	strh	r3, [r4, #12]
 8004a9e:	6923      	ldr	r3, [r4, #16]
 8004aa0:	b94b      	cbnz	r3, 8004ab6 <__swsetup_r+0x7a>
 8004aa2:	89a3      	ldrh	r3, [r4, #12]
 8004aa4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004aa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aac:	d003      	beq.n	8004ab6 <__swsetup_r+0x7a>
 8004aae:	4621      	mov	r1, r4
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	f000 f883 	bl	8004bbc <__smakebuf_r>
 8004ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aba:	f013 0201 	ands.w	r2, r3, #1
 8004abe:	d00a      	beq.n	8004ad6 <__swsetup_r+0x9a>
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	60a2      	str	r2, [r4, #8]
 8004ac4:	6962      	ldr	r2, [r4, #20]
 8004ac6:	4252      	negs	r2, r2
 8004ac8:	61a2      	str	r2, [r4, #24]
 8004aca:	6922      	ldr	r2, [r4, #16]
 8004acc:	b942      	cbnz	r2, 8004ae0 <__swsetup_r+0xa4>
 8004ace:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004ad2:	d1c5      	bne.n	8004a60 <__swsetup_r+0x24>
 8004ad4:	bd38      	pop	{r3, r4, r5, pc}
 8004ad6:	0799      	lsls	r1, r3, #30
 8004ad8:	bf58      	it	pl
 8004ada:	6962      	ldrpl	r2, [r4, #20]
 8004adc:	60a2      	str	r2, [r4, #8]
 8004ade:	e7f4      	b.n	8004aca <__swsetup_r+0x8e>
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	e7f7      	b.n	8004ad4 <__swsetup_r+0x98>
 8004ae4:	20000018 	.word	0x20000018

08004ae8 <_raise_r>:
 8004ae8:	291f      	cmp	r1, #31
 8004aea:	b538      	push	{r3, r4, r5, lr}
 8004aec:	4605      	mov	r5, r0
 8004aee:	460c      	mov	r4, r1
 8004af0:	d904      	bls.n	8004afc <_raise_r+0x14>
 8004af2:	2316      	movs	r3, #22
 8004af4:	6003      	str	r3, [r0, #0]
 8004af6:	f04f 30ff 	mov.w	r0, #4294967295
 8004afa:	bd38      	pop	{r3, r4, r5, pc}
 8004afc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004afe:	b112      	cbz	r2, 8004b06 <_raise_r+0x1e>
 8004b00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004b04:	b94b      	cbnz	r3, 8004b1a <_raise_r+0x32>
 8004b06:	4628      	mov	r0, r5
 8004b08:	f000 f830 	bl	8004b6c <_getpid_r>
 8004b0c:	4622      	mov	r2, r4
 8004b0e:	4601      	mov	r1, r0
 8004b10:	4628      	mov	r0, r5
 8004b12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b16:	f000 b817 	b.w	8004b48 <_kill_r>
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d00a      	beq.n	8004b34 <_raise_r+0x4c>
 8004b1e:	1c59      	adds	r1, r3, #1
 8004b20:	d103      	bne.n	8004b2a <_raise_r+0x42>
 8004b22:	2316      	movs	r3, #22
 8004b24:	6003      	str	r3, [r0, #0]
 8004b26:	2001      	movs	r0, #1
 8004b28:	e7e7      	b.n	8004afa <_raise_r+0x12>
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004b30:	4620      	mov	r0, r4
 8004b32:	4798      	blx	r3
 8004b34:	2000      	movs	r0, #0
 8004b36:	e7e0      	b.n	8004afa <_raise_r+0x12>

08004b38 <raise>:
 8004b38:	4b02      	ldr	r3, [pc, #8]	@ (8004b44 <raise+0xc>)
 8004b3a:	4601      	mov	r1, r0
 8004b3c:	6818      	ldr	r0, [r3, #0]
 8004b3e:	f7ff bfd3 	b.w	8004ae8 <_raise_r>
 8004b42:	bf00      	nop
 8004b44:	20000018 	.word	0x20000018

08004b48 <_kill_r>:
 8004b48:	b538      	push	{r3, r4, r5, lr}
 8004b4a:	4d07      	ldr	r5, [pc, #28]	@ (8004b68 <_kill_r+0x20>)
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	4604      	mov	r4, r0
 8004b50:	4608      	mov	r0, r1
 8004b52:	4611      	mov	r1, r2
 8004b54:	602b      	str	r3, [r5, #0]
 8004b56:	f7fc f97e 	bl	8000e56 <_kill>
 8004b5a:	1c43      	adds	r3, r0, #1
 8004b5c:	d102      	bne.n	8004b64 <_kill_r+0x1c>
 8004b5e:	682b      	ldr	r3, [r5, #0]
 8004b60:	b103      	cbz	r3, 8004b64 <_kill_r+0x1c>
 8004b62:	6023      	str	r3, [r4, #0]
 8004b64:	bd38      	pop	{r3, r4, r5, pc}
 8004b66:	bf00      	nop
 8004b68:	20000508 	.word	0x20000508

08004b6c <_getpid_r>:
 8004b6c:	f7fc b96b 	b.w	8000e46 <_getpid>

08004b70 <__swhatbuf_r>:
 8004b70:	b570      	push	{r4, r5, r6, lr}
 8004b72:	460c      	mov	r4, r1
 8004b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b78:	2900      	cmp	r1, #0
 8004b7a:	b096      	sub	sp, #88	@ 0x58
 8004b7c:	4615      	mov	r5, r2
 8004b7e:	461e      	mov	r6, r3
 8004b80:	da0d      	bge.n	8004b9e <__swhatbuf_r+0x2e>
 8004b82:	89a3      	ldrh	r3, [r4, #12]
 8004b84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004b88:	f04f 0100 	mov.w	r1, #0
 8004b8c:	bf14      	ite	ne
 8004b8e:	2340      	movne	r3, #64	@ 0x40
 8004b90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004b94:	2000      	movs	r0, #0
 8004b96:	6031      	str	r1, [r6, #0]
 8004b98:	602b      	str	r3, [r5, #0]
 8004b9a:	b016      	add	sp, #88	@ 0x58
 8004b9c:	bd70      	pop	{r4, r5, r6, pc}
 8004b9e:	466a      	mov	r2, sp
 8004ba0:	f000 f848 	bl	8004c34 <_fstat_r>
 8004ba4:	2800      	cmp	r0, #0
 8004ba6:	dbec      	blt.n	8004b82 <__swhatbuf_r+0x12>
 8004ba8:	9901      	ldr	r1, [sp, #4]
 8004baa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004bae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004bb2:	4259      	negs	r1, r3
 8004bb4:	4159      	adcs	r1, r3
 8004bb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004bba:	e7eb      	b.n	8004b94 <__swhatbuf_r+0x24>

08004bbc <__smakebuf_r>:
 8004bbc:	898b      	ldrh	r3, [r1, #12]
 8004bbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bc0:	079d      	lsls	r5, r3, #30
 8004bc2:	4606      	mov	r6, r0
 8004bc4:	460c      	mov	r4, r1
 8004bc6:	d507      	bpl.n	8004bd8 <__smakebuf_r+0x1c>
 8004bc8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004bcc:	6023      	str	r3, [r4, #0]
 8004bce:	6123      	str	r3, [r4, #16]
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	6163      	str	r3, [r4, #20]
 8004bd4:	b003      	add	sp, #12
 8004bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bd8:	ab01      	add	r3, sp, #4
 8004bda:	466a      	mov	r2, sp
 8004bdc:	f7ff ffc8 	bl	8004b70 <__swhatbuf_r>
 8004be0:	9f00      	ldr	r7, [sp, #0]
 8004be2:	4605      	mov	r5, r0
 8004be4:	4639      	mov	r1, r7
 8004be6:	4630      	mov	r0, r6
 8004be8:	f7ff faba 	bl	8004160 <_malloc_r>
 8004bec:	b948      	cbnz	r0, 8004c02 <__smakebuf_r+0x46>
 8004bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bf2:	059a      	lsls	r2, r3, #22
 8004bf4:	d4ee      	bmi.n	8004bd4 <__smakebuf_r+0x18>
 8004bf6:	f023 0303 	bic.w	r3, r3, #3
 8004bfa:	f043 0302 	orr.w	r3, r3, #2
 8004bfe:	81a3      	strh	r3, [r4, #12]
 8004c00:	e7e2      	b.n	8004bc8 <__smakebuf_r+0xc>
 8004c02:	89a3      	ldrh	r3, [r4, #12]
 8004c04:	6020      	str	r0, [r4, #0]
 8004c06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c0a:	81a3      	strh	r3, [r4, #12]
 8004c0c:	9b01      	ldr	r3, [sp, #4]
 8004c0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004c12:	b15b      	cbz	r3, 8004c2c <__smakebuf_r+0x70>
 8004c14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c18:	4630      	mov	r0, r6
 8004c1a:	f000 f81d 	bl	8004c58 <_isatty_r>
 8004c1e:	b128      	cbz	r0, 8004c2c <__smakebuf_r+0x70>
 8004c20:	89a3      	ldrh	r3, [r4, #12]
 8004c22:	f023 0303 	bic.w	r3, r3, #3
 8004c26:	f043 0301 	orr.w	r3, r3, #1
 8004c2a:	81a3      	strh	r3, [r4, #12]
 8004c2c:	89a3      	ldrh	r3, [r4, #12]
 8004c2e:	431d      	orrs	r5, r3
 8004c30:	81a5      	strh	r5, [r4, #12]
 8004c32:	e7cf      	b.n	8004bd4 <__smakebuf_r+0x18>

08004c34 <_fstat_r>:
 8004c34:	b538      	push	{r3, r4, r5, lr}
 8004c36:	4d07      	ldr	r5, [pc, #28]	@ (8004c54 <_fstat_r+0x20>)
 8004c38:	2300      	movs	r3, #0
 8004c3a:	4604      	mov	r4, r0
 8004c3c:	4608      	mov	r0, r1
 8004c3e:	4611      	mov	r1, r2
 8004c40:	602b      	str	r3, [r5, #0]
 8004c42:	f7fc f968 	bl	8000f16 <_fstat>
 8004c46:	1c43      	adds	r3, r0, #1
 8004c48:	d102      	bne.n	8004c50 <_fstat_r+0x1c>
 8004c4a:	682b      	ldr	r3, [r5, #0]
 8004c4c:	b103      	cbz	r3, 8004c50 <_fstat_r+0x1c>
 8004c4e:	6023      	str	r3, [r4, #0]
 8004c50:	bd38      	pop	{r3, r4, r5, pc}
 8004c52:	bf00      	nop
 8004c54:	20000508 	.word	0x20000508

08004c58 <_isatty_r>:
 8004c58:	b538      	push	{r3, r4, r5, lr}
 8004c5a:	4d06      	ldr	r5, [pc, #24]	@ (8004c74 <_isatty_r+0x1c>)
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	4604      	mov	r4, r0
 8004c60:	4608      	mov	r0, r1
 8004c62:	602b      	str	r3, [r5, #0]
 8004c64:	f7fc f967 	bl	8000f36 <_isatty>
 8004c68:	1c43      	adds	r3, r0, #1
 8004c6a:	d102      	bne.n	8004c72 <_isatty_r+0x1a>
 8004c6c:	682b      	ldr	r3, [r5, #0]
 8004c6e:	b103      	cbz	r3, 8004c72 <_isatty_r+0x1a>
 8004c70:	6023      	str	r3, [r4, #0]
 8004c72:	bd38      	pop	{r3, r4, r5, pc}
 8004c74:	20000508 	.word	0x20000508

08004c78 <_gettimeofday>:
 8004c78:	4b02      	ldr	r3, [pc, #8]	@ (8004c84 <_gettimeofday+0xc>)
 8004c7a:	2258      	movs	r2, #88	@ 0x58
 8004c7c:	601a      	str	r2, [r3, #0]
 8004c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c82:	4770      	bx	lr
 8004c84:	20000508 	.word	0x20000508

08004c88 <_init>:
 8004c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8a:	bf00      	nop
 8004c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c8e:	bc08      	pop	{r3}
 8004c90:	469e      	mov	lr, r3
 8004c92:	4770      	bx	lr

08004c94 <_fini>:
 8004c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c96:	bf00      	nop
 8004c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c9a:	bc08      	pop	{r3}
 8004c9c:	469e      	mov	lr, r3
 8004c9e:	4770      	bx	lr
