
dotmatrix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006398  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  08006528  08006528  00007528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006814  08006814  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006814  08006814  00007814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800681c  0800681c  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800681c  0800681c  0000781c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006820  08006820  00007820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006824  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000554  20000068  0800688c  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  0800688c  000085bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017bc5  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000360f  00000000  00000000  0001fc5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001580  00000000  00000000  00023270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010c1  00000000  00000000  000247f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002407b  00000000  00000000  000258b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cb71  00000000  00000000  0004992c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d091d  00000000  00000000  0006649d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136dba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064c0  00000000  00000000  00136e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0013d2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006510 	.word	0x08006510

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006510 	.word	0x08006510

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MAX7219_Send>:
 *
 * @param address The address of the register to configure.
 * @param data The data value to write to the register.
 */
void MAX7219_Send(uint8_t address, uint8_t data)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	460a      	mov	r2, r1
 800057a:	71fb      	strb	r3, [r7, #7]
 800057c:	4613      	mov	r3, r2
 800057e:	71bb      	strb	r3, [r7, #6]
    uint8_t txData[2] = {address, data};
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	733b      	strb	r3, [r7, #12]
 8000584:	79bb      	ldrb	r3, [r7, #6]
 8000586:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2101      	movs	r1, #1
 800058c:	4809      	ldr	r0, [pc, #36]	@ (80005b4 <MAX7219_Send+0x44>)
 800058e:	f001 fba7 	bl	8001ce0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, txData, 2, HAL_MAX_DELAY);
 8000592:	f107 010c 	add.w	r1, r7, #12
 8000596:	f04f 33ff 	mov.w	r3, #4294967295
 800059a:	2202      	movs	r2, #2
 800059c:	4806      	ldr	r0, [pc, #24]	@ (80005b8 <MAX7219_Send+0x48>)
 800059e:	f003 fc22 	bl	8003de6 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2101      	movs	r1, #1
 80005a6:	4803      	ldr	r0, [pc, #12]	@ (80005b4 <MAX7219_Send+0x44>)
 80005a8:	f001 fb9a 	bl	8001ce0 <HAL_GPIO_WritePin>

}
 80005ac:	bf00      	nop
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	48000400 	.word	0x48000400
 80005b8:	20000330 	.word	0x20000330

080005bc <MAX7219_Init>:
 *        Scan-Limit, Decode-Mode, Shutdown-Mode, Display-Test-Mode,
 *        Intensity, and Display-Size.
 */

void MAX7219_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
    MAX7219_Send(0x0C, 0x01); // Shutdown-Mode close
 80005c0:	2101      	movs	r1, #1
 80005c2:	200c      	movs	r0, #12
 80005c4:	f7ff ffd4 	bl	8000570 <MAX7219_Send>
    MAX7219_Send(0x0F, 0x00); // Display-Test-Mode close
 80005c8:	2100      	movs	r1, #0
 80005ca:	200f      	movs	r0, #15
 80005cc:	f7ff ffd0 	bl	8000570 <MAX7219_Send>
    MAX7219_Send(0x0B, 0x07); // Scan-Limit for all digits
 80005d0:	2107      	movs	r1, #7
 80005d2:	200b      	movs	r0, #11
 80005d4:	f7ff ffcc 	bl	8000570 <MAX7219_Send>
    MAX7219_Send(0x0A, 0x02); // Intensity as 20%
 80005d8:	2102      	movs	r1, #2
 80005da:	200a      	movs	r0, #10
 80005dc:	f7ff ffc8 	bl	8000570 <MAX7219_Send>
    MAX7219_Send(0x09, 0x00); // Decode-Mode close
 80005e0:	2100      	movs	r1, #0
 80005e2:	2009      	movs	r0, #9
 80005e4:	f7ff ffc4 	bl	8000570 <MAX7219_Send>
    clearMatrix();
 80005e8:	f000 f802 	bl	80005f0 <clearMatrix>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <clearMatrix>:

/**
 * @brief  Clears all pixels on the LED matrix by setting all registers to 0.
 */
void clearMatrix(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
    for (uint8_t i = 1; i <= 8; i++)
 80005f6:	2301      	movs	r3, #1
 80005f8:	71fb      	strb	r3, [r7, #7]
 80005fa:	e007      	b.n	800060c <clearMatrix+0x1c>
    {
        MAX7219_Send(i, 0x00);
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff ffb5 	bl	8000570 <MAX7219_Send>
    for (uint8_t i = 1; i <= 8; i++)
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	3301      	adds	r3, #1
 800060a:	71fb      	strb	r3, [r7, #7]
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	2b08      	cmp	r3, #8
 8000610:	d9f4      	bls.n	80005fc <clearMatrix+0xc>
    }
}
 8000612:	bf00      	nop
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <LED_Clear>:


/**
 * @brief Clears the LED matrix by setting all pixels to 0.
 */
void LED_Clear(void) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
    for (int i = 0; i < 8; i++) {
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	e013      	b.n	8000650 <LED_Clear+0x34>
        for (int j = 0; j < 8; j++) {
 8000628:	2300      	movs	r3, #0
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	e00a      	b.n	8000644 <LED_Clear+0x28>
            ledMatrix[i][j] = 0;
 800062e:	4a0d      	ldr	r2, [pc, #52]	@ (8000664 <LED_Clear+0x48>)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	00db      	lsls	r3, r3, #3
 8000634:	441a      	add	r2, r3
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	4413      	add	r3, r2
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 8; j++) {
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	3301      	adds	r3, #1
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	2b07      	cmp	r3, #7
 8000648:	ddf1      	ble.n	800062e <LED_Clear+0x12>
    for (int i = 0; i < 8; i++) {
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	3301      	adds	r3, #1
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2b07      	cmp	r3, #7
 8000654:	dde8      	ble.n	8000628 <LED_Clear+0xc>
        }
    }
    clearMatrix();
 8000656:	f7ff ffcb 	bl	80005f0 <clearMatrix>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000084 	.word	0x20000084

08000668 <LED_SetPixel>:
 *
 * @param x The x-coordinate of the pixel.
 * @param y The y-coordinate of the pixel.
 * @param value The value to set (1 to turn on, 0 to turn off).
 */
void LED_SetPixel(int x, int y, int value) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b096      	sub	sp, #88	@ 0x58
 800066c:	af02      	add	r7, sp, #8
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
    if (x < 0 || x >= 8 || y < 0 || y >= 8) {
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	2b00      	cmp	r3, #0
 8000678:	db49      	blt.n	800070e <LED_SetPixel+0xa6>
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	2b07      	cmp	r3, #7
 800067e:	dc46      	bgt.n	800070e <LED_SetPixel+0xa6>
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	2b00      	cmp	r3, #0
 8000684:	db43      	blt.n	800070e <LED_SetPixel+0xa6>
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	2b07      	cmp	r3, #7
 800068a:	dc40      	bgt.n	800070e <LED_SetPixel+0xa6>
        return; // Out of bounds
    }

    ledMatrix[y][x] = value; // Update the state of the LED matrix
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	b2d9      	uxtb	r1, r3
 8000690:	4a21      	ldr	r2, [pc, #132]	@ (8000718 <LED_SetPixel+0xb0>)
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	00db      	lsls	r3, r3, #3
 8000696:	441a      	add	r2, r3
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	4413      	add	r3, r2
 800069c:	460a      	mov	r2, r1
 800069e:	701a      	strb	r2, [r3, #0]


    // Debugging: Print the updated LED matrix state
    char debug_msg[50];
    sprintf(debug_msg, "LED Matrix Updated: x=%d, y=%d, value=%d\r\n", x, y, value);
 80006a0:	f107 0014 	add.w	r0, r7, #20
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	491b      	ldr	r1, [pc, #108]	@ (800071c <LED_SetPixel+0xb4>)
 80006ae:	f004 fe45 	bl	800533c <siprintf>
   // HAL_UART_Transmit(&huart2, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);

    uint8_t row = y + 1; // MAX7219 rows are 1-indexed
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	3301      	adds	r3, #1
 80006b8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t currentRowData = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    for (int i = 0; i < 8; i++) {
 80006c2:	2300      	movs	r3, #0
 80006c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80006c6:	e016      	b.n	80006f6 <LED_SetPixel+0x8e>
        if (ledMatrix[y][i]) {
 80006c8:	4a13      	ldr	r2, [pc, #76]	@ (8000718 <LED_SetPixel+0xb0>)
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	00db      	lsls	r3, r3, #3
 80006ce:	441a      	add	r2, r3
 80006d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80006d2:	4413      	add	r3, r2
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d00a      	beq.n	80006f0 <LED_SetPixel+0x88>
            currentRowData |= (1 << i);
 80006da:	2201      	movs	r2, #1
 80006dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80006de:	fa02 f303 	lsl.w	r3, r2, r3
 80006e2:	b25a      	sxtb	r2, r3
 80006e4:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80006e8:	4313      	orrs	r3, r2
 80006ea:	b25b      	sxtb	r3, r3
 80006ec:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    for (int i = 0; i < 8; i++) {
 80006f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80006f2:	3301      	adds	r3, #1
 80006f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80006f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80006f8:	2b07      	cmp	r3, #7
 80006fa:	dde5      	ble.n	80006c8 <LED_SetPixel+0x60>
        }
    }

    MAX7219_Send(row, currentRowData); // Send updated row data
 80006fc:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8000700:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000704:	4611      	mov	r1, r2
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ff32 	bl	8000570 <MAX7219_Send>
 800070c:	e000      	b.n	8000710 <LED_SetPixel+0xa8>
        return; // Out of bounds
 800070e:	bf00      	nop
}
 8000710:	3750      	adds	r7, #80	@ 0x50
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000084 	.word	0x20000084
 800071c:	08006528 	.word	0x08006528

08000720 <LED_Update>:

void LED_Update(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
	for (int y = 0; y < 8; y++) {
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	e02a      	b.n	8000782 <LED_Update+0x62>
	        uint8_t row = y + 1; // MAX7219 rows are 1-indexed
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	b2db      	uxtb	r3, r3
 8000730:	3301      	adds	r3, #1
 8000732:	70fb      	strb	r3, [r7, #3]
	        uint8_t currentRowData = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	72fb      	strb	r3, [r7, #11]

	        for (int x = 0; x < 8; x++) {
 8000738:	2300      	movs	r3, #0
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	e015      	b.n	800076a <LED_Update+0x4a>
	            if (ledMatrix[y][x]) {
 800073e:	4a15      	ldr	r2, [pc, #84]	@ (8000794 <LED_Update+0x74>)
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	00db      	lsls	r3, r3, #3
 8000744:	441a      	add	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4413      	add	r3, r2
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d009      	beq.n	8000764 <LED_Update+0x44>
	                currentRowData |= (1 << x);
 8000750:	2201      	movs	r2, #1
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	fa02 f303 	lsl.w	r3, r2, r3
 8000758:	b25a      	sxtb	r2, r3
 800075a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800075e:	4313      	orrs	r3, r2
 8000760:	b25b      	sxtb	r3, r3
 8000762:	72fb      	strb	r3, [r7, #11]
	        for (int x = 0; x < 8; x++) {
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3301      	adds	r3, #1
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b07      	cmp	r3, #7
 800076e:	dde6      	ble.n	800073e <LED_Update+0x1e>
	            }
	        }

	        MAX7219_Send(row, currentRowData); // Send updated row data
 8000770:	7afa      	ldrb	r2, [r7, #11]
 8000772:	78fb      	ldrb	r3, [r7, #3]
 8000774:	4611      	mov	r1, r2
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff fefa 	bl	8000570 <MAX7219_Send>
	for (int y = 0; y < 8; y++) {
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	3301      	adds	r3, #1
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2b07      	cmp	r3, #7
 8000786:	ddd1      	ble.n	800072c <LED_Update+0xc>
	    }
}
 8000788:	bf00      	nop
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000084 	.word	0x20000084

08000798 <welcome_animation>:
/**
 * @brief Displays a welcome animation on the LED matrix.
 *
 * This function shows a simple animation on the LED matrix when the STM32 is turned on.
 */
void welcome_animation(void) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
    for (int i = 0; i < 8; i++) {
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	e015      	b.n	80007d0 <welcome_animation+0x38>
        for (int j = 0; j < 8; j++) {
 80007a4:	2300      	movs	r3, #0
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	e00c      	b.n	80007c4 <welcome_animation+0x2c>
            LED_SetPixel(i, j, 1);
 80007aa:	2201      	movs	r2, #1
 80007ac:	6839      	ldr	r1, [r7, #0]
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f7ff ff5a 	bl	8000668 <LED_SetPixel>
            LED_Update();
 80007b4:	f7ff ffb4 	bl	8000720 <LED_Update>
            HAL_Delay(50);
 80007b8:	2032      	movs	r0, #50	@ 0x32
 80007ba:	f001 f81d 	bl	80017f8 <HAL_Delay>
        for (int j = 0; j < 8; j++) {
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	2b07      	cmp	r3, #7
 80007c8:	ddef      	ble.n	80007aa <welcome_animation+0x12>
    for (int i = 0; i < 8; i++) {
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	3301      	adds	r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b07      	cmp	r3, #7
 80007d4:	dde6      	ble.n	80007a4 <welcome_animation+0xc>
        }
    }
    HAL_Delay(500);
 80007d6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007da:	f001 f80d 	bl	80017f8 <HAL_Delay>
    LED_Clear();
 80007de:	f7ff ff1d 	bl	800061c <LED_Clear>
    LED_Update();
 80007e2:	f7ff ff9d 	bl	8000720 <LED_Update>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <init_game>:
 *
 * This function sets the initial length and position of the snake,
 * sets the initial direction, and places the fruit at a random position.
 */

void init_game() {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	MAX7219_Send(0x0A, 0x02);
 80007f4:	2102      	movs	r1, #2
 80007f6:	200a      	movs	r0, #10
 80007f8:	f7ff feba 	bl	8000570 <MAX7219_Send>
    snake.length = 1;
 80007fc:	4b17      	ldr	r3, [pc, #92]	@ (800085c <init_game+0x6c>)
 80007fe:	2201      	movs	r2, #1
 8000800:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    snake.body[0].x = MATRIX_WIDTH / 2;
 8000804:	4b15      	ldr	r3, [pc, #84]	@ (800085c <init_game+0x6c>)
 8000806:	2204      	movs	r2, #4
 8000808:	601a      	str	r2, [r3, #0]
    snake.body[0].y = MATRIX_HEIGHT / 2;
 800080a:	4b14      	ldr	r3, [pc, #80]	@ (800085c <init_game+0x6c>)
 800080c:	2204      	movs	r2, #4
 800080e:	605a      	str	r2, [r3, #4]
    snake.direction.x = 1;
 8000810:	4b12      	ldr	r3, [pc, #72]	@ (800085c <init_game+0x6c>)
 8000812:	2201      	movs	r2, #1
 8000814:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    snake.direction.y = 0;
 8000818:	4b10      	ldr	r3, [pc, #64]	@ (800085c <init_game+0x6c>)
 800081a:	2200      	movs	r2, #0
 800081c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
    fruit.x = rand() % MATRIX_WIDTH;
 8000820:	f004 fc8c 	bl	800513c <rand>
 8000824:	4603      	mov	r3, r0
 8000826:	425a      	negs	r2, r3
 8000828:	f003 0307 	and.w	r3, r3, #7
 800082c:	f002 0207 	and.w	r2, r2, #7
 8000830:	bf58      	it	pl
 8000832:	4253      	negpl	r3, r2
 8000834:	4a0a      	ldr	r2, [pc, #40]	@ (8000860 <init_game+0x70>)
 8000836:	6013      	str	r3, [r2, #0]
    fruit.y = rand() % MATRIX_HEIGHT;
 8000838:	f004 fc80 	bl	800513c <rand>
 800083c:	4603      	mov	r3, r0
 800083e:	425a      	negs	r2, r3
 8000840:	f003 0307 	and.w	r3, r3, #7
 8000844:	f002 0207 	and.w	r2, r2, #7
 8000848:	bf58      	it	pl
 800084a:	4253      	negpl	r3, r2
 800084c:	4a04      	ldr	r2, [pc, #16]	@ (8000860 <init_game+0x70>)
 800084e:	6053      	str	r3, [r2, #4]
    game_over = 0;
 8000850:	4b04      	ldr	r3, [pc, #16]	@ (8000864 <init_game+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200000cc 	.word	0x200000cc
 8000860:	200000c4 	.word	0x200000c4
 8000864:	200002d8 	.word	0x200002d8

08000868 <check_collision>:
 * This function checks if the snake's new head position collides with the walls
 * or with its own body. If a collision with the wall is detected, the game is reset.
 * If a collision with the snake's body is detected, the snake's length is reduced.
 */

void check_collision(Point new_head) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	463b      	mov	r3, r7
 8000870:	e883 0003 	stmia.w	r3, {r0, r1}
    if (new_head.x < 0 || new_head.x >= MATRIX_WIDTH || new_head.y < 0 || new_head.y >= MATRIX_HEIGHT) {
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	2b00      	cmp	r3, #0
 8000878:	db08      	blt.n	800088c <check_collision+0x24>
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	2b07      	cmp	r3, #7
 800087e:	dc05      	bgt.n	800088c <check_collision+0x24>
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2b00      	cmp	r3, #0
 8000884:	db02      	blt.n	800088c <check_collision+0x24>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2b07      	cmp	r3, #7
 800088a:	dd12      	ble.n	80008b2 <check_collision+0x4a>
        LED_Clear();
 800088c:	f7ff fec6 	bl	800061c <LED_Clear>
        const char *msg = "Game Over: Wall Collision\r\n";
 8000890:	4b21      	ldr	r3, [pc, #132]	@ (8000918 <check_collision+0xb0>)
 8000892:	60fb      	str	r3, [r7, #12]
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000894:	68f8      	ldr	r0, [r7, #12]
 8000896:	f7ff fc9b 	bl	80001d0 <strlen>
 800089a:	4603      	mov	r3, r0
 800089c:	b29a      	uxth	r2, r3
 800089e:	f04f 33ff 	mov.w	r3, #4294967295
 80008a2:	68f9      	ldr	r1, [r7, #12]
 80008a4:	481d      	ldr	r0, [pc, #116]	@ (800091c <check_collision+0xb4>)
 80008a6:	f003 ff49 	bl	800473c <HAL_UART_Transmit>
        game_over = 1;
 80008aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000920 <check_collision+0xb8>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	601a      	str	r2, [r3, #0]
        return;
 80008b0:	e02f      	b.n	8000912 <check_collision+0xaa>
    }

    for (int i = 0; i < snake.length; i++) {
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
 80008b6:	e026      	b.n	8000906 <check_collision+0x9e>
        if (new_head.x == snake.body[i].x && new_head.y == snake.body[i].y) {
 80008b8:	683a      	ldr	r2, [r7, #0]
 80008ba:	491a      	ldr	r1, [pc, #104]	@ (8000924 <check_collision+0xbc>)
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d11c      	bne.n	8000900 <check_collision+0x98>
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	4916      	ldr	r1, [pc, #88]	@ (8000924 <check_collision+0xbc>)
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	440b      	add	r3, r1
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d114      	bne.n	8000900 <check_collision+0x98>
            snake.length = i;
 80008d6:	4a13      	ldr	r2, [pc, #76]	@ (8000924 <check_collision+0xbc>)
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
            const char *msg = "Snake ate itself\r\n";
 80008de:	4b12      	ldr	r3, [pc, #72]	@ (8000928 <check_collision+0xc0>)
 80008e0:	613b      	str	r3, [r7, #16]
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80008e2:	6938      	ldr	r0, [r7, #16]
 80008e4:	f7ff fc74 	bl	80001d0 <strlen>
 80008e8:	4603      	mov	r3, r0
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	f04f 33ff 	mov.w	r3, #4294967295
 80008f0:	6939      	ldr	r1, [r7, #16]
 80008f2:	480a      	ldr	r0, [pc, #40]	@ (800091c <check_collision+0xb4>)
 80008f4:	f003 ff22 	bl	800473c <HAL_UART_Transmit>
            game_over = 1;
 80008f8:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <check_collision+0xb8>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	601a      	str	r2, [r3, #0]
            break;
 80008fe:	e008      	b.n	8000912 <check_collision+0xaa>
    for (int i = 0; i < snake.length; i++) {
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	3301      	adds	r3, #1
 8000904:	617b      	str	r3, [r7, #20]
 8000906:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <check_collision+0xbc>)
 8000908:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800090c:	697a      	ldr	r2, [r7, #20]
 800090e:	429a      	cmp	r2, r3
 8000910:	dbd2      	blt.n	80008b8 <check_collision+0x50>
        }
    }
}
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	08006554 	.word	0x08006554
 800091c:	200003e4 	.word	0x200003e4
 8000920:	200002d8 	.word	0x200002d8
 8000924:	200000cc 	.word	0x200000cc
 8000928:	08006570 	.word	0x08006570

0800092c <move_snake>:
 * @brief Moves the snake in the current direction.
 *
 * This function updates the snake's position based on its current direction.
 * It also checks for collisions and handles the snake eating the fruit.
 */
void move_snake() {
 800092c:	b580      	push	{r7, lr}
 800092e:	b092      	sub	sp, #72	@ 0x48
 8000930:	af00      	add	r7, sp, #0


	Point new_head = {snake.body[0].x + snake.direction.x, snake.body[0].y + snake.direction.y};
 8000932:	4b43      	ldr	r3, [pc, #268]	@ (8000a40 <move_snake+0x114>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	4b42      	ldr	r3, [pc, #264]	@ (8000a40 <move_snake+0x114>)
 8000938:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800093c:	4413      	add	r3, r2
 800093e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000940:	4b3f      	ldr	r3, [pc, #252]	@ (8000a40 <move_snake+0x114>)
 8000942:	685a      	ldr	r2, [r3, #4]
 8000944:	4b3e      	ldr	r3, [pc, #248]	@ (8000a40 <move_snake+0x114>)
 8000946:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800094a:	4413      	add	r3, r2
 800094c:	63fb      	str	r3, [r7, #60]	@ 0x3c



	    check_collision(new_head);
 800094e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000952:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000956:	f7ff ff87 	bl	8000868 <check_collision>

	    if (game_over) {
 800095a:	4b3a      	ldr	r3, [pc, #232]	@ (8000a44 <move_snake+0x118>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d169      	bne.n	8000a36 <move_snake+0x10a>
	        return;
	    }

	    if (new_head.x == fruit.x && new_head.y == fruit.y) {
 8000962:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000964:	4b38      	ldr	r3, [pc, #224]	@ (8000a48 <move_snake+0x11c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	429a      	cmp	r2, r3
 800096a:	d130      	bne.n	80009ce <move_snake+0xa2>
 800096c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800096e:	4b36      	ldr	r3, [pc, #216]	@ (8000a48 <move_snake+0x11c>)
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	429a      	cmp	r2, r3
 8000974:	d12b      	bne.n	80009ce <move_snake+0xa2>
	        snake.length++;
 8000976:	4b32      	ldr	r3, [pc, #200]	@ (8000a40 <move_snake+0x114>)
 8000978:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800097c:	3301      	adds	r3, #1
 800097e:	4a30      	ldr	r2, [pc, #192]	@ (8000a40 <move_snake+0x114>)
 8000980:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
	        fruit.x = rand() % MATRIX_WIDTH;
 8000984:	f004 fbda 	bl	800513c <rand>
 8000988:	4603      	mov	r3, r0
 800098a:	425a      	negs	r2, r3
 800098c:	f003 0307 	and.w	r3, r3, #7
 8000990:	f002 0207 	and.w	r2, r2, #7
 8000994:	bf58      	it	pl
 8000996:	4253      	negpl	r3, r2
 8000998:	4a2b      	ldr	r2, [pc, #172]	@ (8000a48 <move_snake+0x11c>)
 800099a:	6013      	str	r3, [r2, #0]
	        fruit.y = rand() % MATRIX_HEIGHT;
 800099c:	f004 fbce 	bl	800513c <rand>
 80009a0:	4603      	mov	r3, r0
 80009a2:	425a      	negs	r2, r3
 80009a4:	f003 0307 	and.w	r3, r3, #7
 80009a8:	f002 0207 	and.w	r2, r2, #7
 80009ac:	bf58      	it	pl
 80009ae:	4253      	negpl	r3, r2
 80009b0:	4a25      	ldr	r2, [pc, #148]	@ (8000a48 <move_snake+0x11c>)
 80009b2:	6053      	str	r3, [r2, #4]
	        const char *msg = "Snake ate food\r\n";
 80009b4:	4b25      	ldr	r3, [pc, #148]	@ (8000a4c <move_snake+0x120>)
 80009b6:	643b      	str	r3, [r7, #64]	@ 0x40
	        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80009b8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80009ba:	f7ff fc09 	bl	80001d0 <strlen>
 80009be:	4603      	mov	r3, r0
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295
 80009c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80009c8:	4821      	ldr	r0, [pc, #132]	@ (8000a50 <move_snake+0x124>)
 80009ca:	f003 feb7 	bl	800473c <HAL_UART_Transmit>
	}

	    for (int i = snake.length - 1; i > 0; i--) {
 80009ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000a40 <move_snake+0x114>)
 80009d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80009d4:	3b01      	subs	r3, #1
 80009d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80009d8:	e00f      	b.n	80009fa <move_snake+0xce>
			snake.body[i] = snake.body[i - 1];
 80009da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009dc:	1e5a      	subs	r2, r3, #1
 80009de:	4818      	ldr	r0, [pc, #96]	@ (8000a40 <move_snake+0x114>)
 80009e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009e2:	4917      	ldr	r1, [pc, #92]	@ (8000a40 <move_snake+0x114>)
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	4403      	add	r3, r0
 80009e8:	00d2      	lsls	r2, r2, #3
 80009ea:	440a      	add	r2, r1
 80009ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009f0:	e883 0003 	stmia.w	r3, {r0, r1}
	    for (int i = snake.length - 1; i > 0; i--) {
 80009f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009f6:	3b01      	subs	r3, #1
 80009f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80009fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	dcec      	bgt.n	80009da <move_snake+0xae>
		}




	    snake.body[0] = new_head;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <move_snake+0x114>)
 8000a02:	461a      	mov	r2, r3
 8000a04:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a08:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a0c:	e882 0003 	stmia.w	r2, {r0, r1}
	    // Debugging: Print the new head position
	    char debug_msg[50];
	    sprintf(debug_msg, "Moved Snake to: x=%d, y=%d\r\n", new_head.x, new_head.y);
 8000a10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a14:	1d38      	adds	r0, r7, #4
 8000a16:	490f      	ldr	r1, [pc, #60]	@ (8000a54 <move_snake+0x128>)
 8000a18:	f004 fc90 	bl	800533c <siprintf>
	    HAL_UART_Transmit(&huart2, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fbd6 	bl	80001d0 <strlen>
 8000a24:	4603      	mov	r3, r0
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	1d39      	adds	r1, r7, #4
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2e:	4808      	ldr	r0, [pc, #32]	@ (8000a50 <move_snake+0x124>)
 8000a30:	f003 fe84 	bl	800473c <HAL_UART_Transmit>
 8000a34:	e000      	b.n	8000a38 <move_snake+0x10c>
	        return;
 8000a36:	bf00      	nop
}
 8000a38:	3748      	adds	r7, #72	@ 0x48
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200000cc 	.word	0x200000cc
 8000a44:	200002d8 	.word	0x200002d8
 8000a48:	200000c4 	.word	0x200000c4
 8000a4c:	08006584 	.word	0x08006584
 8000a50:	200003e4 	.word	0x200003e4
 8000a54:	08006598 	.word	0x08006598

08000a58 <update_direction>:
 *
 * This function changes the snake's direction to move towards the fruit.
 * The direction is updated based on the current position of the snake's head
 * and the position of the fruit.
 */
void update_direction() {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b090      	sub	sp, #64	@ 0x40
 8000a5c:	af00      	add	r7, sp, #0
	 Point new_direction = read_input();
 8000a5e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 f9c4 	bl	8000df0 <read_input>

	    // Debugging: Print the new direction
	    char debug_msg[50];
	    sprintf(debug_msg, "New Direction: x=%d, y=%d\r\n", new_direction.x, new_direction.y);
 8000a68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a6c:	1d38      	adds	r0, r7, #4
 8000a6e:	492f      	ldr	r1, [pc, #188]	@ (8000b2c <update_direction+0xd4>)
 8000a70:	f004 fc64 	bl	800533c <siprintf>
	    HAL_UART_Transmit(&huart2, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fbaa 	bl	80001d0 <strlen>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	1d39      	adds	r1, r7, #4
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
 8000a86:	482a      	ldr	r0, [pc, #168]	@ (8000b30 <update_direction+0xd8>)
 8000a88:	f003 fe58 	bl	800473c <HAL_UART_Transmit>

	    // Ensure the snake does not reverse direction
	    if ((new_direction.x != -snake.direction.x) && (new_direction.y != -snake.direction.y) &&
 8000a8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a8e:	4b29      	ldr	r3, [pc, #164]	@ (8000b34 <update_direction+0xdc>)
 8000a90:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000a94:	425b      	negs	r3, r3
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d02c      	beq.n	8000af4 <update_direction+0x9c>
 8000a9a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000a9c:	4b25      	ldr	r3, [pc, #148]	@ (8000b34 <update_direction+0xdc>)
 8000a9e:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8000aa2:	425b      	negs	r3, r3
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d025      	beq.n	8000af4 <update_direction+0x9c>
	        (new_direction.x != 0 || new_direction.y != 0)) {
 8000aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
	    if ((new_direction.x != -snake.direction.x) && (new_direction.y != -snake.direction.y) &&
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d102      	bne.n	8000ab4 <update_direction+0x5c>
	        (new_direction.x != 0 || new_direction.y != 0)) {
 8000aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d01f      	beq.n	8000af4 <update_direction+0x9c>
	        snake.direction = new_direction;
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b34 <update_direction+0xdc>)
 8000ab6:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8000aba:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000abe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ac2:	e883 0003 	stmia.w	r3, {r0, r1}

	        // Debugging: Print the updated snake direction
	        sprintf(debug_msg, "Updated Snake Direction: x=%d, y=%d\r\n", snake.direction.x, snake.direction.y);
 8000ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b34 <update_direction+0xdc>)
 8000ac8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000acc:	4b19      	ldr	r3, [pc, #100]	@ (8000b34 <update_direction+0xdc>)
 8000ace:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8000ad2:	1d38      	adds	r0, r7, #4
 8000ad4:	4918      	ldr	r1, [pc, #96]	@ (8000b38 <update_direction+0xe0>)
 8000ad6:	f004 fc31 	bl	800533c <siprintf>
	        HAL_UART_Transmit(&huart2, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fb77 	bl	80001d0 <strlen>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	1d39      	adds	r1, r7, #4
 8000ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aec:	4810      	ldr	r0, [pc, #64]	@ (8000b30 <update_direction+0xd8>)
 8000aee:	f003 fe25 	bl	800473c <HAL_UART_Transmit>
 8000af2:	e016      	b.n	8000b22 <update_direction+0xca>
	    } else {
	        // Debugging: Print a message if the direction is not updated
	        sprintf(debug_msg, "Direction not updated: x=%d, y=%d\r\n", snake.direction.x, snake.direction.y);
 8000af4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b34 <update_direction+0xdc>)
 8000af6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000afa:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <update_direction+0xdc>)
 8000afc:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8000b00:	1d38      	adds	r0, r7, #4
 8000b02:	490e      	ldr	r1, [pc, #56]	@ (8000b3c <update_direction+0xe4>)
 8000b04:	f004 fc1a 	bl	800533c <siprintf>
	        HAL_UART_Transmit(&huart2, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff fb60 	bl	80001d0 <strlen>
 8000b10:	4603      	mov	r3, r0
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	1d39      	adds	r1, r7, #4
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1a:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <update_direction+0xd8>)
 8000b1c:	f003 fe0e 	bl	800473c <HAL_UART_Transmit>
	    }
}
 8000b20:	bf00      	nop
 8000b22:	bf00      	nop
 8000b24:	3740      	adds	r7, #64	@ 0x40
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	080065b8 	.word	0x080065b8
 8000b30:	200003e4 	.word	0x200003e4
 8000b34:	200000cc 	.word	0x200000cc
 8000b38:	080065d4 	.word	0x080065d4
 8000b3c:	080065fc 	.word	0x080065fc

08000b40 <display_game>:
 * @brief Displays the current game state on the LED matrix.
 *
 * This function clears the LED matrix and sets the pixels for the snake's body
 * and the fruit. It then updates the LED matrix to reflect the current game state.
 */
void display_game() {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
    LED_Clear();
 8000b46:	f7ff fd69 	bl	800061c <LED_Clear>
    for (int i = 0; i < snake.length; i++) {
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	e00f      	b.n	8000b70 <display_game+0x30>
        LED_SetPixel(snake.body[i].x, snake.body[i].y, 1);
 8000b50:	4a11      	ldr	r2, [pc, #68]	@ (8000b98 <display_game+0x58>)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000b58:	4a0f      	ldr	r2, [pc, #60]	@ (8000b98 <display_game+0x58>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	4413      	add	r3, r2
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	2201      	movs	r2, #1
 8000b64:	4619      	mov	r1, r3
 8000b66:	f7ff fd7f 	bl	8000668 <LED_SetPixel>
    for (int i = 0; i < snake.length; i++) {
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	4b09      	ldr	r3, [pc, #36]	@ (8000b98 <display_game+0x58>)
 8000b72:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	dbe9      	blt.n	8000b50 <display_game+0x10>
    }
    LED_SetPixel(fruit.x, fruit.y, 1);
 8000b7c:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <display_game+0x5c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a06      	ldr	r2, [pc, #24]	@ (8000b9c <display_game+0x5c>)
 8000b82:	6851      	ldr	r1, [r2, #4]
 8000b84:	2201      	movs	r2, #1
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fd6e 	bl	8000668 <LED_SetPixel>
    LED_Update();
 8000b8c:	f7ff fdc8 	bl	8000720 <LED_Update>
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200000cc 	.word	0x200000cc
 8000b9c:	200000c4 	.word	0x200000c4

08000ba0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b088      	sub	sp, #32
 8000ba4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba6:	f107 030c 	add.w	r3, r7, #12
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb6:	4b24      	ldr	r3, [pc, #144]	@ (8000c48 <MX_GPIO_Init+0xa8>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bba:	4a23      	ldr	r2, [pc, #140]	@ (8000c48 <MX_GPIO_Init+0xa8>)
 8000bbc:	f043 0304 	orr.w	r3, r3, #4
 8000bc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bc2:	4b21      	ldr	r3, [pc, #132]	@ (8000c48 <MX_GPIO_Init+0xa8>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b1e      	ldr	r3, [pc, #120]	@ (8000c48 <MX_GPIO_Init+0xa8>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd2:	4a1d      	ldr	r2, [pc, #116]	@ (8000c48 <MX_GPIO_Init+0xa8>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bda:	4b1b      	ldr	r3, [pc, #108]	@ (8000c48 <MX_GPIO_Init+0xa8>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be6:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <MX_GPIO_Init+0xa8>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bea:	4a17      	ldr	r2, [pc, #92]	@ (8000c48 <MX_GPIO_Init+0xa8>)
 8000bec:	f043 0302 	orr.w	r3, r3, #2
 8000bf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bf2:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <MX_GPIO_Init+0xa8>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf6:	f003 0302 	and.w	r3, r3, #2
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2101      	movs	r1, #1
 8000c02:	4812      	ldr	r0, [pc, #72]	@ (8000c4c <MX_GPIO_Init+0xac>)
 8000c04:	f001 f86c 	bl	8001ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c08:	2308      	movs	r3, #8
 8000c0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 030c 	add.w	r3, r7, #12
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c1e:	f000 fef5 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000c22:	2301      	movs	r3, #1
 8000c24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	4619      	mov	r1, r3
 8000c38:	4804      	ldr	r0, [pc, #16]	@ (8000c4c <MX_GPIO_Init+0xac>)
 8000c3a:	f000 fee7 	bl	8001a0c <HAL_GPIO_Init>

}
 8000c3e:	bf00      	nop
 8000c40:	3720      	adds	r7, #32
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	48000400 	.word	0x48000400

08000c50 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c54:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc4 <MX_I2C1_Init+0x74>)
 8000c56:	4a1c      	ldr	r2, [pc, #112]	@ (8000cc8 <MX_I2C1_Init+0x78>)
 8000c58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc4 <MX_I2C1_Init+0x74>)
 8000c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ccc <MX_I2C1_Init+0x7c>)
 8000c5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c60:	4b18      	ldr	r3, [pc, #96]	@ (8000cc4 <MX_I2C1_Init+0x74>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c66:	4b17      	ldr	r3, [pc, #92]	@ (8000cc4 <MX_I2C1_Init+0x74>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c6c:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <MX_I2C1_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c72:	4b14      	ldr	r3, [pc, #80]	@ (8000cc4 <MX_I2C1_Init+0x74>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c78:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <MX_I2C1_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <MX_I2C1_Init+0x74>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <MX_I2C1_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c8a:	480e      	ldr	r0, [pc, #56]	@ (8000cc4 <MX_I2C1_Init+0x74>)
 8000c8c:	f001 f840 	bl	8001d10 <HAL_I2C_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c96:	f000 fa6b 	bl	8001170 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4809      	ldr	r0, [pc, #36]	@ (8000cc4 <MX_I2C1_Init+0x74>)
 8000c9e:	f001 fdc3 	bl	8002828 <HAL_I2CEx_ConfigAnalogFilter>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ca8:	f000 fa62 	bl	8001170 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cac:	2100      	movs	r1, #0
 8000cae:	4805      	ldr	r0, [pc, #20]	@ (8000cc4 <MX_I2C1_Init+0x74>)
 8000cb0:	f001 fe05 	bl	80028be <HAL_I2CEx_ConfigDigitalFilter>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cba:	f000 fa59 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200002dc 	.word	0x200002dc
 8000cc8:	40005400 	.word	0x40005400
 8000ccc:	00b07cb4 	.word	0x00b07cb4

08000cd0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b09e      	sub	sp, #120	@ 0x78
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ce8:	f107 0310 	add.w	r3, r7, #16
 8000cec:	2254      	movs	r2, #84	@ 0x54
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f004 fb86 	bl	8005402 <memset>
  if(i2cHandle->Instance==I2C1)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8000d74 <HAL_I2C_MspInit+0xa4>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d135      	bne.n	8000d6c <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d00:	2340      	movs	r3, #64	@ 0x40
 8000d02:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d08:	f107 0310 	add.w	r3, r7, #16
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f002 fccf 	bl	80036b0 <HAL_RCCEx_PeriphCLKConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d18:	f000 fa2a 	bl	8001170 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1c:	4b16      	ldr	r3, [pc, #88]	@ (8000d78 <HAL_I2C_MspInit+0xa8>)
 8000d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d20:	4a15      	ldr	r2, [pc, #84]	@ (8000d78 <HAL_I2C_MspInit+0xa8>)
 8000d22:	f043 0302 	orr.w	r3, r3, #2
 8000d26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d28:	4b13      	ldr	r3, [pc, #76]	@ (8000d78 <HAL_I2C_MspInit+0xa8>)
 8000d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2c:	f003 0302 	and.w	r3, r3, #2
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d34:	23c0      	movs	r3, #192	@ 0xc0
 8000d36:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d38:	2312      	movs	r3, #18
 8000d3a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d44:	2304      	movs	r3, #4
 8000d46:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d48:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480b      	ldr	r0, [pc, #44]	@ (8000d7c <HAL_I2C_MspInit+0xac>)
 8000d50:	f000 fe5c 	bl	8001a0c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d54:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <HAL_I2C_MspInit+0xa8>)
 8000d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d58:	4a07      	ldr	r2, [pc, #28]	@ (8000d78 <HAL_I2C_MspInit+0xa8>)
 8000d5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d60:	4b05      	ldr	r3, [pc, #20]	@ (8000d78 <HAL_I2C_MspInit+0xa8>)
 8000d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d6c:	bf00      	nop
 8000d6e:	3778      	adds	r7, #120	@ 0x78
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40005400 	.word	0x40005400
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	48000400 	.word	0x48000400

08000d80 <PCA9538A_Init>:
#include <stdio.h>
#include <time.h>
#include <stdint.h>

// Function to initialize the I/O expander
void PCA9538A_Init(void) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af04      	add	r7, sp, #16
    uint8_t config_data = 0xFF;  // Set all pins as inputs (0xFF means all bits are 1)
 8000d86:	23ff      	movs	r3, #255	@ 0xff
 8000d88:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, PCA9538A_ADDR_WRITE, 0x03, I2C_MEMADD_SIZE_8BIT, &config_data, 1, HAL_MAX_DELAY);
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8e:	9302      	str	r3, [sp, #8]
 8000d90:	2301      	movs	r3, #1
 8000d92:	9301      	str	r3, [sp, #4]
 8000d94:	1dfb      	adds	r3, r7, #7
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	2301      	movs	r3, #1
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	21e1      	movs	r1, #225	@ 0xe1
 8000d9e:	4803      	ldr	r0, [pc, #12]	@ (8000dac <PCA9538A_Init+0x2c>)
 8000da0:	f001 f852 	bl	8001e48 <HAL_I2C_Mem_Write>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	200002dc 	.word	0x200002dc

08000db0 <PCA9538A_ReadInput>:

// Function to read the input port register (00h)
uint8_t PCA9538A_ReadInput(void) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af04      	add	r7, sp, #16
    uint8_t input_data = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, PCA9538A_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, &input_data, 1, HAL_MAX_DELAY);
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbe:	9302      	str	r3, [sp, #8]
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	9301      	str	r3, [sp, #4]
 8000dc4:	1dbb      	adds	r3, r7, #6
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	2301      	movs	r3, #1
 8000dca:	2200      	movs	r2, #0
 8000dcc:	21e0      	movs	r1, #224	@ 0xe0
 8000dce:	4807      	ldr	r0, [pc, #28]	@ (8000dec <PCA9538A_ReadInput+0x3c>)
 8000dd0:	f001 f94e 	bl	8002070 <HAL_I2C_Mem_Read>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	71fb      	strb	r3, [r7, #7]


    if (status == HAL_OK) {
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <PCA9538A_ReadInput+0x32>
        return input_data;  // Return the input data (joystick values)
 8000dde:	79bb      	ldrb	r3, [r7, #6]
 8000de0:	e000      	b.n	8000de4 <PCA9538A_ReadInput+0x34>
    } else {
        return 0xFF;  // Return an error code if the read fails
 8000de2:	23ff      	movs	r3, #255	@ 0xff
    }
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	200002dc 	.word	0x200002dc

08000df0 <read_input>:
 * The direction is represented as a Point where x and y can be -1, 0, or 1.
 *
 * @return Point The direction based on the joystick input.
 */

Point read_input(void) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b0a4      	sub	sp, #144	@ 0x90
 8000df4:	af04      	add	r7, sp, #16
 8000df6:	6078      	str	r0, [r7, #4]
    Point direction = {0, 0};
 8000df8:	2300      	movs	r3, #0
 8000dfa:	677b      	str	r3, [r7, #116]	@ 0x74
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	67bb      	str	r3, [r7, #120]	@ 0x78
    uint8_t joystick_input = PCA9538A_ReadInput();
 8000e00:	f7ff ffd6 	bl	8000db0 <PCA9538A_ReadInput>
 8000e04:	4603      	mov	r3, r0
 8000e06:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e

    // Print raw input
    char debug_msg[50];
    sprintf(debug_msg, "Raw Joystick Input: 0x%02X\r\n", joystick_input);
 8000e0a:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8000e0e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e12:	496e      	ldr	r1, [pc, #440]	@ (8000fcc <read_input+0x1dc>)
 8000e14:	4618      	mov	r0, r3
 8000e16:	f004 fa91 	bl	800533c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 8000e1a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff f9d6 	bl	80001d0 <strlen>
 8000e24:	4603      	mov	r3, r0
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8000e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e30:	4867      	ldr	r0, [pc, #412]	@ (8000fd0 <read_input+0x1e0>)
 8000e32:	f003 fc83 	bl	800473c <HAL_UART_Transmit>

    // Ignore invalid input 0x1F
    if (joystick_input == 0x1F) {
 8000e36:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000e3a:	2b1f      	cmp	r3, #31
 8000e3c:	d10f      	bne.n	8000e5e <read_input+0x6e>
        HAL_UART_Transmit(&huart2, (uint8_t*)"Ignoring invalid input 0x1F\r\n", 29, HAL_MAX_DELAY);
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e42:	221d      	movs	r2, #29
 8000e44:	4963      	ldr	r1, [pc, #396]	@ (8000fd4 <read_input+0x1e4>)
 8000e46:	4862      	ldr	r0, [pc, #392]	@ (8000fd0 <read_input+0x1e0>)
 8000e48:	f003 fc78 	bl	800473c <HAL_UART_Transmit>
        return direction;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000e54:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e58:	e882 0003 	stmia.w	r2, {r0, r1}
 8000e5c:	e0b2      	b.n	8000fc4 <read_input+0x1d4>
    }

    HAL_StatusTypeDef i2c_status;

    if (joystick_input == JOY_DOWN) {
 8000e5e:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000e62:	2b0f      	cmp	r3, #15
 8000e64:	d11f      	bne.n	8000ea6 <read_input+0xb6>
        HAL_UART_Transmit(&huart2, (uint8_t*)"Direction: down\r\n", 17, HAL_MAX_DELAY);
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6a:	2211      	movs	r2, #17
 8000e6c:	495a      	ldr	r1, [pc, #360]	@ (8000fd8 <read_input+0x1e8>)
 8000e6e:	4858      	ldr	r0, [pc, #352]	@ (8000fd0 <read_input+0x1e0>)
 8000e70:	f003 fc64 	bl	800473c <HAL_UART_Transmit>
        uint8_t data = JOY_DOWN;
 8000e74:	230f      	movs	r3, #15
 8000e76:	72fb      	strb	r3, [r7, #11]
        i2c_status = HAL_I2C_Mem_Write(&hi2c1, PCA9538A_ADDR_WRITE, 0x03, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8000e78:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7c:	9302      	str	r3, [sp, #8]
 8000e7e:	2301      	movs	r3, #1
 8000e80:	9301      	str	r3, [sp, #4]
 8000e82:	f107 030b 	add.w	r3, r7, #11
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	2301      	movs	r3, #1
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	21e1      	movs	r1, #225	@ 0xe1
 8000e8e:	4853      	ldr	r0, [pc, #332]	@ (8000fdc <read_input+0x1ec>)
 8000e90:	f000 ffda 	bl	8001e48 <HAL_I2C_Mem_Write>
 8000e94:	4603      	mov	r3, r0
 8000e96:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        direction.x = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	677b      	str	r3, [r7, #116]	@ 0x74
        direction.y = -1;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000ea4:	e070      	b.n	8000f88 <read_input+0x198>
    }
    else if (joystick_input == JOY_RIGHT) {
 8000ea6:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000eaa:	2b17      	cmp	r3, #23
 8000eac:	d11e      	bne.n	8000eec <read_input+0xfc>
        HAL_UART_Transmit(&huart2, (uint8_t*)"Direction: right\r\n", 18, HAL_MAX_DELAY);
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb2:	2212      	movs	r2, #18
 8000eb4:	494a      	ldr	r1, [pc, #296]	@ (8000fe0 <read_input+0x1f0>)
 8000eb6:	4846      	ldr	r0, [pc, #280]	@ (8000fd0 <read_input+0x1e0>)
 8000eb8:	f003 fc40 	bl	800473c <HAL_UART_Transmit>
        uint8_t data = JOY_RIGHT;
 8000ebc:	2317      	movs	r3, #23
 8000ebe:	72bb      	strb	r3, [r7, #10]
        i2c_status = HAL_I2C_Mem_Write(&hi2c1, PCA9538A_ADDR_WRITE, 0x03, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec4:	9302      	str	r3, [sp, #8]
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	9301      	str	r3, [sp, #4]
 8000eca:	f107 030a 	add.w	r3, r7, #10
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	21e1      	movs	r1, #225	@ 0xe1
 8000ed6:	4841      	ldr	r0, [pc, #260]	@ (8000fdc <read_input+0x1ec>)
 8000ed8:	f000 ffb6 	bl	8001e48 <HAL_I2C_Mem_Write>
 8000edc:	4603      	mov	r3, r0
 8000ede:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        direction.x = 1;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	677b      	str	r3, [r7, #116]	@ 0x74
        direction.y = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000eea:	e04d      	b.n	8000f88 <read_input+0x198>
    }
    else if (joystick_input == JOY_LEFT) {
 8000eec:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000ef0:	2b1b      	cmp	r3, #27
 8000ef2:	d11f      	bne.n	8000f34 <read_input+0x144>
        HAL_UART_Transmit(&huart2, (uint8_t*)"Direction: left\r\n", 17, HAL_MAX_DELAY);
 8000ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef8:	2211      	movs	r2, #17
 8000efa:	493a      	ldr	r1, [pc, #232]	@ (8000fe4 <read_input+0x1f4>)
 8000efc:	4834      	ldr	r0, [pc, #208]	@ (8000fd0 <read_input+0x1e0>)
 8000efe:	f003 fc1d 	bl	800473c <HAL_UART_Transmit>
        uint8_t data = JOY_LEFT;
 8000f02:	231b      	movs	r3, #27
 8000f04:	727b      	strb	r3, [r7, #9]
        i2c_status = HAL_I2C_Mem_Write(&hi2c1, PCA9538A_ADDR_WRITE, 0x03, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	9302      	str	r3, [sp, #8]
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	9301      	str	r3, [sp, #4]
 8000f10:	f107 0309 	add.w	r3, r7, #9
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	2301      	movs	r3, #1
 8000f18:	2203      	movs	r2, #3
 8000f1a:	21e1      	movs	r1, #225	@ 0xe1
 8000f1c:	482f      	ldr	r0, [pc, #188]	@ (8000fdc <read_input+0x1ec>)
 8000f1e:	f000 ff93 	bl	8001e48 <HAL_I2C_Mem_Write>
 8000f22:	4603      	mov	r3, r0
 8000f24:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        direction.x = -1;
 8000f28:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2c:	677b      	str	r3, [r7, #116]	@ 0x74
        direction.y = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000f32:	e029      	b.n	8000f88 <read_input+0x198>
    }
    else if (joystick_input == JOY_UP) {
 8000f34:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000f38:	2b1e      	cmp	r3, #30
 8000f3a:	d11e      	bne.n	8000f7a <read_input+0x18a>
        HAL_UART_Transmit(&huart2, (uint8_t*)"Direction: up\r\n", 15, HAL_MAX_DELAY);
 8000f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f40:	220f      	movs	r2, #15
 8000f42:	4929      	ldr	r1, [pc, #164]	@ (8000fe8 <read_input+0x1f8>)
 8000f44:	4822      	ldr	r0, [pc, #136]	@ (8000fd0 <read_input+0x1e0>)
 8000f46:	f003 fbf9 	bl	800473c <HAL_UART_Transmit>
        uint8_t data = JOY_UP;
 8000f4a:	231e      	movs	r3, #30
 8000f4c:	723b      	strb	r3, [r7, #8]
        i2c_status = HAL_I2C_Mem_Write(&hi2c1, PCA9538A_ADDR_WRITE, 0x03, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f52:	9302      	str	r3, [sp, #8]
 8000f54:	2301      	movs	r3, #1
 8000f56:	9301      	str	r3, [sp, #4]
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2301      	movs	r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	21e1      	movs	r1, #225	@ 0xe1
 8000f64:	481d      	ldr	r0, [pc, #116]	@ (8000fdc <read_input+0x1ec>)
 8000f66:	f000 ff6f 	bl	8001e48 <HAL_I2C_Mem_Write>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        direction.x = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	677b      	str	r3, [r7, #116]	@ 0x74
        direction.y = 1;
 8000f74:	2301      	movs	r3, #1
 8000f76:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000f78:	e006      	b.n	8000f88 <read_input+0x198>
    }
    else {
        HAL_UART_Transmit(&huart2, (uint8_t*)"Invalid input\r\n", 15, HAL_MAX_DELAY);
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7e:	220f      	movs	r2, #15
 8000f80:	491a      	ldr	r1, [pc, #104]	@ (8000fec <read_input+0x1fc>)
 8000f82:	4813      	ldr	r0, [pc, #76]	@ (8000fd0 <read_input+0x1e0>)
 8000f84:	f003 fbda 	bl	800473c <HAL_UART_Transmit>
    }

    // Debug: Check I2C write success
    char i2c_debug_msg[50];
    sprintf(i2c_debug_msg, "I2C Write Status: %d\r\n", i2c_status);
 8000f88:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	4917      	ldr	r1, [pc, #92]	@ (8000ff0 <read_input+0x200>)
 8000f92:	4618      	mov	r0, r3
 8000f94:	f004 f9d2 	bl	800533c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)i2c_debug_msg, strlen(i2c_debug_msg), HAL_MAX_DELAY);
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff f917 	bl	80001d0 <strlen>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	f107 010c 	add.w	r1, r7, #12
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	4808      	ldr	r0, [pc, #32]	@ (8000fd0 <read_input+0x1e0>)
 8000fb0:	f003 fbc4 	bl	800473c <HAL_UART_Transmit>

    return direction;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000fbc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000fc0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	3780      	adds	r7, #128	@ 0x80
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	08006620 	.word	0x08006620
 8000fd0:	200003e4 	.word	0x200003e4
 8000fd4:	08006640 	.word	0x08006640
 8000fd8:	08006660 	.word	0x08006660
 8000fdc:	200002dc 	.word	0x200002dc
 8000fe0:	08006674 	.word	0x08006674
 8000fe4:	08006688 	.word	0x08006688
 8000fe8:	0800669c 	.word	0x0800669c
 8000fec:	080066ac 	.word	0x080066ac
 8000ff0:	080066bc 	.word	0x080066bc

08000ff4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
    srand(time(NULL));
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f004 fa0a 	bl	8005414 <time>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4613      	mov	r3, r2
 8001006:	4618      	mov	r0, r3
 8001008:	f004 f86a 	bl	80050e0 <srand>
    const char *msg = "Starting Snake Game\r\n";
 800100c:	4b23      	ldr	r3, [pc, #140]	@ (800109c <main+0xa8>)
 800100e:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001010:	f000 fb7d 	bl	800170e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001014:	f000 f84a 	bl	80010ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001018:	f7ff fdc2 	bl	8000ba0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800101c:	f000 fab4 	bl	8001588 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001020:	f000 f8ac 	bl	800117c <MX_SPI1_Init>
  MX_I2C1_Init();
 8001024:	f7ff fe14 	bl	8000c50 <MX_I2C1_Init>
  MX_TIM7_Init();
 8001028:	f000 fa56 	bl	80014d8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  welcome_animation();
 800102c:	f7ff fbb4 	bl	8000798 <welcome_animation>
  init_game();
 8001030:	f7ff fbde 	bl	80007f0 <init_game>
  PCA9538A_Init();
 8001034:	f7ff fea4 	bl	8000d80 <PCA9538A_Init>
  MAX7219_Init();
 8001038:	f7ff fac0 	bl	80005bc <MAX7219_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Wait for button press to start the game
	       while (1) {
	           uint8_t joystick_input = PCA9538A_ReadInput();
 800103c:	f7ff feb8 	bl	8000db0 <PCA9538A_ReadInput>
 8001040:	4603      	mov	r3, r0
 8001042:	70fb      	strb	r3, [r7, #3]
	           if (joystick_input == JOY_BUTTON) {
 8001044:	78fb      	ldrb	r3, [r7, #3]
 8001046:	2b1d      	cmp	r3, #29
 8001048:	d111      	bne.n	800106e <main+0x7a>
	        	   HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff f8c0 	bl	80001d0 <strlen>
 8001050:	4603      	mov	r3, r0
 8001052:	b29a      	uxth	r2, r3
 8001054:	f04f 33ff 	mov.w	r3, #4294967295
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	4811      	ldr	r0, [pc, #68]	@ (80010a0 <main+0xac>)
 800105c:	f003 fb6e 	bl	800473c <HAL_UART_Transmit>
	        	   HAL_TIM_Base_Start_IT(&htim7);
 8001060:	4810      	ldr	r0, [pc, #64]	@ (80010a4 <main+0xb0>)
 8001062:	f003 f9f3 	bl	800444c <HAL_TIM_Base_Start_IT>
	               init_game();
 8001066:	f7ff fbc3 	bl	80007f0 <init_game>
	               break;
 800106a:	bf00      	nop
	           }
	           HAL_Delay(100); // Polling delay
	       }

	       // Game loop
	       while (!game_over) {
 800106c:	e00d      	b.n	800108a <main+0x96>
	           HAL_Delay(100); // Polling delay
 800106e:	2064      	movs	r0, #100	@ 0x64
 8001070:	f000 fbc2 	bl	80017f8 <HAL_Delay>
	       while (1) {
 8001074:	e7e2      	b.n	800103c <main+0x48>
	    	   update_direction();
 8001076:	f7ff fcef 	bl	8000a58 <update_direction>
	           move_snake();
 800107a:	f7ff fc57 	bl	800092c <move_snake>
	           display_game();
 800107e:	f7ff fd5f 	bl	8000b40 <display_game>
	           HAL_Delay(500);
 8001082:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001086:	f000 fbb7 	bl	80017f8 <HAL_Delay>
	       while (!game_over) {
 800108a:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <main+0xb4>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d0f1      	beq.n	8001076 <main+0x82>

	       }
	       HAL_TIM_Base_Start_IT(&htim7);
 8001092:	4804      	ldr	r0, [pc, #16]	@ (80010a4 <main+0xb0>)
 8001094:	f003 f9da 	bl	800444c <HAL_TIM_Base_Start_IT>
  while (1)
 8001098:	e7d0      	b.n	800103c <main+0x48>
 800109a:	bf00      	nop
 800109c:	080066d4 	.word	0x080066d4
 80010a0:	200003e4 	.word	0x200003e4
 80010a4:	20000398 	.word	0x20000398
 80010a8:	200002d8 	.word	0x200002d8

080010ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b096      	sub	sp, #88	@ 0x58
 80010b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	2244      	movs	r2, #68	@ 0x44
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f004 f9a1 	bl	8005402 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c0:	463b      	mov	r3, r7
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
 80010cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010ce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010d2:	f001 fc5f 	bl	8002994 <HAL_PWREx_ControlVoltageScaling>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010dc:	f000 f848 	bl	8001170 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010e0:	f001 fc3a 	bl	8002958 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010e4:	4b21      	ldr	r3, [pc, #132]	@ (800116c <SystemClock_Config+0xc0>)
 80010e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010ea:	4a20      	ldr	r2, [pc, #128]	@ (800116c <SystemClock_Config+0xc0>)
 80010ec:	f023 0318 	bic.w	r3, r3, #24
 80010f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80010f4:	2314      	movs	r3, #20
 80010f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010f8:	2301      	movs	r3, #1
 80010fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010fc:	2301      	movs	r3, #1
 80010fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001104:	2360      	movs	r3, #96	@ 0x60
 8001106:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001108:	2302      	movs	r3, #2
 800110a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800110c:	2301      	movs	r3, #1
 800110e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001110:	2301      	movs	r3, #1
 8001112:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001114:	2310      	movs	r3, #16
 8001116:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001118:	2307      	movs	r3, #7
 800111a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800111c:	2302      	movs	r3, #2
 800111e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001120:	2302      	movs	r3, #2
 8001122:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	4618      	mov	r0, r3
 800112a:	f001 fc89 	bl	8002a40 <HAL_RCC_OscConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001134:	f000 f81c 	bl	8001170 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001138:	230f      	movs	r3, #15
 800113a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800113c:	2303      	movs	r3, #3
 800113e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800114c:	463b      	mov	r3, r7
 800114e:	2101      	movs	r1, #1
 8001150:	4618      	mov	r0, r3
 8001152:	f002 f889 	bl	8003268 <HAL_RCC_ClockConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800115c:	f000 f808 	bl	8001170 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001160:	f002 fc9c 	bl	8003a9c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001164:	bf00      	nop
 8001166:	3758      	adds	r7, #88	@ 0x58
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40021000 	.word	0x40021000

08001170 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001174:	b672      	cpsid	i
}
 8001176:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <Error_Handler+0x8>

0800117c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001180:	4b1b      	ldr	r3, [pc, #108]	@ (80011f0 <MX_SPI1_Init+0x74>)
 8001182:	4a1c      	ldr	r2, [pc, #112]	@ (80011f4 <MX_SPI1_Init+0x78>)
 8001184:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001186:	4b1a      	ldr	r3, [pc, #104]	@ (80011f0 <MX_SPI1_Init+0x74>)
 8001188:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800118c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800118e:	4b18      	ldr	r3, [pc, #96]	@ (80011f0 <MX_SPI1_Init+0x74>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001194:	4b16      	ldr	r3, [pc, #88]	@ (80011f0 <MX_SPI1_Init+0x74>)
 8001196:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800119a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800119c:	4b14      	ldr	r3, [pc, #80]	@ (80011f0 <MX_SPI1_Init+0x74>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011a2:	4b13      	ldr	r3, [pc, #76]	@ (80011f0 <MX_SPI1_Init+0x74>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011a8:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <MX_SPI1_Init+0x74>)
 80011aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	@ (80011f0 <MX_SPI1_Init+0x74>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	@ (80011f0 <MX_SPI1_Init+0x74>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011bc:	4b0c      	ldr	r3, [pc, #48]	@ (80011f0 <MX_SPI1_Init+0x74>)
 80011be:	2200      	movs	r2, #0
 80011c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011c2:	4b0b      	ldr	r3, [pc, #44]	@ (80011f0 <MX_SPI1_Init+0x74>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80011c8:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <MX_SPI1_Init+0x74>)
 80011ca:	2207      	movs	r2, #7
 80011cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011ce:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <MX_SPI1_Init+0x74>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011d4:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <MX_SPI1_Init+0x74>)
 80011d6:	2208      	movs	r2, #8
 80011d8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011da:	4805      	ldr	r0, [pc, #20]	@ (80011f0 <MX_SPI1_Init+0x74>)
 80011dc:	f002 fd60 	bl	8003ca0 <HAL_SPI_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80011e6:	f7ff ffc3 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000330 	.word	0x20000330
 80011f4:	40013000 	.word	0x40013000

080011f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	@ 0x28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a17      	ldr	r2, [pc, #92]	@ (8001274 <HAL_SPI_MspInit+0x7c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d127      	bne.n	800126a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800121a:	4b17      	ldr	r3, [pc, #92]	@ (8001278 <HAL_SPI_MspInit+0x80>)
 800121c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800121e:	4a16      	ldr	r2, [pc, #88]	@ (8001278 <HAL_SPI_MspInit+0x80>)
 8001220:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001224:	6613      	str	r3, [r2, #96]	@ 0x60
 8001226:	4b14      	ldr	r3, [pc, #80]	@ (8001278 <HAL_SPI_MspInit+0x80>)
 8001228:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800122a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001232:	4b11      	ldr	r3, [pc, #68]	@ (8001278 <HAL_SPI_MspInit+0x80>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001236:	4a10      	ldr	r2, [pc, #64]	@ (8001278 <HAL_SPI_MspInit+0x80>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800123e:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <HAL_SPI_MspInit+0x80>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800124a:	2338      	movs	r3, #56	@ 0x38
 800124c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001256:	2303      	movs	r3, #3
 8001258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800125a:	2305      	movs	r3, #5
 800125c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	4805      	ldr	r0, [pc, #20]	@ (800127c <HAL_SPI_MspInit+0x84>)
 8001266:	f000 fbd1 	bl	8001a0c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	@ 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40013000 	.word	0x40013000
 8001278:	40021000 	.word	0x40021000
 800127c:	48000400 	.word	0x48000400

08001280 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	4b0f      	ldr	r3, [pc, #60]	@ (80012c4 <HAL_MspInit+0x44>)
 8001288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800128a:	4a0e      	ldr	r2, [pc, #56]	@ (80012c4 <HAL_MspInit+0x44>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6613      	str	r3, [r2, #96]	@ 0x60
 8001292:	4b0c      	ldr	r3, [pc, #48]	@ (80012c4 <HAL_MspInit+0x44>)
 8001294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129e:	4b09      	ldr	r3, [pc, #36]	@ (80012c4 <HAL_MspInit+0x44>)
 80012a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a2:	4a08      	ldr	r2, [pc, #32]	@ (80012c4 <HAL_MspInit+0x44>)
 80012a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80012aa:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <HAL_MspInit+0x44>)
 80012ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000

080012c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <NMI_Handler+0x4>

080012d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <HardFault_Handler+0x4>

080012d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <MemManage_Handler+0x4>

080012e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <BusFault_Handler+0x4>

080012e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <UsageFault_Handler+0x4>

080012f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800131e:	f000 fa4b 	bl	80017b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}

08001326 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0
  return 1;
 800132a:	2301      	movs	r3, #1
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <_kill>:

int _kill(int pid, int sig)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001340:	f004 f8dc 	bl	80054fc <__errno>
 8001344:	4603      	mov	r3, r0
 8001346:	2216      	movs	r2, #22
 8001348:	601a      	str	r2, [r3, #0]
  return -1;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <_exit>:

void _exit (int status)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800135e:	f04f 31ff 	mov.w	r1, #4294967295
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ffe7 	bl	8001336 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <_exit+0x12>

0800136c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	e00a      	b.n	8001394 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800137e:	f3af 8000 	nop.w
 8001382:	4601      	mov	r1, r0
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	1c5a      	adds	r2, r3, #1
 8001388:	60ba      	str	r2, [r7, #8]
 800138a:	b2ca      	uxtb	r2, r1
 800138c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	3301      	adds	r3, #1
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	429a      	cmp	r2, r3
 800139a:	dbf0      	blt.n	800137e <_read+0x12>
  }

  return len;
 800139c:	687b      	ldr	r3, [r7, #4]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	60f8      	str	r0, [r7, #12]
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	e009      	b.n	80013cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	60ba      	str	r2, [r7, #8]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	3301      	adds	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	dbf1      	blt.n	80013b8 <_write+0x12>
  }
  return len;
 80013d4:	687b      	ldr	r3, [r7, #4]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <_close>:

int _close(int file)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001406:	605a      	str	r2, [r3, #4]
  return 0;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <_isatty>:

int _isatty(int file)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800141e:	2301      	movs	r3, #1
}
 8001420:	4618      	mov	r0, r3
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001450:	4a14      	ldr	r2, [pc, #80]	@ (80014a4 <_sbrk+0x5c>)
 8001452:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <_sbrk+0x60>)
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800145c:	4b13      	ldr	r3, [pc, #76]	@ (80014ac <_sbrk+0x64>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d102      	bne.n	800146a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001464:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <_sbrk+0x64>)
 8001466:	4a12      	ldr	r2, [pc, #72]	@ (80014b0 <_sbrk+0x68>)
 8001468:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800146a:	4b10      	ldr	r3, [pc, #64]	@ (80014ac <_sbrk+0x64>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	429a      	cmp	r2, r3
 8001476:	d207      	bcs.n	8001488 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001478:	f004 f840 	bl	80054fc <__errno>
 800147c:	4603      	mov	r3, r0
 800147e:	220c      	movs	r2, #12
 8001480:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001482:	f04f 33ff 	mov.w	r3, #4294967295
 8001486:	e009      	b.n	800149c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001488:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <_sbrk+0x64>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800148e:	4b07      	ldr	r3, [pc, #28]	@ (80014ac <_sbrk+0x64>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	4a05      	ldr	r2, [pc, #20]	@ (80014ac <_sbrk+0x64>)
 8001498:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800149a:	68fb      	ldr	r3, [r7, #12]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	2000c000 	.word	0x2000c000
 80014a8:	00000400 	.word	0x00000400
 80014ac:	20000394 	.word	0x20000394
 80014b0:	200005c0 	.word	0x200005c0

080014b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014b8:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <SystemInit+0x20>)
 80014ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014be:	4a05      	ldr	r2, [pc, #20]	@ (80014d4 <SystemInit+0x20>)
 80014c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80014e8:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <MX_TIM7_Init+0x68>)
 80014ea:	4a16      	ldr	r2, [pc, #88]	@ (8001544 <MX_TIM7_Init+0x6c>)
 80014ec:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 36639;
 80014ee:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <MX_TIM7_Init+0x68>)
 80014f0:	f648 721f 	movw	r2, #36639	@ 0x8f1f
 80014f4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f6:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <MX_TIM7_Init+0x68>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65501;
 80014fc:	4b10      	ldr	r3, [pc, #64]	@ (8001540 <MX_TIM7_Init+0x68>)
 80014fe:	f64f 72dd 	movw	r2, #65501	@ 0xffdd
 8001502:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001504:	4b0e      	ldr	r3, [pc, #56]	@ (8001540 <MX_TIM7_Init+0x68>)
 8001506:	2200      	movs	r2, #0
 8001508:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800150a:	480d      	ldr	r0, [pc, #52]	@ (8001540 <MX_TIM7_Init+0x68>)
 800150c:	f002 ff46 	bl	800439c <HAL_TIM_Base_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001516:	f7ff fe2b 	bl	8001170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	4619      	mov	r1, r3
 8001526:	4806      	ldr	r0, [pc, #24]	@ (8001540 <MX_TIM7_Init+0x68>)
 8001528:	f003 f854 	bl	80045d4 <HAL_TIMEx_MasterConfigSynchronization>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001532:	f7ff fe1d 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000398 	.word	0x20000398
 8001544:	40001400 	.word	0x40001400

08001548 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a0a      	ldr	r2, [pc, #40]	@ (8001580 <HAL_TIM_Base_MspInit+0x38>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d10b      	bne.n	8001572 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800155a:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <HAL_TIM_Base_MspInit+0x3c>)
 800155c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155e:	4a09      	ldr	r2, [pc, #36]	@ (8001584 <HAL_TIM_Base_MspInit+0x3c>)
 8001560:	f043 0320 	orr.w	r3, r3, #32
 8001564:	6593      	str	r3, [r2, #88]	@ 0x58
 8001566:	4b07      	ldr	r3, [pc, #28]	@ (8001584 <HAL_TIM_Base_MspInit+0x3c>)
 8001568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156a:	f003 0320 	and.w	r3, r3, #32
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001572:	bf00      	nop
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40001400 	.word	0x40001400
 8001584:	40021000 	.word	0x40021000

08001588 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800158c:	4b14      	ldr	r3, [pc, #80]	@ (80015e0 <MX_USART2_UART_Init+0x58>)
 800158e:	4a15      	ldr	r2, [pc, #84]	@ (80015e4 <MX_USART2_UART_Init+0x5c>)
 8001590:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001592:	4b13      	ldr	r3, [pc, #76]	@ (80015e0 <MX_USART2_UART_Init+0x58>)
 8001594:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001598:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800159a:	4b11      	ldr	r3, [pc, #68]	@ (80015e0 <MX_USART2_UART_Init+0x58>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015a0:	4b0f      	ldr	r3, [pc, #60]	@ (80015e0 <MX_USART2_UART_Init+0x58>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	@ (80015e0 <MX_USART2_UART_Init+0x58>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <MX_USART2_UART_Init+0x58>)
 80015ae:	220c      	movs	r2, #12
 80015b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	@ (80015e0 <MX_USART2_UART_Init+0x58>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b8:	4b09      	ldr	r3, [pc, #36]	@ (80015e0 <MX_USART2_UART_Init+0x58>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015be:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <MX_USART2_UART_Init+0x58>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c4:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <MX_USART2_UART_Init+0x58>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ca:	4805      	ldr	r0, [pc, #20]	@ (80015e0 <MX_USART2_UART_Init+0x58>)
 80015cc:	f003 f868 	bl	80046a0 <HAL_UART_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015d6:	f7ff fdcb 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200003e4 	.word	0x200003e4
 80015e4:	40004400 	.word	0x40004400

080015e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b09e      	sub	sp, #120	@ 0x78
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001600:	f107 0310 	add.w	r3, r7, #16
 8001604:	2254      	movs	r2, #84	@ 0x54
 8001606:	2100      	movs	r1, #0
 8001608:	4618      	mov	r0, r3
 800160a:	f003 fefa 	bl	8005402 <memset>
  if(uartHandle->Instance==USART2)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a28      	ldr	r2, [pc, #160]	@ (80016b4 <HAL_UART_MspInit+0xcc>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d148      	bne.n	80016aa <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001618:	2302      	movs	r3, #2
 800161a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800161c:	2300      	movs	r3, #0
 800161e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001620:	f107 0310 	add.w	r3, r7, #16
 8001624:	4618      	mov	r0, r3
 8001626:	f002 f843 	bl	80036b0 <HAL_RCCEx_PeriphCLKConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001630:	f7ff fd9e 	bl	8001170 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001634:	4b20      	ldr	r3, [pc, #128]	@ (80016b8 <HAL_UART_MspInit+0xd0>)
 8001636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001638:	4a1f      	ldr	r2, [pc, #124]	@ (80016b8 <HAL_UART_MspInit+0xd0>)
 800163a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800163e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001640:	4b1d      	ldr	r3, [pc, #116]	@ (80016b8 <HAL_UART_MspInit+0xd0>)
 8001642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164c:	4b1a      	ldr	r3, [pc, #104]	@ (80016b8 <HAL_UART_MspInit+0xd0>)
 800164e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001650:	4a19      	ldr	r2, [pc, #100]	@ (80016b8 <HAL_UART_MspInit+0xd0>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001658:	4b17      	ldr	r3, [pc, #92]	@ (80016b8 <HAL_UART_MspInit+0xd0>)
 800165a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001664:	2304      	movs	r3, #4
 8001666:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001670:	2303      	movs	r3, #3
 8001672:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001674:	2307      	movs	r3, #7
 8001676:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001678:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800167c:	4619      	mov	r1, r3
 800167e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001682:	f000 f9c3 	bl	8001a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001686:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800168a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168c:	2302      	movs	r3, #2
 800168e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001694:	2303      	movs	r3, #3
 8001696:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001698:	2303      	movs	r3, #3
 800169a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800169c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80016a0:	4619      	mov	r1, r3
 80016a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a6:	f000 f9b1 	bl	8001a0c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016aa:	bf00      	nop
 80016ac:	3778      	adds	r7, #120	@ 0x78
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40004400 	.word	0x40004400
 80016b8:	40021000 	.word	0x40021000

080016bc <Reset_Handler>:
 80016bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016f4 <LoopForever+0x2>
 80016c0:	f7ff fef8 	bl	80014b4 <SystemInit>
 80016c4:	480c      	ldr	r0, [pc, #48]	@ (80016f8 <LoopForever+0x6>)
 80016c6:	490d      	ldr	r1, [pc, #52]	@ (80016fc <LoopForever+0xa>)
 80016c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001700 <LoopForever+0xe>)
 80016ca:	2300      	movs	r3, #0
 80016cc:	e002      	b.n	80016d4 <LoopCopyDataInit>

080016ce <CopyDataInit>:
 80016ce:	58d4      	ldr	r4, [r2, r3]
 80016d0:	50c4      	str	r4, [r0, r3]
 80016d2:	3304      	adds	r3, #4

080016d4 <LoopCopyDataInit>:
 80016d4:	18c4      	adds	r4, r0, r3
 80016d6:	428c      	cmp	r4, r1
 80016d8:	d3f9      	bcc.n	80016ce <CopyDataInit>
 80016da:	4a0a      	ldr	r2, [pc, #40]	@ (8001704 <LoopForever+0x12>)
 80016dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001708 <LoopForever+0x16>)
 80016de:	2300      	movs	r3, #0
 80016e0:	e001      	b.n	80016e6 <LoopFillZerobss>

080016e2 <FillZerobss>:
 80016e2:	6013      	str	r3, [r2, #0]
 80016e4:	3204      	adds	r2, #4

080016e6 <LoopFillZerobss>:
 80016e6:	42a2      	cmp	r2, r4
 80016e8:	d3fb      	bcc.n	80016e2 <FillZerobss>
 80016ea:	f003 ff0d 	bl	8005508 <__libc_init_array>
 80016ee:	f7ff fc81 	bl	8000ff4 <main>

080016f2 <LoopForever>:
 80016f2:	e7fe      	b.n	80016f2 <LoopForever>
 80016f4:	2000c000 	.word	0x2000c000
 80016f8:	20000000 	.word	0x20000000
 80016fc:	20000068 	.word	0x20000068
 8001700:	08006824 	.word	0x08006824
 8001704:	20000068 	.word	0x20000068
 8001708:	200005bc 	.word	0x200005bc

0800170c <ADC1_IRQHandler>:
 800170c:	e7fe      	b.n	800170c <ADC1_IRQHandler>

0800170e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001718:	2003      	movs	r0, #3
 800171a:	f000 f943 	bl	80019a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800171e:	2000      	movs	r0, #0
 8001720:	f000 f80e 	bl	8001740 <HAL_InitTick>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d002      	beq.n	8001730 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	71fb      	strb	r3, [r7, #7]
 800172e:	e001      	b.n	8001734 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001730:	f7ff fda6 	bl	8001280 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001734:	79fb      	ldrb	r3, [r7, #7]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800174c:	4b17      	ldr	r3, [pc, #92]	@ (80017ac <HAL_InitTick+0x6c>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d023      	beq.n	800179c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001754:	4b16      	ldr	r3, [pc, #88]	@ (80017b0 <HAL_InitTick+0x70>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b14      	ldr	r3, [pc, #80]	@ (80017ac <HAL_InitTick+0x6c>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	4619      	mov	r1, r3
 800175e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001762:	fbb3 f3f1 	udiv	r3, r3, r1
 8001766:	fbb2 f3f3 	udiv	r3, r2, r3
 800176a:	4618      	mov	r0, r3
 800176c:	f000 f941 	bl	80019f2 <HAL_SYSTICK_Config>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10f      	bne.n	8001796 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b0f      	cmp	r3, #15
 800177a:	d809      	bhi.n	8001790 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800177c:	2200      	movs	r2, #0
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	f000 f919 	bl	80019ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001788:	4a0a      	ldr	r2, [pc, #40]	@ (80017b4 <HAL_InitTick+0x74>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	e007      	b.n	80017a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	73fb      	strb	r3, [r7, #15]
 8001794:	e004      	b.n	80017a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	73fb      	strb	r3, [r7, #15]
 800179a:	e001      	b.n	80017a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000008 	.word	0x20000008
 80017b0:	20000000 	.word	0x20000000
 80017b4:	20000004 	.word	0x20000004

080017b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017bc:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <HAL_IncTick+0x20>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <HAL_IncTick+0x24>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4413      	add	r3, r2
 80017c8:	4a04      	ldr	r2, [pc, #16]	@ (80017dc <HAL_IncTick+0x24>)
 80017ca:	6013      	str	r3, [r2, #0]
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	20000008 	.word	0x20000008
 80017dc:	2000046c 	.word	0x2000046c

080017e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return uwTick;
 80017e4:	4b03      	ldr	r3, [pc, #12]	@ (80017f4 <HAL_GetTick+0x14>)
 80017e6:	681b      	ldr	r3, [r3, #0]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	2000046c 	.word	0x2000046c

080017f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001800:	f7ff ffee 	bl	80017e0 <HAL_GetTick>
 8001804:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001810:	d005      	beq.n	800181e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001812:	4b0a      	ldr	r3, [pc, #40]	@ (800183c <HAL_Delay+0x44>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4413      	add	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800181e:	bf00      	nop
 8001820:	f7ff ffde 	bl	80017e0 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	429a      	cmp	r2, r3
 800182e:	d8f7      	bhi.n	8001820 <HAL_Delay+0x28>
  {
  }
}
 8001830:	bf00      	nop
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000008 	.word	0x20000008

08001840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001850:	4b0c      	ldr	r3, [pc, #48]	@ (8001884 <__NVIC_SetPriorityGrouping+0x44>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800185c:	4013      	ands	r3, r2
 800185e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001868:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800186c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001872:	4a04      	ldr	r2, [pc, #16]	@ (8001884 <__NVIC_SetPriorityGrouping+0x44>)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	60d3      	str	r3, [r2, #12]
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800188c:	4b04      	ldr	r3, [pc, #16]	@ (80018a0 <__NVIC_GetPriorityGrouping+0x18>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	f003 0307 	and.w	r3, r3, #7
}
 8001896:	4618      	mov	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	6039      	str	r1, [r7, #0]
 80018ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	db0a      	blt.n	80018ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	490c      	ldr	r1, [pc, #48]	@ (80018f0 <__NVIC_SetPriority+0x4c>)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	0112      	lsls	r2, r2, #4
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	440b      	add	r3, r1
 80018c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018cc:	e00a      	b.n	80018e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4908      	ldr	r1, [pc, #32]	@ (80018f4 <__NVIC_SetPriority+0x50>)
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	3b04      	subs	r3, #4
 80018dc:	0112      	lsls	r2, r2, #4
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	440b      	add	r3, r1
 80018e2:	761a      	strb	r2, [r3, #24]
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000e100 	.word	0xe000e100
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b089      	sub	sp, #36	@ 0x24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f1c3 0307 	rsb	r3, r3, #7
 8001912:	2b04      	cmp	r3, #4
 8001914:	bf28      	it	cs
 8001916:	2304      	movcs	r3, #4
 8001918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3304      	adds	r3, #4
 800191e:	2b06      	cmp	r3, #6
 8001920:	d902      	bls.n	8001928 <NVIC_EncodePriority+0x30>
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3b03      	subs	r3, #3
 8001926:	e000      	b.n	800192a <NVIC_EncodePriority+0x32>
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800192c:	f04f 32ff 	mov.w	r2, #4294967295
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43da      	mvns	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	401a      	ands	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001940:	f04f 31ff 	mov.w	r1, #4294967295
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	fa01 f303 	lsl.w	r3, r1, r3
 800194a:	43d9      	mvns	r1, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001950:	4313      	orrs	r3, r2
         );
}
 8001952:	4618      	mov	r0, r3
 8001954:	3724      	adds	r7, #36	@ 0x24
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
	...

08001960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3b01      	subs	r3, #1
 800196c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001970:	d301      	bcc.n	8001976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001972:	2301      	movs	r3, #1
 8001974:	e00f      	b.n	8001996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001976:	4a0a      	ldr	r2, [pc, #40]	@ (80019a0 <SysTick_Config+0x40>)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800197e:	210f      	movs	r1, #15
 8001980:	f04f 30ff 	mov.w	r0, #4294967295
 8001984:	f7ff ff8e 	bl	80018a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001988:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <SysTick_Config+0x40>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800198e:	4b04      	ldr	r3, [pc, #16]	@ (80019a0 <SysTick_Config+0x40>)
 8001990:	2207      	movs	r2, #7
 8001992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	e000e010 	.word	0xe000e010

080019a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff ff47 	bl	8001840 <__NVIC_SetPriorityGrouping>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b086      	sub	sp, #24
 80019be:	af00      	add	r7, sp, #0
 80019c0:	4603      	mov	r3, r0
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
 80019c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019cc:	f7ff ff5c 	bl	8001888 <__NVIC_GetPriorityGrouping>
 80019d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	68b9      	ldr	r1, [r7, #8]
 80019d6:	6978      	ldr	r0, [r7, #20]
 80019d8:	f7ff ff8e 	bl	80018f8 <NVIC_EncodePriority>
 80019dc:	4602      	mov	r2, r0
 80019de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff5d 	bl	80018a4 <__NVIC_SetPriority>
}
 80019ea:	bf00      	nop
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ffb0 	bl	8001960 <SysTick_Config>
 8001a00:	4603      	mov	r3, r0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a1a:	e148      	b.n	8001cae <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	2101      	movs	r1, #1
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 813a 	beq.w	8001ca8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0303 	and.w	r3, r3, #3
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d005      	beq.n	8001a4c <HAL_GPIO_Init+0x40>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d130      	bne.n	8001aae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	2203      	movs	r2, #3
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a82:	2201      	movs	r2, #1
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	091b      	lsrs	r3, r3, #4
 8001a98:	f003 0201 	and.w	r2, r3, #1
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	d017      	beq.n	8001aea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d123      	bne.n	8001b3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	08da      	lsrs	r2, r3, #3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3208      	adds	r2, #8
 8001afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	220f      	movs	r2, #15
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4013      	ands	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	691a      	ldr	r2, [r3, #16]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	08da      	lsrs	r2, r3, #3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3208      	adds	r2, #8
 8001b38:	6939      	ldr	r1, [r7, #16]
 8001b3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	2203      	movs	r2, #3
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	4013      	ands	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 0203 	and.w	r2, r3, #3
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 8094 	beq.w	8001ca8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b80:	4b52      	ldr	r3, [pc, #328]	@ (8001ccc <HAL_GPIO_Init+0x2c0>)
 8001b82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b84:	4a51      	ldr	r2, [pc, #324]	@ (8001ccc <HAL_GPIO_Init+0x2c0>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b8c:	4b4f      	ldr	r3, [pc, #316]	@ (8001ccc <HAL_GPIO_Init+0x2c0>)
 8001b8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b98:	4a4d      	ldr	r2, [pc, #308]	@ (8001cd0 <HAL_GPIO_Init+0x2c4>)
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	089b      	lsrs	r3, r3, #2
 8001b9e:	3302      	adds	r3, #2
 8001ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	220f      	movs	r2, #15
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001bc2:	d00d      	beq.n	8001be0 <HAL_GPIO_Init+0x1d4>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a43      	ldr	r2, [pc, #268]	@ (8001cd4 <HAL_GPIO_Init+0x2c8>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d007      	beq.n	8001bdc <HAL_GPIO_Init+0x1d0>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a42      	ldr	r2, [pc, #264]	@ (8001cd8 <HAL_GPIO_Init+0x2cc>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d101      	bne.n	8001bd8 <HAL_GPIO_Init+0x1cc>
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	e004      	b.n	8001be2 <HAL_GPIO_Init+0x1d6>
 8001bd8:	2307      	movs	r3, #7
 8001bda:	e002      	b.n	8001be2 <HAL_GPIO_Init+0x1d6>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <HAL_GPIO_Init+0x1d6>
 8001be0:	2300      	movs	r3, #0
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	f002 0203 	and.w	r2, r2, #3
 8001be8:	0092      	lsls	r2, r2, #2
 8001bea:	4093      	lsls	r3, r2
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bf2:	4937      	ldr	r1, [pc, #220]	@ (8001cd0 <HAL_GPIO_Init+0x2c4>)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	089b      	lsrs	r3, r3, #2
 8001bf8:	3302      	adds	r3, #2
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c00:	4b36      	ldr	r3, [pc, #216]	@ (8001cdc <HAL_GPIO_Init+0x2d0>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c24:	4a2d      	ldr	r2, [pc, #180]	@ (8001cdc <HAL_GPIO_Init+0x2d0>)
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c2a:	4b2c      	ldr	r3, [pc, #176]	@ (8001cdc <HAL_GPIO_Init+0x2d0>)
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4013      	ands	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c4e:	4a23      	ldr	r2, [pc, #140]	@ (8001cdc <HAL_GPIO_Init+0x2d0>)
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c54:	4b21      	ldr	r3, [pc, #132]	@ (8001cdc <HAL_GPIO_Init+0x2d0>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c78:	4a18      	ldr	r2, [pc, #96]	@ (8001cdc <HAL_GPIO_Init+0x2d0>)
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c7e:	4b17      	ldr	r3, [pc, #92]	@ (8001cdc <HAL_GPIO_Init+0x2d0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ca2:	4a0e      	ldr	r2, [pc, #56]	@ (8001cdc <HAL_GPIO_Init+0x2d0>)
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	3301      	adds	r3, #1
 8001cac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f47f aeaf 	bne.w	8001a1c <HAL_GPIO_Init+0x10>
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	bf00      	nop
 8001cc2:	371c      	adds	r7, #28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40010000 	.word	0x40010000
 8001cd4:	48000400 	.word	0x48000400
 8001cd8:	48000800 	.word	0x48000800
 8001cdc:	40010400 	.word	0x40010400

08001ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	807b      	strh	r3, [r7, #2]
 8001cec:	4613      	mov	r3, r2
 8001cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cf0:	787b      	ldrb	r3, [r7, #1]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cf6:	887a      	ldrh	r2, [r7, #2]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cfc:	e002      	b.n	8001d04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cfe:	887a      	ldrh	r2, [r7, #2]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e08d      	b.n	8001e3e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d106      	bne.n	8001d3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7fe ffca 	bl	8000cd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2224      	movs	r2, #36	@ 0x24
 8001d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0201 	bic.w	r2, r2, #1
 8001d52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d107      	bne.n	8001d8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	e006      	b.n	8001d98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001d96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d108      	bne.n	8001db2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	e007      	b.n	8001dc2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001de4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691a      	ldr	r2, [r3, #16]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69d9      	ldr	r1, [r3, #28]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a1a      	ldr	r2, [r3, #32]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0201 	orr.w	r2, r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	4608      	mov	r0, r1
 8001e52:	4611      	mov	r1, r2
 8001e54:	461a      	mov	r2, r3
 8001e56:	4603      	mov	r3, r0
 8001e58:	817b      	strh	r3, [r7, #10]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	813b      	strh	r3, [r7, #8]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b20      	cmp	r3, #32
 8001e6c:	f040 80f9 	bne.w	8002062 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d002      	beq.n	8001e7c <HAL_I2C_Mem_Write+0x34>
 8001e76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d105      	bne.n	8001e88 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e82:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e0ed      	b.n	8002064 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d101      	bne.n	8001e96 <HAL_I2C_Mem_Write+0x4e>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e0e6      	b.n	8002064 <HAL_I2C_Mem_Write+0x21c>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e9e:	f7ff fc9f 	bl	80017e0 <HAL_GetTick>
 8001ea2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	2319      	movs	r3, #25
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f000 fac3 	bl	800243c <I2C_WaitOnFlagUntilTimeout>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0d1      	b.n	8002064 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2221      	movs	r2, #33	@ 0x21
 8001ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2240      	movs	r2, #64	@ 0x40
 8001ecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6a3a      	ldr	r2, [r7, #32]
 8001eda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001ee0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ee8:	88f8      	ldrh	r0, [r7, #6]
 8001eea:	893a      	ldrh	r2, [r7, #8]
 8001eec:	8979      	ldrh	r1, [r7, #10]
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	9301      	str	r3, [sp, #4]
 8001ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f000 f9d3 	bl	80022a4 <I2C_RequestMemoryWrite>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d005      	beq.n	8001f10 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0a9      	b.n	8002064 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	2bff      	cmp	r3, #255	@ 0xff
 8001f18:	d90e      	bls.n	8001f38 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	22ff      	movs	r2, #255	@ 0xff
 8001f1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	8979      	ldrh	r1, [r7, #10]
 8001f28:	2300      	movs	r3, #0
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 fc47 	bl	80027c4 <I2C_TransferConfig>
 8001f36:	e00f      	b.n	8001f58 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	8979      	ldrh	r1, [r7, #10]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 fc36 	bl	80027c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f000 fac6 	bl	80024ee <I2C_WaitOnTXISFlagUntilTimeout>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e07b      	b.n	8002064 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f70:	781a      	ldrb	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d034      	beq.n	8002010 <HAL_I2C_Mem_Write+0x1c8>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d130      	bne.n	8002010 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2180      	movs	r1, #128	@ 0x80
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f000 fa3f 	bl	800243c <I2C_WaitOnFlagUntilTimeout>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e04d      	b.n	8002064 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	2bff      	cmp	r3, #255	@ 0xff
 8001fd0:	d90e      	bls.n	8001ff0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	22ff      	movs	r2, #255	@ 0xff
 8001fd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	8979      	ldrh	r1, [r7, #10]
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f000 fbeb 	bl	80027c4 <I2C_TransferConfig>
 8001fee:	e00f      	b.n	8002010 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	8979      	ldrh	r1, [r7, #10]
 8002002:	2300      	movs	r3, #0
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 fbda 	bl	80027c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002014:	b29b      	uxth	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d19e      	bne.n	8001f58 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 faac 	bl	800257c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e01a      	b.n	8002064 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2220      	movs	r2, #32
 8002034:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6859      	ldr	r1, [r3, #4]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4b0a      	ldr	r3, [pc, #40]	@ (800206c <HAL_I2C_Mem_Write+0x224>)
 8002042:	400b      	ands	r3, r1
 8002044:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2220      	movs	r2, #32
 800204a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	e000      	b.n	8002064 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002062:	2302      	movs	r3, #2
  }
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	fe00e800 	.word	0xfe00e800

08002070 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af02      	add	r7, sp, #8
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	4608      	mov	r0, r1
 800207a:	4611      	mov	r1, r2
 800207c:	461a      	mov	r2, r3
 800207e:	4603      	mov	r3, r0
 8002080:	817b      	strh	r3, [r7, #10]
 8002082:	460b      	mov	r3, r1
 8002084:	813b      	strh	r3, [r7, #8]
 8002086:	4613      	mov	r3, r2
 8002088:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b20      	cmp	r3, #32
 8002094:	f040 80fd 	bne.w	8002292 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d002      	beq.n	80020a4 <HAL_I2C_Mem_Read+0x34>
 800209e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d105      	bne.n	80020b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020aa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0f1      	b.n	8002294 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d101      	bne.n	80020be <HAL_I2C_Mem_Read+0x4e>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e0ea      	b.n	8002294 <HAL_I2C_Mem_Read+0x224>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020c6:	f7ff fb8b 	bl	80017e0 <HAL_GetTick>
 80020ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	2319      	movs	r3, #25
 80020d2:	2201      	movs	r2, #1
 80020d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f000 f9af 	bl	800243c <I2C_WaitOnFlagUntilTimeout>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0d5      	b.n	8002294 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2222      	movs	r2, #34	@ 0x22
 80020ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2240      	movs	r2, #64	@ 0x40
 80020f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6a3a      	ldr	r2, [r7, #32]
 8002102:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002108:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002110:	88f8      	ldrh	r0, [r7, #6]
 8002112:	893a      	ldrh	r2, [r7, #8]
 8002114:	8979      	ldrh	r1, [r7, #10]
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	9301      	str	r3, [sp, #4]
 800211a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	4603      	mov	r3, r0
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f000 f913 	bl	800234c <I2C_RequestMemoryRead>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0ad      	b.n	8002294 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800213c:	b29b      	uxth	r3, r3
 800213e:	2bff      	cmp	r3, #255	@ 0xff
 8002140:	d90e      	bls.n	8002160 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2201      	movs	r2, #1
 8002146:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800214c:	b2da      	uxtb	r2, r3
 800214e:	8979      	ldrh	r1, [r7, #10]
 8002150:	4b52      	ldr	r3, [pc, #328]	@ (800229c <HAL_I2C_Mem_Read+0x22c>)
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 fb33 	bl	80027c4 <I2C_TransferConfig>
 800215e:	e00f      	b.n	8002180 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002164:	b29a      	uxth	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800216e:	b2da      	uxtb	r2, r3
 8002170:	8979      	ldrh	r1, [r7, #10]
 8002172:	4b4a      	ldr	r3, [pc, #296]	@ (800229c <HAL_I2C_Mem_Read+0x22c>)
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 fb22 	bl	80027c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002186:	2200      	movs	r2, #0
 8002188:	2104      	movs	r1, #4
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f000 f956 	bl	800243c <I2C_WaitOnFlagUntilTimeout>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e07c      	b.n	8002294 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021b6:	3b01      	subs	r3, #1
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	3b01      	subs	r3, #1
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d034      	beq.n	8002240 <HAL_I2C_Mem_Read+0x1d0>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d130      	bne.n	8002240 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e4:	2200      	movs	r2, #0
 80021e6:	2180      	movs	r1, #128	@ 0x80
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f000 f927 	bl	800243c <I2C_WaitOnFlagUntilTimeout>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e04d      	b.n	8002294 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	2bff      	cmp	r3, #255	@ 0xff
 8002200:	d90e      	bls.n	8002220 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2201      	movs	r2, #1
 8002206:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800220c:	b2da      	uxtb	r2, r3
 800220e:	8979      	ldrh	r1, [r7, #10]
 8002210:	2300      	movs	r3, #0
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 fad3 	bl	80027c4 <I2C_TransferConfig>
 800221e:	e00f      	b.n	8002240 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002224:	b29a      	uxth	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800222e:	b2da      	uxtb	r2, r3
 8002230:	8979      	ldrh	r1, [r7, #10]
 8002232:	2300      	movs	r3, #0
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 fac2 	bl	80027c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002244:	b29b      	uxth	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d19a      	bne.n	8002180 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 f994 	bl	800257c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e01a      	b.n	8002294 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2220      	movs	r2, #32
 8002264:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6859      	ldr	r1, [r3, #4]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4b0b      	ldr	r3, [pc, #44]	@ (80022a0 <HAL_I2C_Mem_Read+0x230>)
 8002272:	400b      	ands	r3, r1
 8002274:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2220      	movs	r2, #32
 800227a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800228e:	2300      	movs	r3, #0
 8002290:	e000      	b.n	8002294 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002292:	2302      	movs	r3, #2
  }
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	80002400 	.word	0x80002400
 80022a0:	fe00e800 	.word	0xfe00e800

080022a4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	4608      	mov	r0, r1
 80022ae:	4611      	mov	r1, r2
 80022b0:	461a      	mov	r2, r3
 80022b2:	4603      	mov	r3, r0
 80022b4:	817b      	strh	r3, [r7, #10]
 80022b6:	460b      	mov	r3, r1
 80022b8:	813b      	strh	r3, [r7, #8]
 80022ba:	4613      	mov	r3, r2
 80022bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80022be:	88fb      	ldrh	r3, [r7, #6]
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	8979      	ldrh	r1, [r7, #10]
 80022c4:	4b20      	ldr	r3, [pc, #128]	@ (8002348 <I2C_RequestMemoryWrite+0xa4>)
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 fa79 	bl	80027c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022d2:	69fa      	ldr	r2, [r7, #28]
 80022d4:	69b9      	ldr	r1, [r7, #24]
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 f909 	bl	80024ee <I2C_WaitOnTXISFlagUntilTimeout>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e02c      	b.n	8002340 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022e6:	88fb      	ldrh	r3, [r7, #6]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d105      	bne.n	80022f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022ec:	893b      	ldrh	r3, [r7, #8]
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80022f6:	e015      	b.n	8002324 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80022f8:	893b      	ldrh	r3, [r7, #8]
 80022fa:	0a1b      	lsrs	r3, r3, #8
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002306:	69fa      	ldr	r2, [r7, #28]
 8002308:	69b9      	ldr	r1, [r7, #24]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f8ef 	bl	80024ee <I2C_WaitOnTXISFlagUntilTimeout>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e012      	b.n	8002340 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800231a:	893b      	ldrh	r3, [r7, #8]
 800231c:	b2da      	uxtb	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	2200      	movs	r2, #0
 800232c:	2180      	movs	r1, #128	@ 0x80
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 f884 	bl	800243c <I2C_WaitOnFlagUntilTimeout>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	80002000 	.word	0x80002000

0800234c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af02      	add	r7, sp, #8
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	4608      	mov	r0, r1
 8002356:	4611      	mov	r1, r2
 8002358:	461a      	mov	r2, r3
 800235a:	4603      	mov	r3, r0
 800235c:	817b      	strh	r3, [r7, #10]
 800235e:	460b      	mov	r3, r1
 8002360:	813b      	strh	r3, [r7, #8]
 8002362:	4613      	mov	r3, r2
 8002364:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002366:	88fb      	ldrh	r3, [r7, #6]
 8002368:	b2da      	uxtb	r2, r3
 800236a:	8979      	ldrh	r1, [r7, #10]
 800236c:	4b20      	ldr	r3, [pc, #128]	@ (80023f0 <I2C_RequestMemoryRead+0xa4>)
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	2300      	movs	r3, #0
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 fa26 	bl	80027c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002378:	69fa      	ldr	r2, [r7, #28]
 800237a:	69b9      	ldr	r1, [r7, #24]
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 f8b6 	bl	80024ee <I2C_WaitOnTXISFlagUntilTimeout>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e02c      	b.n	80023e6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800238c:	88fb      	ldrh	r3, [r7, #6]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d105      	bne.n	800239e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002392:	893b      	ldrh	r3, [r7, #8]
 8002394:	b2da      	uxtb	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	629a      	str	r2, [r3, #40]	@ 0x28
 800239c:	e015      	b.n	80023ca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800239e:	893b      	ldrh	r3, [r7, #8]
 80023a0:	0a1b      	lsrs	r3, r3, #8
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ac:	69fa      	ldr	r2, [r7, #28]
 80023ae:	69b9      	ldr	r1, [r7, #24]
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 f89c 	bl	80024ee <I2C_WaitOnTXISFlagUntilTimeout>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e012      	b.n	80023e6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023c0:	893b      	ldrh	r3, [r7, #8]
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	2200      	movs	r2, #0
 80023d2:	2140      	movs	r1, #64	@ 0x40
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 f831 	bl	800243c <I2C_WaitOnFlagUntilTimeout>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	80002000 	.word	0x80002000

080023f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b02      	cmp	r3, #2
 8002408:	d103      	bne.n	8002412 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2200      	movs	r2, #0
 8002410:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b01      	cmp	r3, #1
 800241e:	d007      	beq.n	8002430 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699a      	ldr	r2, [r3, #24]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0201 	orr.w	r2, r2, #1
 800242e:	619a      	str	r2, [r3, #24]
  }
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	4613      	mov	r3, r2
 800244a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800244c:	e03b      	b.n	80024c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	6839      	ldr	r1, [r7, #0]
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 f8d6 	bl	8002604 <I2C_IsErrorOccurred>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e041      	b.n	80024e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002468:	d02d      	beq.n	80024c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800246a:	f7ff f9b9 	bl	80017e0 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d302      	bcc.n	8002480 <I2C_WaitOnFlagUntilTimeout+0x44>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d122      	bne.n	80024c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	699a      	ldr	r2, [r3, #24]
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	4013      	ands	r3, r2
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	429a      	cmp	r2, r3
 800248e:	bf0c      	ite	eq
 8002490:	2301      	moveq	r3, #1
 8002492:	2300      	movne	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	461a      	mov	r2, r3
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	429a      	cmp	r2, r3
 800249c:	d113      	bne.n	80024c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a2:	f043 0220 	orr.w	r2, r3, #32
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2220      	movs	r2, #32
 80024ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e00f      	b.n	80024e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699a      	ldr	r2, [r3, #24]
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	4013      	ands	r3, r2
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	bf0c      	ite	eq
 80024d6:	2301      	moveq	r3, #1
 80024d8:	2300      	movne	r3, #0
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d0b4      	beq.n	800244e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024fa:	e033      	b.n	8002564 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	68b9      	ldr	r1, [r7, #8]
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 f87f 	bl	8002604 <I2C_IsErrorOccurred>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e031      	b.n	8002574 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002516:	d025      	beq.n	8002564 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002518:	f7ff f962 	bl	80017e0 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	429a      	cmp	r2, r3
 8002526:	d302      	bcc.n	800252e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d11a      	bne.n	8002564 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b02      	cmp	r3, #2
 800253a:	d013      	beq.n	8002564 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002540:	f043 0220 	orr.w	r2, r3, #32
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2220      	movs	r2, #32
 800254c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e007      	b.n	8002574 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b02      	cmp	r3, #2
 8002570:	d1c4      	bne.n	80024fc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002588:	e02f      	b.n	80025ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 f838 	bl	8002604 <I2C_IsErrorOccurred>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e02d      	b.n	80025fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800259e:	f7ff f91f 	bl	80017e0 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d302      	bcc.n	80025b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d11a      	bne.n	80025ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	f003 0320 	and.w	r3, r3, #32
 80025be:	2b20      	cmp	r3, #32
 80025c0:	d013      	beq.n	80025ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c6:	f043 0220 	orr.w	r2, r3, #32
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2220      	movs	r2, #32
 80025d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e007      	b.n	80025fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	f003 0320 	and.w	r3, r3, #32
 80025f4:	2b20      	cmp	r3, #32
 80025f6:	d1c8      	bne.n	800258a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b08a      	sub	sp, #40	@ 0x28
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800261e:	2300      	movs	r3, #0
 8002620:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	f003 0310 	and.w	r3, r3, #16
 800262c:	2b00      	cmp	r3, #0
 800262e:	d068      	beq.n	8002702 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2210      	movs	r2, #16
 8002636:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002638:	e049      	b.n	80026ce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002640:	d045      	beq.n	80026ce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002642:	f7ff f8cd 	bl	80017e0 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	429a      	cmp	r2, r3
 8002650:	d302      	bcc.n	8002658 <I2C_IsErrorOccurred+0x54>
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d13a      	bne.n	80026ce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002662:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800266a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002676:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800267a:	d121      	bne.n	80026c0 <I2C_IsErrorOccurred+0xbc>
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002682:	d01d      	beq.n	80026c0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002684:	7cfb      	ldrb	r3, [r7, #19]
 8002686:	2b20      	cmp	r3, #32
 8002688:	d01a      	beq.n	80026c0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002698:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800269a:	f7ff f8a1 	bl	80017e0 <HAL_GetTick>
 800269e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026a0:	e00e      	b.n	80026c0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80026a2:	f7ff f89d 	bl	80017e0 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b19      	cmp	r3, #25
 80026ae:	d907      	bls.n	80026c0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80026b0:	6a3b      	ldr	r3, [r7, #32]
 80026b2:	f043 0320 	orr.w	r3, r3, #32
 80026b6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80026be:	e006      	b.n	80026ce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	f003 0320 	and.w	r3, r3, #32
 80026ca:	2b20      	cmp	r3, #32
 80026cc:	d1e9      	bne.n	80026a2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	f003 0320 	and.w	r3, r3, #32
 80026d8:	2b20      	cmp	r3, #32
 80026da:	d003      	beq.n	80026e4 <I2C_IsErrorOccurred+0xe0>
 80026dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0aa      	beq.n	800263a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80026e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d103      	bne.n	80026f4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2220      	movs	r2, #32
 80026f2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	f043 0304 	orr.w	r3, r3, #4
 80026fa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00b      	beq.n	800272c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002714:	6a3b      	ldr	r3, [r7, #32]
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002724:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00b      	beq.n	800274e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	f043 0308 	orr.w	r3, r3, #8
 800273c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002746:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00b      	beq.n	8002770 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	f043 0302 	orr.w	r3, r3, #2
 800275e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002768:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002770:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002774:	2b00      	cmp	r3, #0
 8002776:	d01c      	beq.n	80027b2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f7ff fe3b 	bl	80023f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6859      	ldr	r1, [r3, #4]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4b0d      	ldr	r3, [pc, #52]	@ (80027c0 <I2C_IsErrorOccurred+0x1bc>)
 800278a:	400b      	ands	r3, r1
 800278c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	431a      	orrs	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2220      	movs	r2, #32
 800279e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80027b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3728      	adds	r7, #40	@ 0x28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	fe00e800 	.word	0xfe00e800

080027c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	607b      	str	r3, [r7, #4]
 80027ce:	460b      	mov	r3, r1
 80027d0:	817b      	strh	r3, [r7, #10]
 80027d2:	4613      	mov	r3, r2
 80027d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027d6:	897b      	ldrh	r3, [r7, #10]
 80027d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027dc:	7a7b      	ldrb	r3, [r7, #9]
 80027de:	041b      	lsls	r3, r3, #16
 80027e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027e4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80027f2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	0d5b      	lsrs	r3, r3, #21
 80027fe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002802:	4b08      	ldr	r3, [pc, #32]	@ (8002824 <I2C_TransferConfig+0x60>)
 8002804:	430b      	orrs	r3, r1
 8002806:	43db      	mvns	r3, r3
 8002808:	ea02 0103 	and.w	r1, r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	430a      	orrs	r2, r1
 8002814:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002816:	bf00      	nop
 8002818:	371c      	adds	r7, #28
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	03ff63ff 	.word	0x03ff63ff

08002828 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b20      	cmp	r3, #32
 800283c:	d138      	bne.n	80028b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002844:	2b01      	cmp	r3, #1
 8002846:	d101      	bne.n	800284c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002848:	2302      	movs	r3, #2
 800284a:	e032      	b.n	80028b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2224      	movs	r2, #36	@ 0x24
 8002858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0201 	bic.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800287a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6819      	ldr	r1, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2220      	movs	r2, #32
 80028a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	e000      	b.n	80028b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028b0:	2302      	movs	r3, #2
  }
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028be:	b480      	push	{r7}
 80028c0:	b085      	sub	sp, #20
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b20      	cmp	r3, #32
 80028d2:	d139      	bne.n	8002948 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d101      	bne.n	80028e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028de:	2302      	movs	r3, #2
 80028e0:	e033      	b.n	800294a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2224      	movs	r2, #36	@ 0x24
 80028ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0201 	bic.w	r2, r2, #1
 8002900:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002910:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	021b      	lsls	r3, r3, #8
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4313      	orrs	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 0201 	orr.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2220      	movs	r2, #32
 8002938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	e000      	b.n	800294a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002948:	2302      	movs	r3, #2
  }
}
 800294a:	4618      	mov	r0, r3
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
	...

08002958 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800295c:	4b05      	ldr	r3, [pc, #20]	@ (8002974 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a04      	ldr	r2, [pc, #16]	@ (8002974 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002962:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002966:	6013      	str	r3, [r2, #0]
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	40007000 	.word	0x40007000

08002978 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800297c:	4b04      	ldr	r3, [pc, #16]	@ (8002990 <HAL_PWREx_GetVoltageRange+0x18>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	40007000 	.word	0x40007000

08002994 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029a2:	d130      	bne.n	8002a06 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80029a4:	4b23      	ldr	r3, [pc, #140]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80029ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029b0:	d038      	beq.n	8002a24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029b2:	4b20      	ldr	r3, [pc, #128]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029ba:	4a1e      	ldr	r2, [pc, #120]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a38 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2232      	movs	r2, #50	@ 0x32
 80029c8:	fb02 f303 	mul.w	r3, r2, r3
 80029cc:	4a1b      	ldr	r2, [pc, #108]	@ (8002a3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	0c9b      	lsrs	r3, r3, #18
 80029d4:	3301      	adds	r3, #1
 80029d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029d8:	e002      	b.n	80029e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	3b01      	subs	r3, #1
 80029de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029e0:	4b14      	ldr	r3, [pc, #80]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029ec:	d102      	bne.n	80029f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1f2      	bne.n	80029da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a00:	d110      	bne.n	8002a24 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e00f      	b.n	8002a26 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a06:	4b0b      	ldr	r3, [pc, #44]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a12:	d007      	beq.n	8002a24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a14:	4b07      	ldr	r3, [pc, #28]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a1c:	4a05      	ldr	r2, [pc, #20]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a22:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40007000 	.word	0x40007000
 8002a38:	20000000 	.word	0x20000000
 8002a3c:	431bde83 	.word	0x431bde83

08002a40 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d102      	bne.n	8002a54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	f000 bc02 	b.w	8003258 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a54:	4b96      	ldr	r3, [pc, #600]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 030c 	and.w	r3, r3, #12
 8002a5c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a5e:	4b94      	ldr	r3, [pc, #592]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0310 	and.w	r3, r3, #16
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 80e4 	beq.w	8002c3e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d007      	beq.n	8002a8c <HAL_RCC_OscConfig+0x4c>
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	2b0c      	cmp	r3, #12
 8002a80:	f040 808b 	bne.w	8002b9a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	f040 8087 	bne.w	8002b9a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a8c:	4b88      	ldr	r3, [pc, #544]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x64>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e3d9      	b.n	8003258 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1a      	ldr	r2, [r3, #32]
 8002aa8:	4b81      	ldr	r3, [pc, #516]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0308 	and.w	r3, r3, #8
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d004      	beq.n	8002abe <HAL_RCC_OscConfig+0x7e>
 8002ab4:	4b7e      	ldr	r3, [pc, #504]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002abc:	e005      	b.n	8002aca <HAL_RCC_OscConfig+0x8a>
 8002abe:	4b7c      	ldr	r3, [pc, #496]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ac4:	091b      	lsrs	r3, r3, #4
 8002ac6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d223      	bcs.n	8002b16 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 fd8c 	bl	80035f0 <RCC_SetFlashLatencyFromMSIRange>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e3ba      	b.n	8003258 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ae2:	4b73      	ldr	r3, [pc, #460]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a72      	ldr	r2, [pc, #456]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002ae8:	f043 0308 	orr.w	r3, r3, #8
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	4b70      	ldr	r3, [pc, #448]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	496d      	ldr	r1, [pc, #436]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b00:	4b6b      	ldr	r3, [pc, #428]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	021b      	lsls	r3, r3, #8
 8002b0e:	4968      	ldr	r1, [pc, #416]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	604b      	str	r3, [r1, #4]
 8002b14:	e025      	b.n	8002b62 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b16:	4b66      	ldr	r3, [pc, #408]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a65      	ldr	r2, [pc, #404]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002b1c:	f043 0308 	orr.w	r3, r3, #8
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	4b63      	ldr	r3, [pc, #396]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	4960      	ldr	r1, [pc, #384]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b34:	4b5e      	ldr	r3, [pc, #376]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	021b      	lsls	r3, r3, #8
 8002b42:	495b      	ldr	r1, [pc, #364]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d109      	bne.n	8002b62 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fd4c 	bl	80035f0 <RCC_SetFlashLatencyFromMSIRange>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e37a      	b.n	8003258 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b62:	f000 fc81 	bl	8003468 <HAL_RCC_GetSysClockFreq>
 8002b66:	4602      	mov	r2, r0
 8002b68:	4b51      	ldr	r3, [pc, #324]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	091b      	lsrs	r3, r3, #4
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	4950      	ldr	r1, [pc, #320]	@ (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002b74:	5ccb      	ldrb	r3, [r1, r3]
 8002b76:	f003 031f 	and.w	r3, r3, #31
 8002b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7e:	4a4e      	ldr	r2, [pc, #312]	@ (8002cb8 <HAL_RCC_OscConfig+0x278>)
 8002b80:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b82:	4b4e      	ldr	r3, [pc, #312]	@ (8002cbc <HAL_RCC_OscConfig+0x27c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe fdda 	bl	8001740 <HAL_InitTick>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d052      	beq.n	8002c3c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	e35e      	b.n	8003258 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d032      	beq.n	8002c08 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ba2:	4b43      	ldr	r3, [pc, #268]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a42      	ldr	r2, [pc, #264]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bae:	f7fe fe17 	bl	80017e0 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bb6:	f7fe fe13 	bl	80017e0 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e347      	b.n	8003258 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bc8:	4b39      	ldr	r3, [pc, #228]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bd4:	4b36      	ldr	r3, [pc, #216]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a35      	ldr	r2, [pc, #212]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002bda:	f043 0308 	orr.w	r3, r3, #8
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	4b33      	ldr	r3, [pc, #204]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	4930      	ldr	r1, [pc, #192]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bf2:	4b2f      	ldr	r3, [pc, #188]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	021b      	lsls	r3, r3, #8
 8002c00:	492b      	ldr	r1, [pc, #172]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	604b      	str	r3, [r1, #4]
 8002c06:	e01a      	b.n	8002c3e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c08:	4b29      	ldr	r3, [pc, #164]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a28      	ldr	r2, [pc, #160]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002c0e:	f023 0301 	bic.w	r3, r3, #1
 8002c12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c14:	f7fe fde4 	bl	80017e0 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c1c:	f7fe fde0 	bl	80017e0 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e314      	b.n	8003258 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c2e:	4b20      	ldr	r3, [pc, #128]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x1dc>
 8002c3a:	e000      	b.n	8002c3e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c3c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d073      	beq.n	8002d32 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d005      	beq.n	8002c5c <HAL_RCC_OscConfig+0x21c>
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	2b0c      	cmp	r3, #12
 8002c54:	d10e      	bne.n	8002c74 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d10b      	bne.n	8002c74 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5c:	4b14      	ldr	r3, [pc, #80]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d063      	beq.n	8002d30 <HAL_RCC_OscConfig+0x2f0>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d15f      	bne.n	8002d30 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e2f1      	b.n	8003258 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c7c:	d106      	bne.n	8002c8c <HAL_RCC_OscConfig+0x24c>
 8002c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a0b      	ldr	r2, [pc, #44]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002c84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	e025      	b.n	8002cd8 <HAL_RCC_OscConfig+0x298>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c94:	d114      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x280>
 8002c96:	4b06      	ldr	r3, [pc, #24]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a05      	ldr	r2, [pc, #20]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002c9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	4b03      	ldr	r3, [pc, #12]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a02      	ldr	r2, [pc, #8]	@ (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	e013      	b.n	8002cd8 <HAL_RCC_OscConfig+0x298>
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	080066ec 	.word	0x080066ec
 8002cb8:	20000000 	.word	0x20000000
 8002cbc:	20000004 	.word	0x20000004
 8002cc0:	4ba0      	ldr	r3, [pc, #640]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a9f      	ldr	r2, [pc, #636]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002cc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	4b9d      	ldr	r3, [pc, #628]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a9c      	ldr	r2, [pc, #624]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002cd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d013      	beq.n	8002d08 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7fe fd7e 	bl	80017e0 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce8:	f7fe fd7a 	bl	80017e0 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b64      	cmp	r3, #100	@ 0x64
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e2ae      	b.n	8003258 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cfa:	4b92      	ldr	r3, [pc, #584]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f0      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x2a8>
 8002d06:	e014      	b.n	8002d32 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d08:	f7fe fd6a 	bl	80017e0 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d10:	f7fe fd66 	bl	80017e0 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b64      	cmp	r3, #100	@ 0x64
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e29a      	b.n	8003258 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d22:	4b88      	ldr	r3, [pc, #544]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f0      	bne.n	8002d10 <HAL_RCC_OscConfig+0x2d0>
 8002d2e:	e000      	b.n	8002d32 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d060      	beq.n	8002e00 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	2b04      	cmp	r3, #4
 8002d42:	d005      	beq.n	8002d50 <HAL_RCC_OscConfig+0x310>
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	2b0c      	cmp	r3, #12
 8002d48:	d119      	bne.n	8002d7e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d116      	bne.n	8002d7e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d50:	4b7c      	ldr	r3, [pc, #496]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <HAL_RCC_OscConfig+0x328>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e277      	b.n	8003258 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d68:	4b76      	ldr	r3, [pc, #472]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	061b      	lsls	r3, r3, #24
 8002d76:	4973      	ldr	r1, [pc, #460]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d7c:	e040      	b.n	8002e00 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d023      	beq.n	8002dce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d86:	4b6f      	ldr	r3, [pc, #444]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a6e      	ldr	r2, [pc, #440]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002d8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d92:	f7fe fd25 	bl	80017e0 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d9a:	f7fe fd21 	bl	80017e0 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e255      	b.n	8003258 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dac:	4b65      	ldr	r3, [pc, #404]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0f0      	beq.n	8002d9a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db8:	4b62      	ldr	r3, [pc, #392]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	061b      	lsls	r3, r3, #24
 8002dc6:	495f      	ldr	r1, [pc, #380]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	604b      	str	r3, [r1, #4]
 8002dcc:	e018      	b.n	8002e00 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dce:	4b5d      	ldr	r3, [pc, #372]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a5c      	ldr	r2, [pc, #368]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002dd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dda:	f7fe fd01 	bl	80017e0 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de2:	f7fe fcfd 	bl	80017e0 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e231      	b.n	8003258 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002df4:	4b53      	ldr	r3, [pc, #332]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f0      	bne.n	8002de2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d03c      	beq.n	8002e86 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d01c      	beq.n	8002e4e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e14:	4b4b      	ldr	r3, [pc, #300]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e1a:	4a4a      	ldr	r2, [pc, #296]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e24:	f7fe fcdc 	bl	80017e0 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e2c:	f7fe fcd8 	bl	80017e0 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e20c      	b.n	8003258 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e3e:	4b41      	ldr	r3, [pc, #260]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0ef      	beq.n	8002e2c <HAL_RCC_OscConfig+0x3ec>
 8002e4c:	e01b      	b.n	8002e86 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e4e:	4b3d      	ldr	r3, [pc, #244]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e54:	4a3b      	ldr	r2, [pc, #236]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002e56:	f023 0301 	bic.w	r3, r3, #1
 8002e5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5e:	f7fe fcbf 	bl	80017e0 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e66:	f7fe fcbb 	bl	80017e0 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e1ef      	b.n	8003258 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e78:	4b32      	ldr	r3, [pc, #200]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1ef      	bne.n	8002e66 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 80a6 	beq.w	8002fe0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e94:	2300      	movs	r3, #0
 8002e96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e98:	4b2a      	ldr	r3, [pc, #168]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10d      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ea4:	4b27      	ldr	r3, [pc, #156]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea8:	4a26      	ldr	r2, [pc, #152]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002eaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eae:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eb0:	4b24      	ldr	r3, [pc, #144]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ec0:	4b21      	ldr	r3, [pc, #132]	@ (8002f48 <HAL_RCC_OscConfig+0x508>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d118      	bne.n	8002efe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8002f48 <HAL_RCC_OscConfig+0x508>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f48 <HAL_RCC_OscConfig+0x508>)
 8002ed2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ed6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ed8:	f7fe fc82 	bl	80017e0 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee0:	f7fe fc7e 	bl	80017e0 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e1b2      	b.n	8003258 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ef2:	4b15      	ldr	r3, [pc, #84]	@ (8002f48 <HAL_RCC_OscConfig+0x508>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d108      	bne.n	8002f18 <HAL_RCC_OscConfig+0x4d8>
 8002f06:	4b0f      	ldr	r3, [pc, #60]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002f0e:	f043 0301 	orr.w	r3, r3, #1
 8002f12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f16:	e029      	b.n	8002f6c <HAL_RCC_OscConfig+0x52c>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2b05      	cmp	r3, #5
 8002f1e:	d115      	bne.n	8002f4c <HAL_RCC_OscConfig+0x50c>
 8002f20:	4b08      	ldr	r3, [pc, #32]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f26:	4a07      	ldr	r2, [pc, #28]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002f28:	f043 0304 	orr.w	r3, r3, #4
 8002f2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f30:	4b04      	ldr	r3, [pc, #16]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f36:	4a03      	ldr	r2, [pc, #12]	@ (8002f44 <HAL_RCC_OscConfig+0x504>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f40:	e014      	b.n	8002f6c <HAL_RCC_OscConfig+0x52c>
 8002f42:	bf00      	nop
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40007000 	.word	0x40007000
 8002f4c:	4b9a      	ldr	r3, [pc, #616]	@ (80031b8 <HAL_RCC_OscConfig+0x778>)
 8002f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f52:	4a99      	ldr	r2, [pc, #612]	@ (80031b8 <HAL_RCC_OscConfig+0x778>)
 8002f54:	f023 0301 	bic.w	r3, r3, #1
 8002f58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f5c:	4b96      	ldr	r3, [pc, #600]	@ (80031b8 <HAL_RCC_OscConfig+0x778>)
 8002f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f62:	4a95      	ldr	r2, [pc, #596]	@ (80031b8 <HAL_RCC_OscConfig+0x778>)
 8002f64:	f023 0304 	bic.w	r3, r3, #4
 8002f68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d016      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f74:	f7fe fc34 	bl	80017e0 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f7a:	e00a      	b.n	8002f92 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7c:	f7fe fc30 	bl	80017e0 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e162      	b.n	8003258 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f92:	4b89      	ldr	r3, [pc, #548]	@ (80031b8 <HAL_RCC_OscConfig+0x778>)
 8002f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0ed      	beq.n	8002f7c <HAL_RCC_OscConfig+0x53c>
 8002fa0:	e015      	b.n	8002fce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa2:	f7fe fc1d 	bl	80017e0 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fa8:	e00a      	b.n	8002fc0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002faa:	f7fe fc19 	bl	80017e0 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e14b      	b.n	8003258 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fc0:	4b7d      	ldr	r3, [pc, #500]	@ (80031b8 <HAL_RCC_OscConfig+0x778>)
 8002fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1ed      	bne.n	8002faa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fce:	7ffb      	ldrb	r3, [r7, #31]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d105      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd4:	4b78      	ldr	r3, [pc, #480]	@ (80031b8 <HAL_RCC_OscConfig+0x778>)
 8002fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd8:	4a77      	ldr	r2, [pc, #476]	@ (80031b8 <HAL_RCC_OscConfig+0x778>)
 8002fda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fde:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0320 	and.w	r3, r3, #32
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d03c      	beq.n	8003066 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d01c      	beq.n	800302e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ff4:	4b70      	ldr	r3, [pc, #448]	@ (80031b8 <HAL_RCC_OscConfig+0x778>)
 8002ff6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ffa:	4a6f      	ldr	r2, [pc, #444]	@ (80031b8 <HAL_RCC_OscConfig+0x778>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003004:	f7fe fbec 	bl	80017e0 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800300c:	f7fe fbe8 	bl	80017e0 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e11c      	b.n	8003258 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800301e:	4b66      	ldr	r3, [pc, #408]	@ (80031b8 <HAL_RCC_OscConfig+0x778>)
 8003020:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0ef      	beq.n	800300c <HAL_RCC_OscConfig+0x5cc>
 800302c:	e01b      	b.n	8003066 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800302e:	4b62      	ldr	r3, [pc, #392]	@ (80031b8 <HAL_RCC_OscConfig+0x778>)
 8003030:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003034:	4a60      	ldr	r2, [pc, #384]	@ (80031b8 <HAL_RCC_OscConfig+0x778>)
 8003036:	f023 0301 	bic.w	r3, r3, #1
 800303a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303e:	f7fe fbcf 	bl	80017e0 <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003046:	f7fe fbcb 	bl	80017e0 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e0ff      	b.n	8003258 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003058:	4b57      	ldr	r3, [pc, #348]	@ (80031b8 <HAL_RCC_OscConfig+0x778>)
 800305a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1ef      	bne.n	8003046 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 80f3 	beq.w	8003256 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003074:	2b02      	cmp	r3, #2
 8003076:	f040 80c9 	bne.w	800320c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800307a:	4b4f      	ldr	r3, [pc, #316]	@ (80031b8 <HAL_RCC_OscConfig+0x778>)
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f003 0203 	and.w	r2, r3, #3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308a:	429a      	cmp	r2, r3
 800308c:	d12c      	bne.n	80030e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003098:	3b01      	subs	r3, #1
 800309a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800309c:	429a      	cmp	r2, r3
 800309e:	d123      	bne.n	80030e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d11b      	bne.n	80030e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030bc:	429a      	cmp	r2, r3
 80030be:	d113      	bne.n	80030e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ca:	085b      	lsrs	r3, r3, #1
 80030cc:	3b01      	subs	r3, #1
 80030ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d109      	bne.n	80030e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030de:	085b      	lsrs	r3, r3, #1
 80030e0:	3b01      	subs	r3, #1
 80030e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d06b      	beq.n	80031c0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	2b0c      	cmp	r3, #12
 80030ec:	d062      	beq.n	80031b4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030ee:	4b32      	ldr	r3, [pc, #200]	@ (80031b8 <HAL_RCC_OscConfig+0x778>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e0ac      	b.n	8003258 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030fe:	4b2e      	ldr	r3, [pc, #184]	@ (80031b8 <HAL_RCC_OscConfig+0x778>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a2d      	ldr	r2, [pc, #180]	@ (80031b8 <HAL_RCC_OscConfig+0x778>)
 8003104:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003108:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800310a:	f7fe fb69 	bl	80017e0 <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003112:	f7fe fb65 	bl	80017e0 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e099      	b.n	8003258 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003124:	4b24      	ldr	r3, [pc, #144]	@ (80031b8 <HAL_RCC_OscConfig+0x778>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1f0      	bne.n	8003112 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003130:	4b21      	ldr	r3, [pc, #132]	@ (80031b8 <HAL_RCC_OscConfig+0x778>)
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	4b21      	ldr	r3, [pc, #132]	@ (80031bc <HAL_RCC_OscConfig+0x77c>)
 8003136:	4013      	ands	r3, r2
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003140:	3a01      	subs	r2, #1
 8003142:	0112      	lsls	r2, r2, #4
 8003144:	4311      	orrs	r1, r2
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800314a:	0212      	lsls	r2, r2, #8
 800314c:	4311      	orrs	r1, r2
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003152:	0852      	lsrs	r2, r2, #1
 8003154:	3a01      	subs	r2, #1
 8003156:	0552      	lsls	r2, r2, #21
 8003158:	4311      	orrs	r1, r2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800315e:	0852      	lsrs	r2, r2, #1
 8003160:	3a01      	subs	r2, #1
 8003162:	0652      	lsls	r2, r2, #25
 8003164:	4311      	orrs	r1, r2
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800316a:	06d2      	lsls	r2, r2, #27
 800316c:	430a      	orrs	r2, r1
 800316e:	4912      	ldr	r1, [pc, #72]	@ (80031b8 <HAL_RCC_OscConfig+0x778>)
 8003170:	4313      	orrs	r3, r2
 8003172:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003174:	4b10      	ldr	r3, [pc, #64]	@ (80031b8 <HAL_RCC_OscConfig+0x778>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a0f      	ldr	r2, [pc, #60]	@ (80031b8 <HAL_RCC_OscConfig+0x778>)
 800317a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800317e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003180:	4b0d      	ldr	r3, [pc, #52]	@ (80031b8 <HAL_RCC_OscConfig+0x778>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	4a0c      	ldr	r2, [pc, #48]	@ (80031b8 <HAL_RCC_OscConfig+0x778>)
 8003186:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800318a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800318c:	f7fe fb28 	bl	80017e0 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003194:	f7fe fb24 	bl	80017e0 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e058      	b.n	8003258 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031a6:	4b04      	ldr	r3, [pc, #16]	@ (80031b8 <HAL_RCC_OscConfig+0x778>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0f0      	beq.n	8003194 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031b2:	e050      	b.n	8003256 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e04f      	b.n	8003258 <HAL_RCC_OscConfig+0x818>
 80031b8:	40021000 	.word	0x40021000
 80031bc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031c0:	4b27      	ldr	r3, [pc, #156]	@ (8003260 <HAL_RCC_OscConfig+0x820>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d144      	bne.n	8003256 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031cc:	4b24      	ldr	r3, [pc, #144]	@ (8003260 <HAL_RCC_OscConfig+0x820>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a23      	ldr	r2, [pc, #140]	@ (8003260 <HAL_RCC_OscConfig+0x820>)
 80031d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031d8:	4b21      	ldr	r3, [pc, #132]	@ (8003260 <HAL_RCC_OscConfig+0x820>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	4a20      	ldr	r2, [pc, #128]	@ (8003260 <HAL_RCC_OscConfig+0x820>)
 80031de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031e4:	f7fe fafc 	bl	80017e0 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ec:	f7fe faf8 	bl	80017e0 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e02c      	b.n	8003258 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031fe:	4b18      	ldr	r3, [pc, #96]	@ (8003260 <HAL_RCC_OscConfig+0x820>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f0      	beq.n	80031ec <HAL_RCC_OscConfig+0x7ac>
 800320a:	e024      	b.n	8003256 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	2b0c      	cmp	r3, #12
 8003210:	d01f      	beq.n	8003252 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003212:	4b13      	ldr	r3, [pc, #76]	@ (8003260 <HAL_RCC_OscConfig+0x820>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a12      	ldr	r2, [pc, #72]	@ (8003260 <HAL_RCC_OscConfig+0x820>)
 8003218:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800321c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321e:	f7fe fadf 	bl	80017e0 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003226:	f7fe fadb 	bl	80017e0 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e00f      	b.n	8003258 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003238:	4b09      	ldr	r3, [pc, #36]	@ (8003260 <HAL_RCC_OscConfig+0x820>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1f0      	bne.n	8003226 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003244:	4b06      	ldr	r3, [pc, #24]	@ (8003260 <HAL_RCC_OscConfig+0x820>)
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	4905      	ldr	r1, [pc, #20]	@ (8003260 <HAL_RCC_OscConfig+0x820>)
 800324a:	4b06      	ldr	r3, [pc, #24]	@ (8003264 <HAL_RCC_OscConfig+0x824>)
 800324c:	4013      	ands	r3, r2
 800324e:	60cb      	str	r3, [r1, #12]
 8003250:	e001      	b.n	8003256 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3720      	adds	r7, #32
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40021000 	.word	0x40021000
 8003264:	feeefffc 	.word	0xfeeefffc

08003268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0e7      	b.n	800344c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800327c:	4b75      	ldr	r3, [pc, #468]	@ (8003454 <HAL_RCC_ClockConfig+0x1ec>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d910      	bls.n	80032ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328a:	4b72      	ldr	r3, [pc, #456]	@ (8003454 <HAL_RCC_ClockConfig+0x1ec>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f023 0207 	bic.w	r2, r3, #7
 8003292:	4970      	ldr	r1, [pc, #448]	@ (8003454 <HAL_RCC_ClockConfig+0x1ec>)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	4313      	orrs	r3, r2
 8003298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800329a:	4b6e      	ldr	r3, [pc, #440]	@ (8003454 <HAL_RCC_ClockConfig+0x1ec>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d001      	beq.n	80032ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e0cf      	b.n	800344c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d010      	beq.n	80032da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	4b66      	ldr	r3, [pc, #408]	@ (8003458 <HAL_RCC_ClockConfig+0x1f0>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d908      	bls.n	80032da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c8:	4b63      	ldr	r3, [pc, #396]	@ (8003458 <HAL_RCC_ClockConfig+0x1f0>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	4960      	ldr	r1, [pc, #384]	@ (8003458 <HAL_RCC_ClockConfig+0x1f0>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d04c      	beq.n	8003380 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b03      	cmp	r3, #3
 80032ec:	d107      	bne.n	80032fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ee:	4b5a      	ldr	r3, [pc, #360]	@ (8003458 <HAL_RCC_ClockConfig+0x1f0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d121      	bne.n	800333e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e0a6      	b.n	800344c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d107      	bne.n	8003316 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003306:	4b54      	ldr	r3, [pc, #336]	@ (8003458 <HAL_RCC_ClockConfig+0x1f0>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d115      	bne.n	800333e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e09a      	b.n	800344c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d107      	bne.n	800332e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800331e:	4b4e      	ldr	r3, [pc, #312]	@ (8003458 <HAL_RCC_ClockConfig+0x1f0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d109      	bne.n	800333e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e08e      	b.n	800344c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800332e:	4b4a      	ldr	r3, [pc, #296]	@ (8003458 <HAL_RCC_ClockConfig+0x1f0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e086      	b.n	800344c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800333e:	4b46      	ldr	r3, [pc, #280]	@ (8003458 <HAL_RCC_ClockConfig+0x1f0>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f023 0203 	bic.w	r2, r3, #3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	4943      	ldr	r1, [pc, #268]	@ (8003458 <HAL_RCC_ClockConfig+0x1f0>)
 800334c:	4313      	orrs	r3, r2
 800334e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003350:	f7fe fa46 	bl	80017e0 <HAL_GetTick>
 8003354:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003356:	e00a      	b.n	800336e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003358:	f7fe fa42 	bl	80017e0 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003366:	4293      	cmp	r3, r2
 8003368:	d901      	bls.n	800336e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e06e      	b.n	800344c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336e:	4b3a      	ldr	r3, [pc, #232]	@ (8003458 <HAL_RCC_ClockConfig+0x1f0>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 020c 	and.w	r2, r3, #12
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	429a      	cmp	r2, r3
 800337e:	d1eb      	bne.n	8003358 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d010      	beq.n	80033ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	4b31      	ldr	r3, [pc, #196]	@ (8003458 <HAL_RCC_ClockConfig+0x1f0>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003398:	429a      	cmp	r2, r3
 800339a:	d208      	bcs.n	80033ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800339c:	4b2e      	ldr	r3, [pc, #184]	@ (8003458 <HAL_RCC_ClockConfig+0x1f0>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	492b      	ldr	r1, [pc, #172]	@ (8003458 <HAL_RCC_ClockConfig+0x1f0>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033ae:	4b29      	ldr	r3, [pc, #164]	@ (8003454 <HAL_RCC_ClockConfig+0x1ec>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d210      	bcs.n	80033de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033bc:	4b25      	ldr	r3, [pc, #148]	@ (8003454 <HAL_RCC_ClockConfig+0x1ec>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f023 0207 	bic.w	r2, r3, #7
 80033c4:	4923      	ldr	r1, [pc, #140]	@ (8003454 <HAL_RCC_ClockConfig+0x1ec>)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033cc:	4b21      	ldr	r3, [pc, #132]	@ (8003454 <HAL_RCC_ClockConfig+0x1ec>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d001      	beq.n	80033de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e036      	b.n	800344c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d008      	beq.n	80033fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003458 <HAL_RCC_ClockConfig+0x1f0>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	4918      	ldr	r1, [pc, #96]	@ (8003458 <HAL_RCC_ClockConfig+0x1f0>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d009      	beq.n	800341c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003408:	4b13      	ldr	r3, [pc, #76]	@ (8003458 <HAL_RCC_ClockConfig+0x1f0>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	4910      	ldr	r1, [pc, #64]	@ (8003458 <HAL_RCC_ClockConfig+0x1f0>)
 8003418:	4313      	orrs	r3, r2
 800341a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800341c:	f000 f824 	bl	8003468 <HAL_RCC_GetSysClockFreq>
 8003420:	4602      	mov	r2, r0
 8003422:	4b0d      	ldr	r3, [pc, #52]	@ (8003458 <HAL_RCC_ClockConfig+0x1f0>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	091b      	lsrs	r3, r3, #4
 8003428:	f003 030f 	and.w	r3, r3, #15
 800342c:	490b      	ldr	r1, [pc, #44]	@ (800345c <HAL_RCC_ClockConfig+0x1f4>)
 800342e:	5ccb      	ldrb	r3, [r1, r3]
 8003430:	f003 031f 	and.w	r3, r3, #31
 8003434:	fa22 f303 	lsr.w	r3, r2, r3
 8003438:	4a09      	ldr	r2, [pc, #36]	@ (8003460 <HAL_RCC_ClockConfig+0x1f8>)
 800343a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800343c:	4b09      	ldr	r3, [pc, #36]	@ (8003464 <HAL_RCC_ClockConfig+0x1fc>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f7fe f97d 	bl	8001740 <HAL_InitTick>
 8003446:	4603      	mov	r3, r0
 8003448:	72fb      	strb	r3, [r7, #11]

  return status;
 800344a:	7afb      	ldrb	r3, [r7, #11]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40022000 	.word	0x40022000
 8003458:	40021000 	.word	0x40021000
 800345c:	080066ec 	.word	0x080066ec
 8003460:	20000000 	.word	0x20000000
 8003464:	20000004 	.word	0x20000004

08003468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003468:	b480      	push	{r7}
 800346a:	b089      	sub	sp, #36	@ 0x24
 800346c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800346e:	2300      	movs	r3, #0
 8003470:	61fb      	str	r3, [r7, #28]
 8003472:	2300      	movs	r3, #0
 8003474:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003476:	4b3e      	ldr	r3, [pc, #248]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x108>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003480:	4b3b      	ldr	r3, [pc, #236]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x108>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d005      	beq.n	800349c <HAL_RCC_GetSysClockFreq+0x34>
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	2b0c      	cmp	r3, #12
 8003494:	d121      	bne.n	80034da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d11e      	bne.n	80034da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800349c:	4b34      	ldr	r3, [pc, #208]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x108>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d107      	bne.n	80034b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034a8:	4b31      	ldr	r3, [pc, #196]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x108>)
 80034aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034ae:	0a1b      	lsrs	r3, r3, #8
 80034b0:	f003 030f 	and.w	r3, r3, #15
 80034b4:	61fb      	str	r3, [r7, #28]
 80034b6:	e005      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034b8:	4b2d      	ldr	r3, [pc, #180]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	091b      	lsrs	r3, r3, #4
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034c4:	4a2b      	ldr	r2, [pc, #172]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x10c>)
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10d      	bne.n	80034f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034d8:	e00a      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d102      	bne.n	80034e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034e0:	4b25      	ldr	r3, [pc, #148]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x110>)
 80034e2:	61bb      	str	r3, [r7, #24]
 80034e4:	e004      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d101      	bne.n	80034f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034ec:	4b23      	ldr	r3, [pc, #140]	@ (800357c <HAL_RCC_GetSysClockFreq+0x114>)
 80034ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	2b0c      	cmp	r3, #12
 80034f4:	d134      	bne.n	8003560 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x108>)
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f003 0303 	and.w	r3, r3, #3
 80034fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2b02      	cmp	r3, #2
 8003504:	d003      	beq.n	800350e <HAL_RCC_GetSysClockFreq+0xa6>
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2b03      	cmp	r3, #3
 800350a:	d003      	beq.n	8003514 <HAL_RCC_GetSysClockFreq+0xac>
 800350c:	e005      	b.n	800351a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800350e:	4b1a      	ldr	r3, [pc, #104]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x110>)
 8003510:	617b      	str	r3, [r7, #20]
      break;
 8003512:	e005      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003514:	4b19      	ldr	r3, [pc, #100]	@ (800357c <HAL_RCC_GetSysClockFreq+0x114>)
 8003516:	617b      	str	r3, [r7, #20]
      break;
 8003518:	e002      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	617b      	str	r3, [r7, #20]
      break;
 800351e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003520:	4b13      	ldr	r3, [pc, #76]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x108>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	091b      	lsrs	r3, r3, #4
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	3301      	adds	r3, #1
 800352c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800352e:	4b10      	ldr	r3, [pc, #64]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x108>)
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	0a1b      	lsrs	r3, r3, #8
 8003534:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	fb03 f202 	mul.w	r2, r3, r2
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	fbb2 f3f3 	udiv	r3, r2, r3
 8003544:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003546:	4b0a      	ldr	r3, [pc, #40]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x108>)
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	0e5b      	lsrs	r3, r3, #25
 800354c:	f003 0303 	and.w	r3, r3, #3
 8003550:	3301      	adds	r3, #1
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	fbb2 f3f3 	udiv	r3, r2, r3
 800355e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003560:	69bb      	ldr	r3, [r7, #24]
}
 8003562:	4618      	mov	r0, r3
 8003564:	3724      	adds	r7, #36	@ 0x24
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	40021000 	.word	0x40021000
 8003574:	08006704 	.word	0x08006704
 8003578:	00f42400 	.word	0x00f42400
 800357c:	007a1200 	.word	0x007a1200

08003580 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003584:	4b03      	ldr	r3, [pc, #12]	@ (8003594 <HAL_RCC_GetHCLKFreq+0x14>)
 8003586:	681b      	ldr	r3, [r3, #0]
}
 8003588:	4618      	mov	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	20000000 	.word	0x20000000

08003598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800359c:	f7ff fff0 	bl	8003580 <HAL_RCC_GetHCLKFreq>
 80035a0:	4602      	mov	r2, r0
 80035a2:	4b06      	ldr	r3, [pc, #24]	@ (80035bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	0a1b      	lsrs	r3, r3, #8
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	4904      	ldr	r1, [pc, #16]	@ (80035c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035ae:	5ccb      	ldrb	r3, [r1, r3]
 80035b0:	f003 031f 	and.w	r3, r3, #31
 80035b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40021000 	.word	0x40021000
 80035c0:	080066fc 	.word	0x080066fc

080035c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035c8:	f7ff ffda 	bl	8003580 <HAL_RCC_GetHCLKFreq>
 80035cc:	4602      	mov	r2, r0
 80035ce:	4b06      	ldr	r3, [pc, #24]	@ (80035e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	0adb      	lsrs	r3, r3, #11
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	4904      	ldr	r1, [pc, #16]	@ (80035ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80035da:	5ccb      	ldrb	r3, [r1, r3]
 80035dc:	f003 031f 	and.w	r3, r3, #31
 80035e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40021000 	.word	0x40021000
 80035ec:	080066fc 	.word	0x080066fc

080035f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035f8:	2300      	movs	r3, #0
 80035fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035fc:	4b2a      	ldr	r3, [pc, #168]	@ (80036a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003608:	f7ff f9b6 	bl	8002978 <HAL_PWREx_GetVoltageRange>
 800360c:	6178      	str	r0, [r7, #20]
 800360e:	e014      	b.n	800363a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003610:	4b25      	ldr	r3, [pc, #148]	@ (80036a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003614:	4a24      	ldr	r2, [pc, #144]	@ (80036a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800361a:	6593      	str	r3, [r2, #88]	@ 0x58
 800361c:	4b22      	ldr	r3, [pc, #136]	@ (80036a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800361e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003628:	f7ff f9a6 	bl	8002978 <HAL_PWREx_GetVoltageRange>
 800362c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800362e:	4b1e      	ldr	r3, [pc, #120]	@ (80036a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003632:	4a1d      	ldr	r2, [pc, #116]	@ (80036a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003634:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003638:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003640:	d10b      	bne.n	800365a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b80      	cmp	r3, #128	@ 0x80
 8003646:	d919      	bls.n	800367c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2ba0      	cmp	r3, #160	@ 0xa0
 800364c:	d902      	bls.n	8003654 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800364e:	2302      	movs	r3, #2
 8003650:	613b      	str	r3, [r7, #16]
 8003652:	e013      	b.n	800367c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003654:	2301      	movs	r3, #1
 8003656:	613b      	str	r3, [r7, #16]
 8003658:	e010      	b.n	800367c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b80      	cmp	r3, #128	@ 0x80
 800365e:	d902      	bls.n	8003666 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003660:	2303      	movs	r3, #3
 8003662:	613b      	str	r3, [r7, #16]
 8003664:	e00a      	b.n	800367c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b80      	cmp	r3, #128	@ 0x80
 800366a:	d102      	bne.n	8003672 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800366c:	2302      	movs	r3, #2
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	e004      	b.n	800367c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b70      	cmp	r3, #112	@ 0x70
 8003676:	d101      	bne.n	800367c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003678:	2301      	movs	r3, #1
 800367a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800367c:	4b0b      	ldr	r3, [pc, #44]	@ (80036ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f023 0207 	bic.w	r2, r3, #7
 8003684:	4909      	ldr	r1, [pc, #36]	@ (80036ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800368c:	4b07      	ldr	r3, [pc, #28]	@ (80036ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	429a      	cmp	r2, r3
 8003698:	d001      	beq.n	800369e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40021000 	.word	0x40021000
 80036ac:	40022000 	.word	0x40022000

080036b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036b8:	2300      	movs	r3, #0
 80036ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036bc:	2300      	movs	r3, #0
 80036be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d031      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036d4:	d01a      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80036d6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036da:	d814      	bhi.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d009      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036e4:	d10f      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80036e6:	4b5d      	ldr	r3, [pc, #372]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	4a5c      	ldr	r2, [pc, #368]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036f0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036f2:	e00c      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3304      	adds	r3, #4
 80036f8:	2100      	movs	r1, #0
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 f9de 	bl	8003abc <RCCEx_PLLSAI1_Config>
 8003700:	4603      	mov	r3, r0
 8003702:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003704:	e003      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	74fb      	strb	r3, [r7, #19]
      break;
 800370a:	e000      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800370c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800370e:	7cfb      	ldrb	r3, [r7, #19]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10b      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003714:	4b51      	ldr	r3, [pc, #324]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800371a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003722:	494e      	ldr	r1, [pc, #312]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800372a:	e001      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372c:	7cfb      	ldrb	r3, [r7, #19]
 800372e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 809e 	beq.w	800387a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800373e:	2300      	movs	r3, #0
 8003740:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003742:	4b46      	ldr	r3, [pc, #280]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003752:	2300      	movs	r3, #0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00d      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003758:	4b40      	ldr	r3, [pc, #256]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800375a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800375c:	4a3f      	ldr	r2, [pc, #252]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800375e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003762:	6593      	str	r3, [r2, #88]	@ 0x58
 8003764:	4b3d      	ldr	r3, [pc, #244]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003770:	2301      	movs	r3, #1
 8003772:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003774:	4b3a      	ldr	r3, [pc, #232]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a39      	ldr	r2, [pc, #228]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800377a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800377e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003780:	f7fe f82e 	bl	80017e0 <HAL_GetTick>
 8003784:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003786:	e009      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003788:	f7fe f82a 	bl	80017e0 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d902      	bls.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	74fb      	strb	r3, [r7, #19]
        break;
 800379a:	e005      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800379c:	4b30      	ldr	r3, [pc, #192]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0ef      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80037a8:	7cfb      	ldrb	r3, [r7, #19]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d15a      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037ae:	4b2b      	ldr	r3, [pc, #172]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d01e      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d019      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037ca:	4b24      	ldr	r3, [pc, #144]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037d4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037d6:	4b21      	ldr	r3, [pc, #132]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037dc:	4a1f      	ldr	r2, [pc, #124]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037e6:	4b1d      	ldr	r3, [pc, #116]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ec:	4a1b      	ldr	r2, [pc, #108]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037f6:	4a19      	ldr	r2, [pc, #100]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b00      	cmp	r3, #0
 8003806:	d016      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003808:	f7fd ffea 	bl	80017e0 <HAL_GetTick>
 800380c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800380e:	e00b      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003810:	f7fd ffe6 	bl	80017e0 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800381e:	4293      	cmp	r3, r2
 8003820:	d902      	bls.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	74fb      	strb	r3, [r7, #19]
            break;
 8003826:	e006      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003828:	4b0c      	ldr	r3, [pc, #48]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800382a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0ec      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003836:	7cfb      	ldrb	r3, [r7, #19]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10b      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800383c:	4b07      	ldr	r3, [pc, #28]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003842:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800384a:	4904      	ldr	r1, [pc, #16]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003852:	e009      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003854:	7cfb      	ldrb	r3, [r7, #19]
 8003856:	74bb      	strb	r3, [r7, #18]
 8003858:	e006      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800385a:	bf00      	nop
 800385c:	40021000 	.word	0x40021000
 8003860:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003864:	7cfb      	ldrb	r3, [r7, #19]
 8003866:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003868:	7c7b      	ldrb	r3, [r7, #17]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d105      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800386e:	4b8a      	ldr	r3, [pc, #552]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003872:	4a89      	ldr	r2, [pc, #548]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003874:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003878:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003886:	4b84      	ldr	r3, [pc, #528]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800388c:	f023 0203 	bic.w	r2, r3, #3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	4980      	ldr	r1, [pc, #512]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003896:	4313      	orrs	r3, r2
 8003898:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00a      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038a8:	4b7b      	ldr	r3, [pc, #492]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ae:	f023 020c 	bic.w	r2, r3, #12
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b6:	4978      	ldr	r1, [pc, #480]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00a      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038ca:	4b73      	ldr	r3, [pc, #460]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d8:	496f      	ldr	r1, [pc, #444]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00a      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038ec:	4b6a      	ldr	r3, [pc, #424]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038f2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038fa:	4967      	ldr	r1, [pc, #412]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800390e:	4b62      	ldr	r3, [pc, #392]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003914:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391c:	495e      	ldr	r1, [pc, #376]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00a      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003930:	4b59      	ldr	r3, [pc, #356]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003936:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393e:	4956      	ldr	r1, [pc, #344]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003952:	4b51      	ldr	r3, [pc, #324]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003958:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003960:	494d      	ldr	r1, [pc, #308]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003962:	4313      	orrs	r3, r2
 8003964:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d028      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003974:	4b48      	ldr	r3, [pc, #288]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800397a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003982:	4945      	ldr	r1, [pc, #276]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003984:	4313      	orrs	r3, r2
 8003986:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003992:	d106      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003994:	4b40      	ldr	r3, [pc, #256]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	4a3f      	ldr	r2, [pc, #252]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800399a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800399e:	60d3      	str	r3, [r2, #12]
 80039a0:	e011      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039aa:	d10c      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3304      	adds	r3, #4
 80039b0:	2101      	movs	r1, #1
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 f882 	bl	8003abc <RCCEx_PLLSAI1_Config>
 80039b8:	4603      	mov	r3, r0
 80039ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80039bc:	7cfb      	ldrb	r3, [r7, #19]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80039c2:	7cfb      	ldrb	r3, [r7, #19]
 80039c4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d028      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039d2:	4b31      	ldr	r3, [pc, #196]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e0:	492d      	ldr	r1, [pc, #180]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039f0:	d106      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039f2:	4b29      	ldr	r3, [pc, #164]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	4a28      	ldr	r2, [pc, #160]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039fc:	60d3      	str	r3, [r2, #12]
 80039fe:	e011      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a08:	d10c      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	2101      	movs	r1, #1
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 f853 	bl	8003abc <RCCEx_PLLSAI1_Config>
 8003a16:	4603      	mov	r3, r0
 8003a18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a1a:	7cfb      	ldrb	r3, [r7, #19]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003a20:	7cfb      	ldrb	r3, [r7, #19]
 8003a22:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d01c      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a30:	4b19      	ldr	r3, [pc, #100]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a36:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a3e:	4916      	ldr	r1, [pc, #88]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a4e:	d10c      	bne.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3304      	adds	r3, #4
 8003a54:	2102      	movs	r1, #2
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 f830 	bl	8003abc <RCCEx_PLLSAI1_Config>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a60:	7cfb      	ldrb	r3, [r7, #19]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003a66:	7cfb      	ldrb	r3, [r7, #19]
 8003a68:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a76:	4b08      	ldr	r3, [pc, #32]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a7c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a84:	4904      	ldr	r1, [pc, #16]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a8c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40021000 	.word	0x40021000

08003a9c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003aa0:	4b05      	ldr	r3, [pc, #20]	@ (8003ab8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a04      	ldr	r2, [pc, #16]	@ (8003ab8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003aa6:	f043 0304 	orr.w	r3, r3, #4
 8003aaa:	6013      	str	r3, [r2, #0]
}
 8003aac:	bf00      	nop
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	40021000 	.word	0x40021000

08003abc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003aca:	4b74      	ldr	r3, [pc, #464]	@ (8003c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d018      	beq.n	8003b08 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ad6:	4b71      	ldr	r3, [pc, #452]	@ (8003c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f003 0203 	and.w	r2, r3, #3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d10d      	bne.n	8003b02 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
       ||
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d009      	beq.n	8003b02 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003aee:	4b6b      	ldr	r3, [pc, #428]	@ (8003c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	091b      	lsrs	r3, r3, #4
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	1c5a      	adds	r2, r3, #1
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
       ||
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d047      	beq.n	8003b92 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	73fb      	strb	r3, [r7, #15]
 8003b06:	e044      	b.n	8003b92 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b03      	cmp	r3, #3
 8003b0e:	d018      	beq.n	8003b42 <RCCEx_PLLSAI1_Config+0x86>
 8003b10:	2b03      	cmp	r3, #3
 8003b12:	d825      	bhi.n	8003b60 <RCCEx_PLLSAI1_Config+0xa4>
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d002      	beq.n	8003b1e <RCCEx_PLLSAI1_Config+0x62>
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d009      	beq.n	8003b30 <RCCEx_PLLSAI1_Config+0x74>
 8003b1c:	e020      	b.n	8003b60 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b1e:	4b5f      	ldr	r3, [pc, #380]	@ (8003c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d11d      	bne.n	8003b66 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b2e:	e01a      	b.n	8003b66 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b30:	4b5a      	ldr	r3, [pc, #360]	@ (8003c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d116      	bne.n	8003b6a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b40:	e013      	b.n	8003b6a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b42:	4b56      	ldr	r3, [pc, #344]	@ (8003c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10f      	bne.n	8003b6e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b4e:	4b53      	ldr	r3, [pc, #332]	@ (8003c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d109      	bne.n	8003b6e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b5e:	e006      	b.n	8003b6e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	73fb      	strb	r3, [r7, #15]
      break;
 8003b64:	e004      	b.n	8003b70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b66:	bf00      	nop
 8003b68:	e002      	b.n	8003b70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b6a:	bf00      	nop
 8003b6c:	e000      	b.n	8003b70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10d      	bne.n	8003b92 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b76:	4b49      	ldr	r3, [pc, #292]	@ (8003c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6819      	ldr	r1, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	430b      	orrs	r3, r1
 8003b8c:	4943      	ldr	r1, [pc, #268]	@ (8003c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b92:	7bfb      	ldrb	r3, [r7, #15]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d17c      	bne.n	8003c92 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b98:	4b40      	ldr	r3, [pc, #256]	@ (8003c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a3f      	ldr	r2, [pc, #252]	@ (8003c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003ba2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ba4:	f7fd fe1c 	bl	80017e0 <HAL_GetTick>
 8003ba8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003baa:	e009      	b.n	8003bc0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bac:	f7fd fe18 	bl	80017e0 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d902      	bls.n	8003bc0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	73fb      	strb	r3, [r7, #15]
        break;
 8003bbe:	e005      	b.n	8003bcc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bc0:	4b36      	ldr	r3, [pc, #216]	@ (8003c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1ef      	bne.n	8003bac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d15f      	bne.n	8003c92 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d110      	bne.n	8003bfa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bd8:	4b30      	ldr	r3, [pc, #192]	@ (8003c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003be0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6892      	ldr	r2, [r2, #8]
 8003be8:	0211      	lsls	r1, r2, #8
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	68d2      	ldr	r2, [r2, #12]
 8003bee:	06d2      	lsls	r2, r2, #27
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	492a      	ldr	r1, [pc, #168]	@ (8003c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	610b      	str	r3, [r1, #16]
 8003bf8:	e027      	b.n	8003c4a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d112      	bne.n	8003c26 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c00:	4b26      	ldr	r3, [pc, #152]	@ (8003c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003c08:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6892      	ldr	r2, [r2, #8]
 8003c10:	0211      	lsls	r1, r2, #8
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6912      	ldr	r2, [r2, #16]
 8003c16:	0852      	lsrs	r2, r2, #1
 8003c18:	3a01      	subs	r2, #1
 8003c1a:	0552      	lsls	r2, r2, #21
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	491f      	ldr	r1, [pc, #124]	@ (8003c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	610b      	str	r3, [r1, #16]
 8003c24:	e011      	b.n	8003c4a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c26:	4b1d      	ldr	r3, [pc, #116]	@ (8003c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003c2e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6892      	ldr	r2, [r2, #8]
 8003c36:	0211      	lsls	r1, r2, #8
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6952      	ldr	r2, [r2, #20]
 8003c3c:	0852      	lsrs	r2, r2, #1
 8003c3e:	3a01      	subs	r2, #1
 8003c40:	0652      	lsls	r2, r2, #25
 8003c42:	430a      	orrs	r2, r1
 8003c44:	4915      	ldr	r1, [pc, #84]	@ (8003c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c4a:	4b14      	ldr	r3, [pc, #80]	@ (8003c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a13      	ldr	r2, [pc, #76]	@ (8003c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c50:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c54:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c56:	f7fd fdc3 	bl	80017e0 <HAL_GetTick>
 8003c5a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c5c:	e009      	b.n	8003c72 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c5e:	f7fd fdbf 	bl	80017e0 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d902      	bls.n	8003c72 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	73fb      	strb	r3, [r7, #15]
          break;
 8003c70:	e005      	b.n	8003c7e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c72:	4b0a      	ldr	r3, [pc, #40]	@ (8003c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0ef      	beq.n	8003c5e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d106      	bne.n	8003c92 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c84:	4b05      	ldr	r3, [pc, #20]	@ (8003c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c86:	691a      	ldr	r2, [r3, #16]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	4903      	ldr	r1, [pc, #12]	@ (8003c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40021000 	.word	0x40021000

08003ca0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e095      	b.n	8003dde <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d108      	bne.n	8003ccc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cc2:	d009      	beq.n	8003cd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	61da      	str	r2, [r3, #28]
 8003cca:	e005      	b.n	8003cd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d106      	bne.n	8003cf8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7fd fa80 	bl	80011f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d18:	d902      	bls.n	8003d20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	e002      	b.n	8003d26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003d2e:	d007      	beq.n	8003d40 <HAL_SPI_Init+0xa0>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d38:	d002      	beq.n	8003d40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	431a      	orrs	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d82:	ea42 0103 	orr.w	r1, r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d8a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	0c1b      	lsrs	r3, r3, #16
 8003d9c:	f003 0204 	and.w	r2, r3, #4
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da4:	f003 0310 	and.w	r3, r3, #16
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003dbc:	ea42 0103 	orr.w	r1, r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b088      	sub	sp, #32
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	60f8      	str	r0, [r7, #12]
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	603b      	str	r3, [r7, #0]
 8003df2:	4613      	mov	r3, r2
 8003df4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003df6:	f7fd fcf3 	bl	80017e0 <HAL_GetTick>
 8003dfa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003dfc:	88fb      	ldrh	r3, [r7, #6]
 8003dfe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d001      	beq.n	8003e10 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e15c      	b.n	80040ca <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <HAL_SPI_Transmit+0x36>
 8003e16:	88fb      	ldrh	r3, [r7, #6]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e154      	b.n	80040ca <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d101      	bne.n	8003e2e <HAL_SPI_Transmit+0x48>
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	e14d      	b.n	80040ca <HAL_SPI_Transmit+0x2e4>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2203      	movs	r2, #3
 8003e3a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	88fa      	ldrh	r2, [r7, #6]
 8003e4e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	88fa      	ldrh	r2, [r7, #6]
 8003e54:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e80:	d10f      	bne.n	8003ea2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ea0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eac:	2b40      	cmp	r3, #64	@ 0x40
 8003eae:	d007      	beq.n	8003ec0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ebe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ec8:	d952      	bls.n	8003f70 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d002      	beq.n	8003ed8 <HAL_SPI_Transmit+0xf2>
 8003ed2:	8b7b      	ldrh	r3, [r7, #26]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d145      	bne.n	8003f64 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003edc:	881a      	ldrh	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee8:	1c9a      	adds	r2, r3, #2
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003efc:	e032      	b.n	8003f64 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d112      	bne.n	8003f32 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f10:	881a      	ldrh	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f1c:	1c9a      	adds	r2, r3, #2
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f30:	e018      	b.n	8003f64 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f32:	f7fd fc55 	bl	80017e0 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d803      	bhi.n	8003f4a <HAL_SPI_Transmit+0x164>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f48:	d102      	bne.n	8003f50 <HAL_SPI_Transmit+0x16a>
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d109      	bne.n	8003f64 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e0b2      	b.n	80040ca <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1c7      	bne.n	8003efe <HAL_SPI_Transmit+0x118>
 8003f6e:	e083      	b.n	8004078 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <HAL_SPI_Transmit+0x198>
 8003f78:	8b7b      	ldrh	r3, [r7, #26]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d177      	bne.n	800406e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d912      	bls.n	8003fae <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8c:	881a      	ldrh	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f98:	1c9a      	adds	r2, r3, #2
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	3b02      	subs	r3, #2
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003fac:	e05f      	b.n	800406e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	330c      	adds	r3, #12
 8003fb8:	7812      	ldrb	r2, [r2, #0]
 8003fba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003fd4:	e04b      	b.n	800406e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d12b      	bne.n	800403c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d912      	bls.n	8004014 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff2:	881a      	ldrh	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ffe:	1c9a      	adds	r2, r3, #2
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004008:	b29b      	uxth	r3, r3
 800400a:	3b02      	subs	r3, #2
 800400c:	b29a      	uxth	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004012:	e02c      	b.n	800406e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	330c      	adds	r3, #12
 800401e:	7812      	ldrb	r2, [r2, #0]
 8004020:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004030:	b29b      	uxth	r3, r3
 8004032:	3b01      	subs	r3, #1
 8004034:	b29a      	uxth	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800403a:	e018      	b.n	800406e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800403c:	f7fd fbd0 	bl	80017e0 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	429a      	cmp	r2, r3
 800404a:	d803      	bhi.n	8004054 <HAL_SPI_Transmit+0x26e>
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004052:	d102      	bne.n	800405a <HAL_SPI_Transmit+0x274>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d109      	bne.n	800406e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e02d      	b.n	80040ca <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004072:	b29b      	uxth	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1ae      	bne.n	8003fd6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004078:	69fa      	ldr	r2, [r7, #28]
 800407a:	6839      	ldr	r1, [r7, #0]
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 f947 	bl	8004310 <SPI_EndRxTxTransaction>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d002      	beq.n	800408e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2220      	movs	r2, #32
 800408c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10a      	bne.n	80040ac <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004096:	2300      	movs	r3, #0
 8004098:	617b      	str	r3, [r7, #20]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	617b      	str	r3, [r7, #20]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80040c8:	2300      	movs	r3, #0
  }
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3720      	adds	r7, #32
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
	...

080040d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b088      	sub	sp, #32
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	603b      	str	r3, [r7, #0]
 80040e0:	4613      	mov	r3, r2
 80040e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040e4:	f7fd fb7c 	bl	80017e0 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ec:	1a9b      	subs	r3, r3, r2
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	4413      	add	r3, r2
 80040f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040f4:	f7fd fb74 	bl	80017e0 <HAL_GetTick>
 80040f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040fa:	4b39      	ldr	r3, [pc, #228]	@ (80041e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	015b      	lsls	r3, r3, #5
 8004100:	0d1b      	lsrs	r3, r3, #20
 8004102:	69fa      	ldr	r2, [r7, #28]
 8004104:	fb02 f303 	mul.w	r3, r2, r3
 8004108:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800410a:	e054      	b.n	80041b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004112:	d050      	beq.n	80041b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004114:	f7fd fb64 	bl	80017e0 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	69fa      	ldr	r2, [r7, #28]
 8004120:	429a      	cmp	r2, r3
 8004122:	d902      	bls.n	800412a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d13d      	bne.n	80041a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004138:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004142:	d111      	bne.n	8004168 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800414c:	d004      	beq.n	8004158 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004156:	d107      	bne.n	8004168 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004166:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004170:	d10f      	bne.n	8004192 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004190:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e017      	b.n	80041d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	4013      	ands	r3, r2
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	bf0c      	ite	eq
 80041c6:	2301      	moveq	r3, #1
 80041c8:	2300      	movne	r3, #0
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	461a      	mov	r2, r3
 80041ce:	79fb      	ldrb	r3, [r7, #7]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d19b      	bne.n	800410c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3720      	adds	r7, #32
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	20000000 	.word	0x20000000

080041e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08a      	sub	sp, #40	@ 0x28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
 80041f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80041f2:	2300      	movs	r3, #0
 80041f4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80041f6:	f7fd faf3 	bl	80017e0 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041fe:	1a9b      	subs	r3, r3, r2
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	4413      	add	r3, r2
 8004204:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004206:	f7fd faeb 	bl	80017e0 <HAL_GetTick>
 800420a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	330c      	adds	r3, #12
 8004212:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004214:	4b3d      	ldr	r3, [pc, #244]	@ (800430c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	00da      	lsls	r2, r3, #3
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	0d1b      	lsrs	r3, r3, #20
 8004224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004226:	fb02 f303 	mul.w	r3, r2, r3
 800422a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800422c:	e060      	b.n	80042f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004234:	d107      	bne.n	8004246 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d104      	bne.n	8004246 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	b2db      	uxtb	r3, r3
 8004242:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004244:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424c:	d050      	beq.n	80042f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800424e:	f7fd fac7 	bl	80017e0 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800425a:	429a      	cmp	r2, r3
 800425c:	d902      	bls.n	8004264 <SPI_WaitFifoStateUntilTimeout+0x80>
 800425e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004260:	2b00      	cmp	r3, #0
 8004262:	d13d      	bne.n	80042e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004272:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800427c:	d111      	bne.n	80042a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004286:	d004      	beq.n	8004292 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004290:	d107      	bne.n	80042a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042aa:	d10f      	bne.n	80042cc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e010      	b.n	8004302 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	3b01      	subs	r3, #1
 80042ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689a      	ldr	r2, [r3, #8]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	4013      	ands	r3, r2
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d196      	bne.n	800422e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3728      	adds	r7, #40	@ 0x28
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	20000000 	.word	0x20000000

08004310 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af02      	add	r7, sp, #8
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2200      	movs	r2, #0
 8004324:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f7ff ff5b 	bl	80041e4 <SPI_WaitFifoStateUntilTimeout>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d007      	beq.n	8004344 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004338:	f043 0220 	orr.w	r2, r3, #32
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e027      	b.n	8004394 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2200      	movs	r2, #0
 800434c:	2180      	movs	r1, #128	@ 0x80
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f7ff fec0 	bl	80040d4 <SPI_WaitFlagStateUntilTimeout>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d007      	beq.n	800436a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800435e:	f043 0220 	orr.w	r2, r3, #32
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e014      	b.n	8004394 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	2200      	movs	r2, #0
 8004372:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f7ff ff34 	bl	80041e4 <SPI_WaitFifoStateUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d007      	beq.n	8004392 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004386:	f043 0220 	orr.w	r2, r3, #32
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e000      	b.n	8004394 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e049      	b.n	8004442 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d106      	bne.n	80043c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7fd f8c0 	bl	8001548 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3304      	adds	r3, #4
 80043d8:	4619      	mov	r1, r3
 80043da:	4610      	mov	r0, r2
 80043dc:	f000 f88a 	bl	80044f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b01      	cmp	r3, #1
 800445e:	d001      	beq.n	8004464 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e03b      	b.n	80044dc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0201 	orr.w	r2, r2, #1
 800447a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a19      	ldr	r2, [pc, #100]	@ (80044e8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d009      	beq.n	800449a <HAL_TIM_Base_Start_IT+0x4e>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800448e:	d004      	beq.n	800449a <HAL_TIM_Base_Start_IT+0x4e>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a15      	ldr	r2, [pc, #84]	@ (80044ec <HAL_TIM_Base_Start_IT+0xa0>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d115      	bne.n	80044c6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	4b13      	ldr	r3, [pc, #76]	@ (80044f0 <HAL_TIM_Base_Start_IT+0xa4>)
 80044a2:	4013      	ands	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2b06      	cmp	r3, #6
 80044aa:	d015      	beq.n	80044d8 <HAL_TIM_Base_Start_IT+0x8c>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044b2:	d011      	beq.n	80044d8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0201 	orr.w	r2, r2, #1
 80044c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c4:	e008      	b.n	80044d8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f042 0201 	orr.w	r2, r2, #1
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	e000      	b.n	80044da <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	40012c00 	.word	0x40012c00
 80044ec:	40014000 	.word	0x40014000
 80044f0:	00010007 	.word	0x00010007

080044f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a30      	ldr	r2, [pc, #192]	@ (80045c8 <TIM_Base_SetConfig+0xd4>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d003      	beq.n	8004514 <TIM_Base_SetConfig+0x20>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004512:	d108      	bne.n	8004526 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800451a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	4313      	orrs	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a27      	ldr	r2, [pc, #156]	@ (80045c8 <TIM_Base_SetConfig+0xd4>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d00b      	beq.n	8004546 <TIM_Base_SetConfig+0x52>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004534:	d007      	beq.n	8004546 <TIM_Base_SetConfig+0x52>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a24      	ldr	r2, [pc, #144]	@ (80045cc <TIM_Base_SetConfig+0xd8>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d003      	beq.n	8004546 <TIM_Base_SetConfig+0x52>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a23      	ldr	r2, [pc, #140]	@ (80045d0 <TIM_Base_SetConfig+0xdc>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d108      	bne.n	8004558 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800454c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	4313      	orrs	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a12      	ldr	r2, [pc, #72]	@ (80045c8 <TIM_Base_SetConfig+0xd4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d007      	beq.n	8004594 <TIM_Base_SetConfig+0xa0>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a11      	ldr	r2, [pc, #68]	@ (80045cc <TIM_Base_SetConfig+0xd8>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d003      	beq.n	8004594 <TIM_Base_SetConfig+0xa0>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a10      	ldr	r2, [pc, #64]	@ (80045d0 <TIM_Base_SetConfig+0xdc>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d103      	bne.n	800459c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	691a      	ldr	r2, [r3, #16]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d105      	bne.n	80045ba <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	f023 0201 	bic.w	r2, r3, #1
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	611a      	str	r2, [r3, #16]
  }
}
 80045ba:	bf00      	nop
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40012c00 	.word	0x40012c00
 80045cc:	40014000 	.word	0x40014000
 80045d0:	40014400 	.word	0x40014400

080045d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e04f      	b.n	800468c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a21      	ldr	r2, [pc, #132]	@ (8004698 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d108      	bne.n	8004628 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800461c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	4313      	orrs	r3, r2
 8004626:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800462e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	4313      	orrs	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a14      	ldr	r2, [pc, #80]	@ (8004698 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d009      	beq.n	8004660 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004654:	d004      	beq.n	8004660 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a10      	ldr	r2, [pc, #64]	@ (800469c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d10c      	bne.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004666:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	4313      	orrs	r3, r2
 8004670:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	40012c00 	.word	0x40012c00
 800469c:	40014000 	.word	0x40014000

080046a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e040      	b.n	8004734 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d106      	bne.n	80046c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fc ff90 	bl	80015e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2224      	movs	r2, #36	@ 0x24
 80046cc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0201 	bic.w	r2, r2, #1
 80046dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fade 	bl	8004ca8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f8af 	bl	8004850 <UART_SetConfig>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d101      	bne.n	80046fc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e01b      	b.n	8004734 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800470a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800471a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0201 	orr.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 fb5d 	bl	8004dec <UART_CheckIdleState>
 8004732:	4603      	mov	r3, r0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3708      	adds	r7, #8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b08a      	sub	sp, #40	@ 0x28
 8004740:	af02      	add	r7, sp, #8
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	603b      	str	r3, [r7, #0]
 8004748:	4613      	mov	r3, r2
 800474a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004750:	2b20      	cmp	r3, #32
 8004752:	d177      	bne.n	8004844 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d002      	beq.n	8004760 <HAL_UART_Transmit+0x24>
 800475a:	88fb      	ldrh	r3, [r7, #6]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e070      	b.n	8004846 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2221      	movs	r2, #33	@ 0x21
 8004770:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004772:	f7fd f835 	bl	80017e0 <HAL_GetTick>
 8004776:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	88fa      	ldrh	r2, [r7, #6]
 800477c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	88fa      	ldrh	r2, [r7, #6]
 8004784:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004790:	d108      	bne.n	80047a4 <HAL_UART_Transmit+0x68>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d104      	bne.n	80047a4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800479a:	2300      	movs	r3, #0
 800479c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	61bb      	str	r3, [r7, #24]
 80047a2:	e003      	b.n	80047ac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047a8:	2300      	movs	r3, #0
 80047aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047ac:	e02f      	b.n	800480e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2200      	movs	r2, #0
 80047b6:	2180      	movs	r1, #128	@ 0x80
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 fbbf 	bl	8004f3c <UART_WaitOnFlagUntilTimeout>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d004      	beq.n	80047ce <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e03b      	b.n	8004846 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10b      	bne.n	80047ec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	881a      	ldrh	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047e0:	b292      	uxth	r2, r2
 80047e2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	3302      	adds	r3, #2
 80047e8:	61bb      	str	r3, [r7, #24]
 80047ea:	e007      	b.n	80047fc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	781a      	ldrb	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	3301      	adds	r3, #1
 80047fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004802:	b29b      	uxth	r3, r3
 8004804:	3b01      	subs	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004814:	b29b      	uxth	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1c9      	bne.n	80047ae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	2200      	movs	r2, #0
 8004822:	2140      	movs	r1, #64	@ 0x40
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 fb89 	bl	8004f3c <UART_WaitOnFlagUntilTimeout>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d004      	beq.n	800483a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2220      	movs	r2, #32
 8004834:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e005      	b.n	8004846 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2220      	movs	r2, #32
 800483e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004840:	2300      	movs	r3, #0
 8004842:	e000      	b.n	8004846 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004844:	2302      	movs	r3, #2
  }
}
 8004846:	4618      	mov	r0, r3
 8004848:	3720      	adds	r7, #32
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
	...

08004850 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004854:	b08a      	sub	sp, #40	@ 0x28
 8004856:	af00      	add	r7, sp, #0
 8004858:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	431a      	orrs	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	431a      	orrs	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	4313      	orrs	r3, r2
 8004876:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	4bb4      	ldr	r3, [pc, #720]	@ (8004b50 <UART_SetConfig+0x300>)
 8004880:	4013      	ands	r3, r2
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	6812      	ldr	r2, [r2, #0]
 8004886:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004888:	430b      	orrs	r3, r1
 800488a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	68da      	ldr	r2, [r3, #12]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4aa9      	ldr	r2, [pc, #676]	@ (8004b54 <UART_SetConfig+0x304>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d004      	beq.n	80048bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048b8:	4313      	orrs	r3, r2
 80048ba:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048cc:	430a      	orrs	r2, r1
 80048ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4aa0      	ldr	r2, [pc, #640]	@ (8004b58 <UART_SetConfig+0x308>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d126      	bne.n	8004928 <UART_SetConfig+0xd8>
 80048da:	4ba0      	ldr	r3, [pc, #640]	@ (8004b5c <UART_SetConfig+0x30c>)
 80048dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e0:	f003 0303 	and.w	r3, r3, #3
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	d81b      	bhi.n	8004920 <UART_SetConfig+0xd0>
 80048e8:	a201      	add	r2, pc, #4	@ (adr r2, 80048f0 <UART_SetConfig+0xa0>)
 80048ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ee:	bf00      	nop
 80048f0:	08004901 	.word	0x08004901
 80048f4:	08004911 	.word	0x08004911
 80048f8:	08004909 	.word	0x08004909
 80048fc:	08004919 	.word	0x08004919
 8004900:	2301      	movs	r3, #1
 8004902:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004906:	e080      	b.n	8004a0a <UART_SetConfig+0x1ba>
 8004908:	2302      	movs	r3, #2
 800490a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800490e:	e07c      	b.n	8004a0a <UART_SetConfig+0x1ba>
 8004910:	2304      	movs	r3, #4
 8004912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004916:	e078      	b.n	8004a0a <UART_SetConfig+0x1ba>
 8004918:	2308      	movs	r3, #8
 800491a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800491e:	e074      	b.n	8004a0a <UART_SetConfig+0x1ba>
 8004920:	2310      	movs	r3, #16
 8004922:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004926:	e070      	b.n	8004a0a <UART_SetConfig+0x1ba>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a8c      	ldr	r2, [pc, #560]	@ (8004b60 <UART_SetConfig+0x310>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d138      	bne.n	80049a4 <UART_SetConfig+0x154>
 8004932:	4b8a      	ldr	r3, [pc, #552]	@ (8004b5c <UART_SetConfig+0x30c>)
 8004934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004938:	f003 030c 	and.w	r3, r3, #12
 800493c:	2b0c      	cmp	r3, #12
 800493e:	d82d      	bhi.n	800499c <UART_SetConfig+0x14c>
 8004940:	a201      	add	r2, pc, #4	@ (adr r2, 8004948 <UART_SetConfig+0xf8>)
 8004942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004946:	bf00      	nop
 8004948:	0800497d 	.word	0x0800497d
 800494c:	0800499d 	.word	0x0800499d
 8004950:	0800499d 	.word	0x0800499d
 8004954:	0800499d 	.word	0x0800499d
 8004958:	0800498d 	.word	0x0800498d
 800495c:	0800499d 	.word	0x0800499d
 8004960:	0800499d 	.word	0x0800499d
 8004964:	0800499d 	.word	0x0800499d
 8004968:	08004985 	.word	0x08004985
 800496c:	0800499d 	.word	0x0800499d
 8004970:	0800499d 	.word	0x0800499d
 8004974:	0800499d 	.word	0x0800499d
 8004978:	08004995 	.word	0x08004995
 800497c:	2300      	movs	r3, #0
 800497e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004982:	e042      	b.n	8004a0a <UART_SetConfig+0x1ba>
 8004984:	2302      	movs	r3, #2
 8004986:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800498a:	e03e      	b.n	8004a0a <UART_SetConfig+0x1ba>
 800498c:	2304      	movs	r3, #4
 800498e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004992:	e03a      	b.n	8004a0a <UART_SetConfig+0x1ba>
 8004994:	2308      	movs	r3, #8
 8004996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800499a:	e036      	b.n	8004a0a <UART_SetConfig+0x1ba>
 800499c:	2310      	movs	r3, #16
 800499e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049a2:	e032      	b.n	8004a0a <UART_SetConfig+0x1ba>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a6a      	ldr	r2, [pc, #424]	@ (8004b54 <UART_SetConfig+0x304>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d12a      	bne.n	8004a04 <UART_SetConfig+0x1b4>
 80049ae:	4b6b      	ldr	r3, [pc, #428]	@ (8004b5c <UART_SetConfig+0x30c>)
 80049b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80049b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049bc:	d01a      	beq.n	80049f4 <UART_SetConfig+0x1a4>
 80049be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049c2:	d81b      	bhi.n	80049fc <UART_SetConfig+0x1ac>
 80049c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049c8:	d00c      	beq.n	80049e4 <UART_SetConfig+0x194>
 80049ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049ce:	d815      	bhi.n	80049fc <UART_SetConfig+0x1ac>
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <UART_SetConfig+0x18c>
 80049d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049d8:	d008      	beq.n	80049ec <UART_SetConfig+0x19c>
 80049da:	e00f      	b.n	80049fc <UART_SetConfig+0x1ac>
 80049dc:	2300      	movs	r3, #0
 80049de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049e2:	e012      	b.n	8004a0a <UART_SetConfig+0x1ba>
 80049e4:	2302      	movs	r3, #2
 80049e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ea:	e00e      	b.n	8004a0a <UART_SetConfig+0x1ba>
 80049ec:	2304      	movs	r3, #4
 80049ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049f2:	e00a      	b.n	8004a0a <UART_SetConfig+0x1ba>
 80049f4:	2308      	movs	r3, #8
 80049f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049fa:	e006      	b.n	8004a0a <UART_SetConfig+0x1ba>
 80049fc:	2310      	movs	r3, #16
 80049fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a02:	e002      	b.n	8004a0a <UART_SetConfig+0x1ba>
 8004a04:	2310      	movs	r3, #16
 8004a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a51      	ldr	r2, [pc, #324]	@ (8004b54 <UART_SetConfig+0x304>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d17a      	bne.n	8004b0a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	d824      	bhi.n	8004a66 <UART_SetConfig+0x216>
 8004a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a24 <UART_SetConfig+0x1d4>)
 8004a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a22:	bf00      	nop
 8004a24:	08004a49 	.word	0x08004a49
 8004a28:	08004a67 	.word	0x08004a67
 8004a2c:	08004a51 	.word	0x08004a51
 8004a30:	08004a67 	.word	0x08004a67
 8004a34:	08004a57 	.word	0x08004a57
 8004a38:	08004a67 	.word	0x08004a67
 8004a3c:	08004a67 	.word	0x08004a67
 8004a40:	08004a67 	.word	0x08004a67
 8004a44:	08004a5f 	.word	0x08004a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a48:	f7fe fda6 	bl	8003598 <HAL_RCC_GetPCLK1Freq>
 8004a4c:	61f8      	str	r0, [r7, #28]
        break;
 8004a4e:	e010      	b.n	8004a72 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a50:	4b44      	ldr	r3, [pc, #272]	@ (8004b64 <UART_SetConfig+0x314>)
 8004a52:	61fb      	str	r3, [r7, #28]
        break;
 8004a54:	e00d      	b.n	8004a72 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a56:	f7fe fd07 	bl	8003468 <HAL_RCC_GetSysClockFreq>
 8004a5a:	61f8      	str	r0, [r7, #28]
        break;
 8004a5c:	e009      	b.n	8004a72 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a62:	61fb      	str	r3, [r7, #28]
        break;
 8004a64:	e005      	b.n	8004a72 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004a70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 8107 	beq.w	8004c88 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	4413      	add	r3, r2
 8004a84:	69fa      	ldr	r2, [r7, #28]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d305      	bcc.n	8004a96 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a90:	69fa      	ldr	r2, [r7, #28]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d903      	bls.n	8004a9e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004a9c:	e0f4      	b.n	8004c88 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	461c      	mov	r4, r3
 8004aa4:	4615      	mov	r5, r2
 8004aa6:	f04f 0200 	mov.w	r2, #0
 8004aaa:	f04f 0300 	mov.w	r3, #0
 8004aae:	022b      	lsls	r3, r5, #8
 8004ab0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004ab4:	0222      	lsls	r2, r4, #8
 8004ab6:	68f9      	ldr	r1, [r7, #12]
 8004ab8:	6849      	ldr	r1, [r1, #4]
 8004aba:	0849      	lsrs	r1, r1, #1
 8004abc:	2000      	movs	r0, #0
 8004abe:	4688      	mov	r8, r1
 8004ac0:	4681      	mov	r9, r0
 8004ac2:	eb12 0a08 	adds.w	sl, r2, r8
 8004ac6:	eb43 0b09 	adc.w	fp, r3, r9
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	603b      	str	r3, [r7, #0]
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ad8:	4650      	mov	r0, sl
 8004ada:	4659      	mov	r1, fp
 8004adc:	f7fb fbd0 	bl	8000280 <__aeabi_uldivmod>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004aee:	d308      	bcc.n	8004b02 <UART_SetConfig+0x2b2>
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004af6:	d204      	bcs.n	8004b02 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	60da      	str	r2, [r3, #12]
 8004b00:	e0c2      	b.n	8004c88 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b08:	e0be      	b.n	8004c88 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b12:	d16a      	bne.n	8004bea <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004b14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	d834      	bhi.n	8004b86 <UART_SetConfig+0x336>
 8004b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b24 <UART_SetConfig+0x2d4>)
 8004b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b22:	bf00      	nop
 8004b24:	08004b49 	.word	0x08004b49
 8004b28:	08004b69 	.word	0x08004b69
 8004b2c:	08004b71 	.word	0x08004b71
 8004b30:	08004b87 	.word	0x08004b87
 8004b34:	08004b77 	.word	0x08004b77
 8004b38:	08004b87 	.word	0x08004b87
 8004b3c:	08004b87 	.word	0x08004b87
 8004b40:	08004b87 	.word	0x08004b87
 8004b44:	08004b7f 	.word	0x08004b7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b48:	f7fe fd26 	bl	8003598 <HAL_RCC_GetPCLK1Freq>
 8004b4c:	61f8      	str	r0, [r7, #28]
        break;
 8004b4e:	e020      	b.n	8004b92 <UART_SetConfig+0x342>
 8004b50:	efff69f3 	.word	0xefff69f3
 8004b54:	40008000 	.word	0x40008000
 8004b58:	40013800 	.word	0x40013800
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	40004400 	.word	0x40004400
 8004b64:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b68:	f7fe fd2c 	bl	80035c4 <HAL_RCC_GetPCLK2Freq>
 8004b6c:	61f8      	str	r0, [r7, #28]
        break;
 8004b6e:	e010      	b.n	8004b92 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b70:	4b4c      	ldr	r3, [pc, #304]	@ (8004ca4 <UART_SetConfig+0x454>)
 8004b72:	61fb      	str	r3, [r7, #28]
        break;
 8004b74:	e00d      	b.n	8004b92 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b76:	f7fe fc77 	bl	8003468 <HAL_RCC_GetSysClockFreq>
 8004b7a:	61f8      	str	r0, [r7, #28]
        break;
 8004b7c:	e009      	b.n	8004b92 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b82:	61fb      	str	r3, [r7, #28]
        break;
 8004b84:	e005      	b.n	8004b92 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004b90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d077      	beq.n	8004c88 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	005a      	lsls	r2, r3, #1
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	085b      	lsrs	r3, r3, #1
 8004ba2:	441a      	add	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	2b0f      	cmp	r3, #15
 8004bb2:	d916      	bls.n	8004be2 <UART_SetConfig+0x392>
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bba:	d212      	bcs.n	8004be2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	f023 030f 	bic.w	r3, r3, #15
 8004bc4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	085b      	lsrs	r3, r3, #1
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	8afb      	ldrh	r3, [r7, #22]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	8afa      	ldrh	r2, [r7, #22]
 8004bde:	60da      	str	r2, [r3, #12]
 8004be0:	e052      	b.n	8004c88 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004be8:	e04e      	b.n	8004c88 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d827      	bhi.n	8004c42 <UART_SetConfig+0x3f2>
 8004bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8004bf8 <UART_SetConfig+0x3a8>)
 8004bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf8:	08004c1d 	.word	0x08004c1d
 8004bfc:	08004c25 	.word	0x08004c25
 8004c00:	08004c2d 	.word	0x08004c2d
 8004c04:	08004c43 	.word	0x08004c43
 8004c08:	08004c33 	.word	0x08004c33
 8004c0c:	08004c43 	.word	0x08004c43
 8004c10:	08004c43 	.word	0x08004c43
 8004c14:	08004c43 	.word	0x08004c43
 8004c18:	08004c3b 	.word	0x08004c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c1c:	f7fe fcbc 	bl	8003598 <HAL_RCC_GetPCLK1Freq>
 8004c20:	61f8      	str	r0, [r7, #28]
        break;
 8004c22:	e014      	b.n	8004c4e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c24:	f7fe fcce 	bl	80035c4 <HAL_RCC_GetPCLK2Freq>
 8004c28:	61f8      	str	r0, [r7, #28]
        break;
 8004c2a:	e010      	b.n	8004c4e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ca4 <UART_SetConfig+0x454>)
 8004c2e:	61fb      	str	r3, [r7, #28]
        break;
 8004c30:	e00d      	b.n	8004c4e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c32:	f7fe fc19 	bl	8003468 <HAL_RCC_GetSysClockFreq>
 8004c36:	61f8      	str	r0, [r7, #28]
        break;
 8004c38:	e009      	b.n	8004c4e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c3e:	61fb      	str	r3, [r7, #28]
        break;
 8004c40:	e005      	b.n	8004c4e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c4c:	bf00      	nop
    }

    if (pclk != 0U)
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d019      	beq.n	8004c88 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	085a      	lsrs	r2, r3, #1
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	441a      	add	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c66:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	2b0f      	cmp	r3, #15
 8004c6c:	d909      	bls.n	8004c82 <UART_SetConfig+0x432>
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c74:	d205      	bcs.n	8004c82 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	60da      	str	r2, [r3, #12]
 8004c80:	e002      	b.n	8004c88 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004c94:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3728      	adds	r7, #40	@ 0x28
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ca2:	bf00      	nop
 8004ca4:	00f42400 	.word	0x00f42400

08004ca8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb4:	f003 0308 	and.w	r3, r3, #8
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00a      	beq.n	8004cd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00a      	beq.n	8004cf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00a      	beq.n	8004d16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1a:	f003 0304 	and.w	r3, r3, #4
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00a      	beq.n	8004d38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	430a      	orrs	r2, r1
 8004d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3c:	f003 0310 	and.w	r3, r3, #16
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00a      	beq.n	8004d5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5e:	f003 0320 	and.w	r3, r3, #32
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00a      	beq.n	8004d7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d01a      	beq.n	8004dbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004da6:	d10a      	bne.n	8004dbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	605a      	str	r2, [r3, #4]
  }
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b098      	sub	sp, #96	@ 0x60
 8004df0:	af02      	add	r7, sp, #8
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dfc:	f7fc fcf0 	bl	80017e0 <HAL_GetTick>
 8004e00:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0308 	and.w	r3, r3, #8
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	d12e      	bne.n	8004e6e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f88c 	bl	8004f3c <UART_WaitOnFlagUntilTimeout>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d021      	beq.n	8004e6e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e32:	e853 3f00 	ldrex	r3, [r3]
 8004e36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	461a      	mov	r2, r3
 8004e46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e48:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e4a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e50:	e841 2300 	strex	r3, r2, [r1]
 8004e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1e6      	bne.n	8004e2a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e062      	b.n	8004f34 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d149      	bne.n	8004f10 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e84:	2200      	movs	r2, #0
 8004e86:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f856 	bl	8004f3c <UART_WaitOnFlagUntilTimeout>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d03c      	beq.n	8004f10 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9e:	e853 3f00 	ldrex	r3, [r3]
 8004ea2:	623b      	str	r3, [r7, #32]
   return(result);
 8004ea4:	6a3b      	ldr	r3, [r7, #32]
 8004ea6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004eb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004eba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ebc:	e841 2300 	strex	r3, r2, [r1]
 8004ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1e6      	bne.n	8004e96 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3308      	adds	r3, #8
 8004ece:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	e853 3f00 	ldrex	r3, [r3]
 8004ed6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f023 0301 	bic.w	r3, r3, #1
 8004ede:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3308      	adds	r3, #8
 8004ee6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ee8:	61fa      	str	r2, [r7, #28]
 8004eea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eec:	69b9      	ldr	r1, [r7, #24]
 8004eee:	69fa      	ldr	r2, [r7, #28]
 8004ef0:	e841 2300 	strex	r3, r2, [r1]
 8004ef4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1e5      	bne.n	8004ec8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e011      	b.n	8004f34 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2220      	movs	r2, #32
 8004f14:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3758      	adds	r7, #88	@ 0x58
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	603b      	str	r3, [r7, #0]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f4c:	e04f      	b.n	8004fee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f54:	d04b      	beq.n	8004fee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f56:	f7fc fc43 	bl	80017e0 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d302      	bcc.n	8004f6c <UART_WaitOnFlagUntilTimeout+0x30>
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e04e      	b.n	800500e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0304 	and.w	r3, r3, #4
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d037      	beq.n	8004fee <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2b80      	cmp	r3, #128	@ 0x80
 8004f82:	d034      	beq.n	8004fee <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	2b40      	cmp	r3, #64	@ 0x40
 8004f88:	d031      	beq.n	8004fee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	f003 0308 	and.w	r3, r3, #8
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d110      	bne.n	8004fba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2208      	movs	r2, #8
 8004f9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 f838 	bl	8005016 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2208      	movs	r2, #8
 8004faa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e029      	b.n	800500e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69db      	ldr	r3, [r3, #28]
 8004fc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fc8:	d111      	bne.n	8004fee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004fd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f000 f81e 	bl	8005016 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e00f      	b.n	800500e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	69da      	ldr	r2, [r3, #28]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	bf0c      	ite	eq
 8004ffe:	2301      	moveq	r3, #1
 8005000:	2300      	movne	r3, #0
 8005002:	b2db      	uxtb	r3, r3
 8005004:	461a      	mov	r2, r3
 8005006:	79fb      	ldrb	r3, [r7, #7]
 8005008:	429a      	cmp	r2, r3
 800500a:	d0a0      	beq.n	8004f4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005016:	b480      	push	{r7}
 8005018:	b095      	sub	sp, #84	@ 0x54
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005026:	e853 3f00 	ldrex	r3, [r3]
 800502a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800502c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005032:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	461a      	mov	r2, r3
 800503a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800503c:	643b      	str	r3, [r7, #64]	@ 0x40
 800503e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005040:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005042:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005044:	e841 2300 	strex	r3, r2, [r1]
 8005048:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800504a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1e6      	bne.n	800501e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3308      	adds	r3, #8
 8005056:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	e853 3f00 	ldrex	r3, [r3]
 800505e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	f023 0301 	bic.w	r3, r3, #1
 8005066:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	3308      	adds	r3, #8
 800506e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005070:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005072:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005074:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005076:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005078:	e841 2300 	strex	r3, r2, [r1]
 800507c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800507e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1e5      	bne.n	8005050 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005088:	2b01      	cmp	r3, #1
 800508a:	d118      	bne.n	80050be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	e853 3f00 	ldrex	r3, [r3]
 8005098:	60bb      	str	r3, [r7, #8]
   return(result);
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	f023 0310 	bic.w	r3, r3, #16
 80050a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	461a      	mov	r2, r3
 80050a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050aa:	61bb      	str	r3, [r7, #24]
 80050ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ae:	6979      	ldr	r1, [r7, #20]
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	e841 2300 	strex	r3, r2, [r1]
 80050b6:	613b      	str	r3, [r7, #16]
   return(result);
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1e6      	bne.n	800508c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80050d2:	bf00      	nop
 80050d4:	3754      	adds	r7, #84	@ 0x54
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
	...

080050e0 <srand>:
 80050e0:	b538      	push	{r3, r4, r5, lr}
 80050e2:	4b10      	ldr	r3, [pc, #64]	@ (8005124 <srand+0x44>)
 80050e4:	681d      	ldr	r5, [r3, #0]
 80050e6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80050e8:	4604      	mov	r4, r0
 80050ea:	b9b3      	cbnz	r3, 800511a <srand+0x3a>
 80050ec:	2018      	movs	r0, #24
 80050ee:	f000 fa9b 	bl	8005628 <malloc>
 80050f2:	4602      	mov	r2, r0
 80050f4:	6328      	str	r0, [r5, #48]	@ 0x30
 80050f6:	b920      	cbnz	r0, 8005102 <srand+0x22>
 80050f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005128 <srand+0x48>)
 80050fa:	480c      	ldr	r0, [pc, #48]	@ (800512c <srand+0x4c>)
 80050fc:	2146      	movs	r1, #70	@ 0x46
 80050fe:	f000 fa2b 	bl	8005558 <__assert_func>
 8005102:	490b      	ldr	r1, [pc, #44]	@ (8005130 <srand+0x50>)
 8005104:	4b0b      	ldr	r3, [pc, #44]	@ (8005134 <srand+0x54>)
 8005106:	e9c0 1300 	strd	r1, r3, [r0]
 800510a:	4b0b      	ldr	r3, [pc, #44]	@ (8005138 <srand+0x58>)
 800510c:	6083      	str	r3, [r0, #8]
 800510e:	230b      	movs	r3, #11
 8005110:	8183      	strh	r3, [r0, #12]
 8005112:	2100      	movs	r1, #0
 8005114:	2001      	movs	r0, #1
 8005116:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800511a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800511c:	2200      	movs	r2, #0
 800511e:	611c      	str	r4, [r3, #16]
 8005120:	615a      	str	r2, [r3, #20]
 8005122:	bd38      	pop	{r3, r4, r5, pc}
 8005124:	20000018 	.word	0x20000018
 8005128:	08006734 	.word	0x08006734
 800512c:	0800674b 	.word	0x0800674b
 8005130:	abcd330e 	.word	0xabcd330e
 8005134:	e66d1234 	.word	0xe66d1234
 8005138:	0005deec 	.word	0x0005deec

0800513c <rand>:
 800513c:	4b16      	ldr	r3, [pc, #88]	@ (8005198 <rand+0x5c>)
 800513e:	b510      	push	{r4, lr}
 8005140:	681c      	ldr	r4, [r3, #0]
 8005142:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005144:	b9b3      	cbnz	r3, 8005174 <rand+0x38>
 8005146:	2018      	movs	r0, #24
 8005148:	f000 fa6e 	bl	8005628 <malloc>
 800514c:	4602      	mov	r2, r0
 800514e:	6320      	str	r0, [r4, #48]	@ 0x30
 8005150:	b920      	cbnz	r0, 800515c <rand+0x20>
 8005152:	4b12      	ldr	r3, [pc, #72]	@ (800519c <rand+0x60>)
 8005154:	4812      	ldr	r0, [pc, #72]	@ (80051a0 <rand+0x64>)
 8005156:	2152      	movs	r1, #82	@ 0x52
 8005158:	f000 f9fe 	bl	8005558 <__assert_func>
 800515c:	4911      	ldr	r1, [pc, #68]	@ (80051a4 <rand+0x68>)
 800515e:	4b12      	ldr	r3, [pc, #72]	@ (80051a8 <rand+0x6c>)
 8005160:	e9c0 1300 	strd	r1, r3, [r0]
 8005164:	4b11      	ldr	r3, [pc, #68]	@ (80051ac <rand+0x70>)
 8005166:	6083      	str	r3, [r0, #8]
 8005168:	230b      	movs	r3, #11
 800516a:	8183      	strh	r3, [r0, #12]
 800516c:	2100      	movs	r1, #0
 800516e:	2001      	movs	r0, #1
 8005170:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005174:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005176:	480e      	ldr	r0, [pc, #56]	@ (80051b0 <rand+0x74>)
 8005178:	690b      	ldr	r3, [r1, #16]
 800517a:	694c      	ldr	r4, [r1, #20]
 800517c:	4a0d      	ldr	r2, [pc, #52]	@ (80051b4 <rand+0x78>)
 800517e:	4358      	muls	r0, r3
 8005180:	fb02 0004 	mla	r0, r2, r4, r0
 8005184:	fba3 3202 	umull	r3, r2, r3, r2
 8005188:	3301      	adds	r3, #1
 800518a:	eb40 0002 	adc.w	r0, r0, r2
 800518e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005192:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005196:	bd10      	pop	{r4, pc}
 8005198:	20000018 	.word	0x20000018
 800519c:	08006734 	.word	0x08006734
 80051a0:	0800674b 	.word	0x0800674b
 80051a4:	abcd330e 	.word	0xabcd330e
 80051a8:	e66d1234 	.word	0xe66d1234
 80051ac:	0005deec 	.word	0x0005deec
 80051b0:	5851f42d 	.word	0x5851f42d
 80051b4:	4c957f2d 	.word	0x4c957f2d

080051b8 <std>:
 80051b8:	2300      	movs	r3, #0
 80051ba:	b510      	push	{r4, lr}
 80051bc:	4604      	mov	r4, r0
 80051be:	e9c0 3300 	strd	r3, r3, [r0]
 80051c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051c6:	6083      	str	r3, [r0, #8]
 80051c8:	8181      	strh	r1, [r0, #12]
 80051ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80051cc:	81c2      	strh	r2, [r0, #14]
 80051ce:	6183      	str	r3, [r0, #24]
 80051d0:	4619      	mov	r1, r3
 80051d2:	2208      	movs	r2, #8
 80051d4:	305c      	adds	r0, #92	@ 0x5c
 80051d6:	f000 f914 	bl	8005402 <memset>
 80051da:	4b0d      	ldr	r3, [pc, #52]	@ (8005210 <std+0x58>)
 80051dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80051de:	4b0d      	ldr	r3, [pc, #52]	@ (8005214 <std+0x5c>)
 80051e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80051e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005218 <std+0x60>)
 80051e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80051e6:	4b0d      	ldr	r3, [pc, #52]	@ (800521c <std+0x64>)
 80051e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80051ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005220 <std+0x68>)
 80051ec:	6224      	str	r4, [r4, #32]
 80051ee:	429c      	cmp	r4, r3
 80051f0:	d006      	beq.n	8005200 <std+0x48>
 80051f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80051f6:	4294      	cmp	r4, r2
 80051f8:	d002      	beq.n	8005200 <std+0x48>
 80051fa:	33d0      	adds	r3, #208	@ 0xd0
 80051fc:	429c      	cmp	r4, r3
 80051fe:	d105      	bne.n	800520c <std+0x54>
 8005200:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005208:	f000 b9a2 	b.w	8005550 <__retarget_lock_init_recursive>
 800520c:	bd10      	pop	{r4, pc}
 800520e:	bf00      	nop
 8005210:	0800537d 	.word	0x0800537d
 8005214:	0800539f 	.word	0x0800539f
 8005218:	080053d7 	.word	0x080053d7
 800521c:	080053fb 	.word	0x080053fb
 8005220:	20000470 	.word	0x20000470

08005224 <stdio_exit_handler>:
 8005224:	4a02      	ldr	r2, [pc, #8]	@ (8005230 <stdio_exit_handler+0xc>)
 8005226:	4903      	ldr	r1, [pc, #12]	@ (8005234 <stdio_exit_handler+0x10>)
 8005228:	4803      	ldr	r0, [pc, #12]	@ (8005238 <stdio_exit_handler+0x14>)
 800522a:	f000 b869 	b.w	8005300 <_fwalk_sglue>
 800522e:	bf00      	nop
 8005230:	2000000c 	.word	0x2000000c
 8005234:	08005e69 	.word	0x08005e69
 8005238:	2000001c 	.word	0x2000001c

0800523c <cleanup_stdio>:
 800523c:	6841      	ldr	r1, [r0, #4]
 800523e:	4b0c      	ldr	r3, [pc, #48]	@ (8005270 <cleanup_stdio+0x34>)
 8005240:	4299      	cmp	r1, r3
 8005242:	b510      	push	{r4, lr}
 8005244:	4604      	mov	r4, r0
 8005246:	d001      	beq.n	800524c <cleanup_stdio+0x10>
 8005248:	f000 fe0e 	bl	8005e68 <_fflush_r>
 800524c:	68a1      	ldr	r1, [r4, #8]
 800524e:	4b09      	ldr	r3, [pc, #36]	@ (8005274 <cleanup_stdio+0x38>)
 8005250:	4299      	cmp	r1, r3
 8005252:	d002      	beq.n	800525a <cleanup_stdio+0x1e>
 8005254:	4620      	mov	r0, r4
 8005256:	f000 fe07 	bl	8005e68 <_fflush_r>
 800525a:	68e1      	ldr	r1, [r4, #12]
 800525c:	4b06      	ldr	r3, [pc, #24]	@ (8005278 <cleanup_stdio+0x3c>)
 800525e:	4299      	cmp	r1, r3
 8005260:	d004      	beq.n	800526c <cleanup_stdio+0x30>
 8005262:	4620      	mov	r0, r4
 8005264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005268:	f000 bdfe 	b.w	8005e68 <_fflush_r>
 800526c:	bd10      	pop	{r4, pc}
 800526e:	bf00      	nop
 8005270:	20000470 	.word	0x20000470
 8005274:	200004d8 	.word	0x200004d8
 8005278:	20000540 	.word	0x20000540

0800527c <global_stdio_init.part.0>:
 800527c:	b510      	push	{r4, lr}
 800527e:	4b0b      	ldr	r3, [pc, #44]	@ (80052ac <global_stdio_init.part.0+0x30>)
 8005280:	4c0b      	ldr	r4, [pc, #44]	@ (80052b0 <global_stdio_init.part.0+0x34>)
 8005282:	4a0c      	ldr	r2, [pc, #48]	@ (80052b4 <global_stdio_init.part.0+0x38>)
 8005284:	601a      	str	r2, [r3, #0]
 8005286:	4620      	mov	r0, r4
 8005288:	2200      	movs	r2, #0
 800528a:	2104      	movs	r1, #4
 800528c:	f7ff ff94 	bl	80051b8 <std>
 8005290:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005294:	2201      	movs	r2, #1
 8005296:	2109      	movs	r1, #9
 8005298:	f7ff ff8e 	bl	80051b8 <std>
 800529c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80052a0:	2202      	movs	r2, #2
 80052a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052a6:	2112      	movs	r1, #18
 80052a8:	f7ff bf86 	b.w	80051b8 <std>
 80052ac:	200005a8 	.word	0x200005a8
 80052b0:	20000470 	.word	0x20000470
 80052b4:	08005225 	.word	0x08005225

080052b8 <__sfp_lock_acquire>:
 80052b8:	4801      	ldr	r0, [pc, #4]	@ (80052c0 <__sfp_lock_acquire+0x8>)
 80052ba:	f000 b94a 	b.w	8005552 <__retarget_lock_acquire_recursive>
 80052be:	bf00      	nop
 80052c0:	200005b1 	.word	0x200005b1

080052c4 <__sfp_lock_release>:
 80052c4:	4801      	ldr	r0, [pc, #4]	@ (80052cc <__sfp_lock_release+0x8>)
 80052c6:	f000 b945 	b.w	8005554 <__retarget_lock_release_recursive>
 80052ca:	bf00      	nop
 80052cc:	200005b1 	.word	0x200005b1

080052d0 <__sinit>:
 80052d0:	b510      	push	{r4, lr}
 80052d2:	4604      	mov	r4, r0
 80052d4:	f7ff fff0 	bl	80052b8 <__sfp_lock_acquire>
 80052d8:	6a23      	ldr	r3, [r4, #32]
 80052da:	b11b      	cbz	r3, 80052e4 <__sinit+0x14>
 80052dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052e0:	f7ff bff0 	b.w	80052c4 <__sfp_lock_release>
 80052e4:	4b04      	ldr	r3, [pc, #16]	@ (80052f8 <__sinit+0x28>)
 80052e6:	6223      	str	r3, [r4, #32]
 80052e8:	4b04      	ldr	r3, [pc, #16]	@ (80052fc <__sinit+0x2c>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1f5      	bne.n	80052dc <__sinit+0xc>
 80052f0:	f7ff ffc4 	bl	800527c <global_stdio_init.part.0>
 80052f4:	e7f2      	b.n	80052dc <__sinit+0xc>
 80052f6:	bf00      	nop
 80052f8:	0800523d 	.word	0x0800523d
 80052fc:	200005a8 	.word	0x200005a8

08005300 <_fwalk_sglue>:
 8005300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005304:	4607      	mov	r7, r0
 8005306:	4688      	mov	r8, r1
 8005308:	4614      	mov	r4, r2
 800530a:	2600      	movs	r6, #0
 800530c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005310:	f1b9 0901 	subs.w	r9, r9, #1
 8005314:	d505      	bpl.n	8005322 <_fwalk_sglue+0x22>
 8005316:	6824      	ldr	r4, [r4, #0]
 8005318:	2c00      	cmp	r4, #0
 800531a:	d1f7      	bne.n	800530c <_fwalk_sglue+0xc>
 800531c:	4630      	mov	r0, r6
 800531e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005322:	89ab      	ldrh	r3, [r5, #12]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d907      	bls.n	8005338 <_fwalk_sglue+0x38>
 8005328:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800532c:	3301      	adds	r3, #1
 800532e:	d003      	beq.n	8005338 <_fwalk_sglue+0x38>
 8005330:	4629      	mov	r1, r5
 8005332:	4638      	mov	r0, r7
 8005334:	47c0      	blx	r8
 8005336:	4306      	orrs	r6, r0
 8005338:	3568      	adds	r5, #104	@ 0x68
 800533a:	e7e9      	b.n	8005310 <_fwalk_sglue+0x10>

0800533c <siprintf>:
 800533c:	b40e      	push	{r1, r2, r3}
 800533e:	b500      	push	{lr}
 8005340:	b09c      	sub	sp, #112	@ 0x70
 8005342:	ab1d      	add	r3, sp, #116	@ 0x74
 8005344:	9002      	str	r0, [sp, #8]
 8005346:	9006      	str	r0, [sp, #24]
 8005348:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800534c:	4809      	ldr	r0, [pc, #36]	@ (8005374 <siprintf+0x38>)
 800534e:	9107      	str	r1, [sp, #28]
 8005350:	9104      	str	r1, [sp, #16]
 8005352:	4909      	ldr	r1, [pc, #36]	@ (8005378 <siprintf+0x3c>)
 8005354:	f853 2b04 	ldr.w	r2, [r3], #4
 8005358:	9105      	str	r1, [sp, #20]
 800535a:	6800      	ldr	r0, [r0, #0]
 800535c:	9301      	str	r3, [sp, #4]
 800535e:	a902      	add	r1, sp, #8
 8005360:	f000 fa74 	bl	800584c <_svfiprintf_r>
 8005364:	9b02      	ldr	r3, [sp, #8]
 8005366:	2200      	movs	r2, #0
 8005368:	701a      	strb	r2, [r3, #0]
 800536a:	b01c      	add	sp, #112	@ 0x70
 800536c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005370:	b003      	add	sp, #12
 8005372:	4770      	bx	lr
 8005374:	20000018 	.word	0x20000018
 8005378:	ffff0208 	.word	0xffff0208

0800537c <__sread>:
 800537c:	b510      	push	{r4, lr}
 800537e:	460c      	mov	r4, r1
 8005380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005384:	f000 f896 	bl	80054b4 <_read_r>
 8005388:	2800      	cmp	r0, #0
 800538a:	bfab      	itete	ge
 800538c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800538e:	89a3      	ldrhlt	r3, [r4, #12]
 8005390:	181b      	addge	r3, r3, r0
 8005392:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005396:	bfac      	ite	ge
 8005398:	6563      	strge	r3, [r4, #84]	@ 0x54
 800539a:	81a3      	strhlt	r3, [r4, #12]
 800539c:	bd10      	pop	{r4, pc}

0800539e <__swrite>:
 800539e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053a2:	461f      	mov	r7, r3
 80053a4:	898b      	ldrh	r3, [r1, #12]
 80053a6:	05db      	lsls	r3, r3, #23
 80053a8:	4605      	mov	r5, r0
 80053aa:	460c      	mov	r4, r1
 80053ac:	4616      	mov	r6, r2
 80053ae:	d505      	bpl.n	80053bc <__swrite+0x1e>
 80053b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053b4:	2302      	movs	r3, #2
 80053b6:	2200      	movs	r2, #0
 80053b8:	f000 f86a 	bl	8005490 <_lseek_r>
 80053bc:	89a3      	ldrh	r3, [r4, #12]
 80053be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053c6:	81a3      	strh	r3, [r4, #12]
 80053c8:	4632      	mov	r2, r6
 80053ca:	463b      	mov	r3, r7
 80053cc:	4628      	mov	r0, r5
 80053ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053d2:	f000 b881 	b.w	80054d8 <_write_r>

080053d6 <__sseek>:
 80053d6:	b510      	push	{r4, lr}
 80053d8:	460c      	mov	r4, r1
 80053da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053de:	f000 f857 	bl	8005490 <_lseek_r>
 80053e2:	1c43      	adds	r3, r0, #1
 80053e4:	89a3      	ldrh	r3, [r4, #12]
 80053e6:	bf15      	itete	ne
 80053e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80053ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80053ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80053f2:	81a3      	strheq	r3, [r4, #12]
 80053f4:	bf18      	it	ne
 80053f6:	81a3      	strhne	r3, [r4, #12]
 80053f8:	bd10      	pop	{r4, pc}

080053fa <__sclose>:
 80053fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053fe:	f000 b825 	b.w	800544c <_close_r>

08005402 <memset>:
 8005402:	4402      	add	r2, r0
 8005404:	4603      	mov	r3, r0
 8005406:	4293      	cmp	r3, r2
 8005408:	d100      	bne.n	800540c <memset+0xa>
 800540a:	4770      	bx	lr
 800540c:	f803 1b01 	strb.w	r1, [r3], #1
 8005410:	e7f9      	b.n	8005406 <memset+0x4>
	...

08005414 <time>:
 8005414:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8005416:	4b0c      	ldr	r3, [pc, #48]	@ (8005448 <time+0x34>)
 8005418:	f04f 36ff 	mov.w	r6, #4294967295
 800541c:	f04f 37ff 	mov.w	r7, #4294967295
 8005420:	4669      	mov	r1, sp
 8005422:	4604      	mov	r4, r0
 8005424:	2200      	movs	r2, #0
 8005426:	6818      	ldr	r0, [r3, #0]
 8005428:	e9cd 6700 	strd	r6, r7, [sp]
 800542c:	f000 f81e 	bl	800546c <_gettimeofday_r>
 8005430:	2800      	cmp	r0, #0
 8005432:	bfb8      	it	lt
 8005434:	e9cd 6700 	strdlt	r6, r7, [sp]
 8005438:	e9dd 0100 	ldrd	r0, r1, [sp]
 800543c:	b10c      	cbz	r4, 8005442 <time+0x2e>
 800543e:	e9c4 0100 	strd	r0, r1, [r4]
 8005442:	b004      	add	sp, #16
 8005444:	bdd0      	pop	{r4, r6, r7, pc}
 8005446:	bf00      	nop
 8005448:	20000018 	.word	0x20000018

0800544c <_close_r>:
 800544c:	b538      	push	{r3, r4, r5, lr}
 800544e:	4d06      	ldr	r5, [pc, #24]	@ (8005468 <_close_r+0x1c>)
 8005450:	2300      	movs	r3, #0
 8005452:	4604      	mov	r4, r0
 8005454:	4608      	mov	r0, r1
 8005456:	602b      	str	r3, [r5, #0]
 8005458:	f7fb ffc1 	bl	80013de <_close>
 800545c:	1c43      	adds	r3, r0, #1
 800545e:	d102      	bne.n	8005466 <_close_r+0x1a>
 8005460:	682b      	ldr	r3, [r5, #0]
 8005462:	b103      	cbz	r3, 8005466 <_close_r+0x1a>
 8005464:	6023      	str	r3, [r4, #0]
 8005466:	bd38      	pop	{r3, r4, r5, pc}
 8005468:	200005ac 	.word	0x200005ac

0800546c <_gettimeofday_r>:
 800546c:	b538      	push	{r3, r4, r5, lr}
 800546e:	4d07      	ldr	r5, [pc, #28]	@ (800548c <_gettimeofday_r+0x20>)
 8005470:	2300      	movs	r3, #0
 8005472:	4604      	mov	r4, r0
 8005474:	4608      	mov	r0, r1
 8005476:	4611      	mov	r1, r2
 8005478:	602b      	str	r3, [r5, #0]
 800547a:	f001 f841 	bl	8006500 <_gettimeofday>
 800547e:	1c43      	adds	r3, r0, #1
 8005480:	d102      	bne.n	8005488 <_gettimeofday_r+0x1c>
 8005482:	682b      	ldr	r3, [r5, #0]
 8005484:	b103      	cbz	r3, 8005488 <_gettimeofday_r+0x1c>
 8005486:	6023      	str	r3, [r4, #0]
 8005488:	bd38      	pop	{r3, r4, r5, pc}
 800548a:	bf00      	nop
 800548c:	200005ac 	.word	0x200005ac

08005490 <_lseek_r>:
 8005490:	b538      	push	{r3, r4, r5, lr}
 8005492:	4d07      	ldr	r5, [pc, #28]	@ (80054b0 <_lseek_r+0x20>)
 8005494:	4604      	mov	r4, r0
 8005496:	4608      	mov	r0, r1
 8005498:	4611      	mov	r1, r2
 800549a:	2200      	movs	r2, #0
 800549c:	602a      	str	r2, [r5, #0]
 800549e:	461a      	mov	r2, r3
 80054a0:	f7fb ffc4 	bl	800142c <_lseek>
 80054a4:	1c43      	adds	r3, r0, #1
 80054a6:	d102      	bne.n	80054ae <_lseek_r+0x1e>
 80054a8:	682b      	ldr	r3, [r5, #0]
 80054aa:	b103      	cbz	r3, 80054ae <_lseek_r+0x1e>
 80054ac:	6023      	str	r3, [r4, #0]
 80054ae:	bd38      	pop	{r3, r4, r5, pc}
 80054b0:	200005ac 	.word	0x200005ac

080054b4 <_read_r>:
 80054b4:	b538      	push	{r3, r4, r5, lr}
 80054b6:	4d07      	ldr	r5, [pc, #28]	@ (80054d4 <_read_r+0x20>)
 80054b8:	4604      	mov	r4, r0
 80054ba:	4608      	mov	r0, r1
 80054bc:	4611      	mov	r1, r2
 80054be:	2200      	movs	r2, #0
 80054c0:	602a      	str	r2, [r5, #0]
 80054c2:	461a      	mov	r2, r3
 80054c4:	f7fb ff52 	bl	800136c <_read>
 80054c8:	1c43      	adds	r3, r0, #1
 80054ca:	d102      	bne.n	80054d2 <_read_r+0x1e>
 80054cc:	682b      	ldr	r3, [r5, #0]
 80054ce:	b103      	cbz	r3, 80054d2 <_read_r+0x1e>
 80054d0:	6023      	str	r3, [r4, #0]
 80054d2:	bd38      	pop	{r3, r4, r5, pc}
 80054d4:	200005ac 	.word	0x200005ac

080054d8 <_write_r>:
 80054d8:	b538      	push	{r3, r4, r5, lr}
 80054da:	4d07      	ldr	r5, [pc, #28]	@ (80054f8 <_write_r+0x20>)
 80054dc:	4604      	mov	r4, r0
 80054de:	4608      	mov	r0, r1
 80054e0:	4611      	mov	r1, r2
 80054e2:	2200      	movs	r2, #0
 80054e4:	602a      	str	r2, [r5, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	f7fb ff5d 	bl	80013a6 <_write>
 80054ec:	1c43      	adds	r3, r0, #1
 80054ee:	d102      	bne.n	80054f6 <_write_r+0x1e>
 80054f0:	682b      	ldr	r3, [r5, #0]
 80054f2:	b103      	cbz	r3, 80054f6 <_write_r+0x1e>
 80054f4:	6023      	str	r3, [r4, #0]
 80054f6:	bd38      	pop	{r3, r4, r5, pc}
 80054f8:	200005ac 	.word	0x200005ac

080054fc <__errno>:
 80054fc:	4b01      	ldr	r3, [pc, #4]	@ (8005504 <__errno+0x8>)
 80054fe:	6818      	ldr	r0, [r3, #0]
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	20000018 	.word	0x20000018

08005508 <__libc_init_array>:
 8005508:	b570      	push	{r4, r5, r6, lr}
 800550a:	4d0d      	ldr	r5, [pc, #52]	@ (8005540 <__libc_init_array+0x38>)
 800550c:	4c0d      	ldr	r4, [pc, #52]	@ (8005544 <__libc_init_array+0x3c>)
 800550e:	1b64      	subs	r4, r4, r5
 8005510:	10a4      	asrs	r4, r4, #2
 8005512:	2600      	movs	r6, #0
 8005514:	42a6      	cmp	r6, r4
 8005516:	d109      	bne.n	800552c <__libc_init_array+0x24>
 8005518:	4d0b      	ldr	r5, [pc, #44]	@ (8005548 <__libc_init_array+0x40>)
 800551a:	4c0c      	ldr	r4, [pc, #48]	@ (800554c <__libc_init_array+0x44>)
 800551c:	f000 fff8 	bl	8006510 <_init>
 8005520:	1b64      	subs	r4, r4, r5
 8005522:	10a4      	asrs	r4, r4, #2
 8005524:	2600      	movs	r6, #0
 8005526:	42a6      	cmp	r6, r4
 8005528:	d105      	bne.n	8005536 <__libc_init_array+0x2e>
 800552a:	bd70      	pop	{r4, r5, r6, pc}
 800552c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005530:	4798      	blx	r3
 8005532:	3601      	adds	r6, #1
 8005534:	e7ee      	b.n	8005514 <__libc_init_array+0xc>
 8005536:	f855 3b04 	ldr.w	r3, [r5], #4
 800553a:	4798      	blx	r3
 800553c:	3601      	adds	r6, #1
 800553e:	e7f2      	b.n	8005526 <__libc_init_array+0x1e>
 8005540:	0800681c 	.word	0x0800681c
 8005544:	0800681c 	.word	0x0800681c
 8005548:	0800681c 	.word	0x0800681c
 800554c:	08006820 	.word	0x08006820

08005550 <__retarget_lock_init_recursive>:
 8005550:	4770      	bx	lr

08005552 <__retarget_lock_acquire_recursive>:
 8005552:	4770      	bx	lr

08005554 <__retarget_lock_release_recursive>:
 8005554:	4770      	bx	lr
	...

08005558 <__assert_func>:
 8005558:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800555a:	4614      	mov	r4, r2
 800555c:	461a      	mov	r2, r3
 800555e:	4b09      	ldr	r3, [pc, #36]	@ (8005584 <__assert_func+0x2c>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4605      	mov	r5, r0
 8005564:	68d8      	ldr	r0, [r3, #12]
 8005566:	b954      	cbnz	r4, 800557e <__assert_func+0x26>
 8005568:	4b07      	ldr	r3, [pc, #28]	@ (8005588 <__assert_func+0x30>)
 800556a:	461c      	mov	r4, r3
 800556c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005570:	9100      	str	r1, [sp, #0]
 8005572:	462b      	mov	r3, r5
 8005574:	4905      	ldr	r1, [pc, #20]	@ (800558c <__assert_func+0x34>)
 8005576:	f000 fc9f 	bl	8005eb8 <fiprintf>
 800557a:	f000 fce7 	bl	8005f4c <abort>
 800557e:	4b04      	ldr	r3, [pc, #16]	@ (8005590 <__assert_func+0x38>)
 8005580:	e7f4      	b.n	800556c <__assert_func+0x14>
 8005582:	bf00      	nop
 8005584:	20000018 	.word	0x20000018
 8005588:	080067de 	.word	0x080067de
 800558c:	080067b0 	.word	0x080067b0
 8005590:	080067a3 	.word	0x080067a3

08005594 <_free_r>:
 8005594:	b538      	push	{r3, r4, r5, lr}
 8005596:	4605      	mov	r5, r0
 8005598:	2900      	cmp	r1, #0
 800559a:	d041      	beq.n	8005620 <_free_r+0x8c>
 800559c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055a0:	1f0c      	subs	r4, r1, #4
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	bfb8      	it	lt
 80055a6:	18e4      	addlt	r4, r4, r3
 80055a8:	f000 f8e8 	bl	800577c <__malloc_lock>
 80055ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005624 <_free_r+0x90>)
 80055ae:	6813      	ldr	r3, [r2, #0]
 80055b0:	b933      	cbnz	r3, 80055c0 <_free_r+0x2c>
 80055b2:	6063      	str	r3, [r4, #4]
 80055b4:	6014      	str	r4, [r2, #0]
 80055b6:	4628      	mov	r0, r5
 80055b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055bc:	f000 b8e4 	b.w	8005788 <__malloc_unlock>
 80055c0:	42a3      	cmp	r3, r4
 80055c2:	d908      	bls.n	80055d6 <_free_r+0x42>
 80055c4:	6820      	ldr	r0, [r4, #0]
 80055c6:	1821      	adds	r1, r4, r0
 80055c8:	428b      	cmp	r3, r1
 80055ca:	bf01      	itttt	eq
 80055cc:	6819      	ldreq	r1, [r3, #0]
 80055ce:	685b      	ldreq	r3, [r3, #4]
 80055d0:	1809      	addeq	r1, r1, r0
 80055d2:	6021      	streq	r1, [r4, #0]
 80055d4:	e7ed      	b.n	80055b2 <_free_r+0x1e>
 80055d6:	461a      	mov	r2, r3
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	b10b      	cbz	r3, 80055e0 <_free_r+0x4c>
 80055dc:	42a3      	cmp	r3, r4
 80055de:	d9fa      	bls.n	80055d6 <_free_r+0x42>
 80055e0:	6811      	ldr	r1, [r2, #0]
 80055e2:	1850      	adds	r0, r2, r1
 80055e4:	42a0      	cmp	r0, r4
 80055e6:	d10b      	bne.n	8005600 <_free_r+0x6c>
 80055e8:	6820      	ldr	r0, [r4, #0]
 80055ea:	4401      	add	r1, r0
 80055ec:	1850      	adds	r0, r2, r1
 80055ee:	4283      	cmp	r3, r0
 80055f0:	6011      	str	r1, [r2, #0]
 80055f2:	d1e0      	bne.n	80055b6 <_free_r+0x22>
 80055f4:	6818      	ldr	r0, [r3, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	6053      	str	r3, [r2, #4]
 80055fa:	4408      	add	r0, r1
 80055fc:	6010      	str	r0, [r2, #0]
 80055fe:	e7da      	b.n	80055b6 <_free_r+0x22>
 8005600:	d902      	bls.n	8005608 <_free_r+0x74>
 8005602:	230c      	movs	r3, #12
 8005604:	602b      	str	r3, [r5, #0]
 8005606:	e7d6      	b.n	80055b6 <_free_r+0x22>
 8005608:	6820      	ldr	r0, [r4, #0]
 800560a:	1821      	adds	r1, r4, r0
 800560c:	428b      	cmp	r3, r1
 800560e:	bf04      	itt	eq
 8005610:	6819      	ldreq	r1, [r3, #0]
 8005612:	685b      	ldreq	r3, [r3, #4]
 8005614:	6063      	str	r3, [r4, #4]
 8005616:	bf04      	itt	eq
 8005618:	1809      	addeq	r1, r1, r0
 800561a:	6021      	streq	r1, [r4, #0]
 800561c:	6054      	str	r4, [r2, #4]
 800561e:	e7ca      	b.n	80055b6 <_free_r+0x22>
 8005620:	bd38      	pop	{r3, r4, r5, pc}
 8005622:	bf00      	nop
 8005624:	200005b8 	.word	0x200005b8

08005628 <malloc>:
 8005628:	4b02      	ldr	r3, [pc, #8]	@ (8005634 <malloc+0xc>)
 800562a:	4601      	mov	r1, r0
 800562c:	6818      	ldr	r0, [r3, #0]
 800562e:	f000 b825 	b.w	800567c <_malloc_r>
 8005632:	bf00      	nop
 8005634:	20000018 	.word	0x20000018

08005638 <sbrk_aligned>:
 8005638:	b570      	push	{r4, r5, r6, lr}
 800563a:	4e0f      	ldr	r6, [pc, #60]	@ (8005678 <sbrk_aligned+0x40>)
 800563c:	460c      	mov	r4, r1
 800563e:	6831      	ldr	r1, [r6, #0]
 8005640:	4605      	mov	r5, r0
 8005642:	b911      	cbnz	r1, 800564a <sbrk_aligned+0x12>
 8005644:	f000 fc64 	bl	8005f10 <_sbrk_r>
 8005648:	6030      	str	r0, [r6, #0]
 800564a:	4621      	mov	r1, r4
 800564c:	4628      	mov	r0, r5
 800564e:	f000 fc5f 	bl	8005f10 <_sbrk_r>
 8005652:	1c43      	adds	r3, r0, #1
 8005654:	d103      	bne.n	800565e <sbrk_aligned+0x26>
 8005656:	f04f 34ff 	mov.w	r4, #4294967295
 800565a:	4620      	mov	r0, r4
 800565c:	bd70      	pop	{r4, r5, r6, pc}
 800565e:	1cc4      	adds	r4, r0, #3
 8005660:	f024 0403 	bic.w	r4, r4, #3
 8005664:	42a0      	cmp	r0, r4
 8005666:	d0f8      	beq.n	800565a <sbrk_aligned+0x22>
 8005668:	1a21      	subs	r1, r4, r0
 800566a:	4628      	mov	r0, r5
 800566c:	f000 fc50 	bl	8005f10 <_sbrk_r>
 8005670:	3001      	adds	r0, #1
 8005672:	d1f2      	bne.n	800565a <sbrk_aligned+0x22>
 8005674:	e7ef      	b.n	8005656 <sbrk_aligned+0x1e>
 8005676:	bf00      	nop
 8005678:	200005b4 	.word	0x200005b4

0800567c <_malloc_r>:
 800567c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005680:	1ccd      	adds	r5, r1, #3
 8005682:	f025 0503 	bic.w	r5, r5, #3
 8005686:	3508      	adds	r5, #8
 8005688:	2d0c      	cmp	r5, #12
 800568a:	bf38      	it	cc
 800568c:	250c      	movcc	r5, #12
 800568e:	2d00      	cmp	r5, #0
 8005690:	4606      	mov	r6, r0
 8005692:	db01      	blt.n	8005698 <_malloc_r+0x1c>
 8005694:	42a9      	cmp	r1, r5
 8005696:	d904      	bls.n	80056a2 <_malloc_r+0x26>
 8005698:	230c      	movs	r3, #12
 800569a:	6033      	str	r3, [r6, #0]
 800569c:	2000      	movs	r0, #0
 800569e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005778 <_malloc_r+0xfc>
 80056a6:	f000 f869 	bl	800577c <__malloc_lock>
 80056aa:	f8d8 3000 	ldr.w	r3, [r8]
 80056ae:	461c      	mov	r4, r3
 80056b0:	bb44      	cbnz	r4, 8005704 <_malloc_r+0x88>
 80056b2:	4629      	mov	r1, r5
 80056b4:	4630      	mov	r0, r6
 80056b6:	f7ff ffbf 	bl	8005638 <sbrk_aligned>
 80056ba:	1c43      	adds	r3, r0, #1
 80056bc:	4604      	mov	r4, r0
 80056be:	d158      	bne.n	8005772 <_malloc_r+0xf6>
 80056c0:	f8d8 4000 	ldr.w	r4, [r8]
 80056c4:	4627      	mov	r7, r4
 80056c6:	2f00      	cmp	r7, #0
 80056c8:	d143      	bne.n	8005752 <_malloc_r+0xd6>
 80056ca:	2c00      	cmp	r4, #0
 80056cc:	d04b      	beq.n	8005766 <_malloc_r+0xea>
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	4639      	mov	r1, r7
 80056d2:	4630      	mov	r0, r6
 80056d4:	eb04 0903 	add.w	r9, r4, r3
 80056d8:	f000 fc1a 	bl	8005f10 <_sbrk_r>
 80056dc:	4581      	cmp	r9, r0
 80056de:	d142      	bne.n	8005766 <_malloc_r+0xea>
 80056e0:	6821      	ldr	r1, [r4, #0]
 80056e2:	1a6d      	subs	r5, r5, r1
 80056e4:	4629      	mov	r1, r5
 80056e6:	4630      	mov	r0, r6
 80056e8:	f7ff ffa6 	bl	8005638 <sbrk_aligned>
 80056ec:	3001      	adds	r0, #1
 80056ee:	d03a      	beq.n	8005766 <_malloc_r+0xea>
 80056f0:	6823      	ldr	r3, [r4, #0]
 80056f2:	442b      	add	r3, r5
 80056f4:	6023      	str	r3, [r4, #0]
 80056f6:	f8d8 3000 	ldr.w	r3, [r8]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	bb62      	cbnz	r2, 8005758 <_malloc_r+0xdc>
 80056fe:	f8c8 7000 	str.w	r7, [r8]
 8005702:	e00f      	b.n	8005724 <_malloc_r+0xa8>
 8005704:	6822      	ldr	r2, [r4, #0]
 8005706:	1b52      	subs	r2, r2, r5
 8005708:	d420      	bmi.n	800574c <_malloc_r+0xd0>
 800570a:	2a0b      	cmp	r2, #11
 800570c:	d917      	bls.n	800573e <_malloc_r+0xc2>
 800570e:	1961      	adds	r1, r4, r5
 8005710:	42a3      	cmp	r3, r4
 8005712:	6025      	str	r5, [r4, #0]
 8005714:	bf18      	it	ne
 8005716:	6059      	strne	r1, [r3, #4]
 8005718:	6863      	ldr	r3, [r4, #4]
 800571a:	bf08      	it	eq
 800571c:	f8c8 1000 	streq.w	r1, [r8]
 8005720:	5162      	str	r2, [r4, r5]
 8005722:	604b      	str	r3, [r1, #4]
 8005724:	4630      	mov	r0, r6
 8005726:	f000 f82f 	bl	8005788 <__malloc_unlock>
 800572a:	f104 000b 	add.w	r0, r4, #11
 800572e:	1d23      	adds	r3, r4, #4
 8005730:	f020 0007 	bic.w	r0, r0, #7
 8005734:	1ac2      	subs	r2, r0, r3
 8005736:	bf1c      	itt	ne
 8005738:	1a1b      	subne	r3, r3, r0
 800573a:	50a3      	strne	r3, [r4, r2]
 800573c:	e7af      	b.n	800569e <_malloc_r+0x22>
 800573e:	6862      	ldr	r2, [r4, #4]
 8005740:	42a3      	cmp	r3, r4
 8005742:	bf0c      	ite	eq
 8005744:	f8c8 2000 	streq.w	r2, [r8]
 8005748:	605a      	strne	r2, [r3, #4]
 800574a:	e7eb      	b.n	8005724 <_malloc_r+0xa8>
 800574c:	4623      	mov	r3, r4
 800574e:	6864      	ldr	r4, [r4, #4]
 8005750:	e7ae      	b.n	80056b0 <_malloc_r+0x34>
 8005752:	463c      	mov	r4, r7
 8005754:	687f      	ldr	r7, [r7, #4]
 8005756:	e7b6      	b.n	80056c6 <_malloc_r+0x4a>
 8005758:	461a      	mov	r2, r3
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	42a3      	cmp	r3, r4
 800575e:	d1fb      	bne.n	8005758 <_malloc_r+0xdc>
 8005760:	2300      	movs	r3, #0
 8005762:	6053      	str	r3, [r2, #4]
 8005764:	e7de      	b.n	8005724 <_malloc_r+0xa8>
 8005766:	230c      	movs	r3, #12
 8005768:	6033      	str	r3, [r6, #0]
 800576a:	4630      	mov	r0, r6
 800576c:	f000 f80c 	bl	8005788 <__malloc_unlock>
 8005770:	e794      	b.n	800569c <_malloc_r+0x20>
 8005772:	6005      	str	r5, [r0, #0]
 8005774:	e7d6      	b.n	8005724 <_malloc_r+0xa8>
 8005776:	bf00      	nop
 8005778:	200005b8 	.word	0x200005b8

0800577c <__malloc_lock>:
 800577c:	4801      	ldr	r0, [pc, #4]	@ (8005784 <__malloc_lock+0x8>)
 800577e:	f7ff bee8 	b.w	8005552 <__retarget_lock_acquire_recursive>
 8005782:	bf00      	nop
 8005784:	200005b0 	.word	0x200005b0

08005788 <__malloc_unlock>:
 8005788:	4801      	ldr	r0, [pc, #4]	@ (8005790 <__malloc_unlock+0x8>)
 800578a:	f7ff bee3 	b.w	8005554 <__retarget_lock_release_recursive>
 800578e:	bf00      	nop
 8005790:	200005b0 	.word	0x200005b0

08005794 <__ssputs_r>:
 8005794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005798:	688e      	ldr	r6, [r1, #8]
 800579a:	461f      	mov	r7, r3
 800579c:	42be      	cmp	r6, r7
 800579e:	680b      	ldr	r3, [r1, #0]
 80057a0:	4682      	mov	sl, r0
 80057a2:	460c      	mov	r4, r1
 80057a4:	4690      	mov	r8, r2
 80057a6:	d82d      	bhi.n	8005804 <__ssputs_r+0x70>
 80057a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80057ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80057b0:	d026      	beq.n	8005800 <__ssputs_r+0x6c>
 80057b2:	6965      	ldr	r5, [r4, #20]
 80057b4:	6909      	ldr	r1, [r1, #16]
 80057b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057ba:	eba3 0901 	sub.w	r9, r3, r1
 80057be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057c2:	1c7b      	adds	r3, r7, #1
 80057c4:	444b      	add	r3, r9
 80057c6:	106d      	asrs	r5, r5, #1
 80057c8:	429d      	cmp	r5, r3
 80057ca:	bf38      	it	cc
 80057cc:	461d      	movcc	r5, r3
 80057ce:	0553      	lsls	r3, r2, #21
 80057d0:	d527      	bpl.n	8005822 <__ssputs_r+0x8e>
 80057d2:	4629      	mov	r1, r5
 80057d4:	f7ff ff52 	bl	800567c <_malloc_r>
 80057d8:	4606      	mov	r6, r0
 80057da:	b360      	cbz	r0, 8005836 <__ssputs_r+0xa2>
 80057dc:	6921      	ldr	r1, [r4, #16]
 80057de:	464a      	mov	r2, r9
 80057e0:	f000 fba6 	bl	8005f30 <memcpy>
 80057e4:	89a3      	ldrh	r3, [r4, #12]
 80057e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80057ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057ee:	81a3      	strh	r3, [r4, #12]
 80057f0:	6126      	str	r6, [r4, #16]
 80057f2:	6165      	str	r5, [r4, #20]
 80057f4:	444e      	add	r6, r9
 80057f6:	eba5 0509 	sub.w	r5, r5, r9
 80057fa:	6026      	str	r6, [r4, #0]
 80057fc:	60a5      	str	r5, [r4, #8]
 80057fe:	463e      	mov	r6, r7
 8005800:	42be      	cmp	r6, r7
 8005802:	d900      	bls.n	8005806 <__ssputs_r+0x72>
 8005804:	463e      	mov	r6, r7
 8005806:	6820      	ldr	r0, [r4, #0]
 8005808:	4632      	mov	r2, r6
 800580a:	4641      	mov	r1, r8
 800580c:	f000 fb66 	bl	8005edc <memmove>
 8005810:	68a3      	ldr	r3, [r4, #8]
 8005812:	1b9b      	subs	r3, r3, r6
 8005814:	60a3      	str	r3, [r4, #8]
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	4433      	add	r3, r6
 800581a:	6023      	str	r3, [r4, #0]
 800581c:	2000      	movs	r0, #0
 800581e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005822:	462a      	mov	r2, r5
 8005824:	f000 fb99 	bl	8005f5a <_realloc_r>
 8005828:	4606      	mov	r6, r0
 800582a:	2800      	cmp	r0, #0
 800582c:	d1e0      	bne.n	80057f0 <__ssputs_r+0x5c>
 800582e:	6921      	ldr	r1, [r4, #16]
 8005830:	4650      	mov	r0, sl
 8005832:	f7ff feaf 	bl	8005594 <_free_r>
 8005836:	230c      	movs	r3, #12
 8005838:	f8ca 3000 	str.w	r3, [sl]
 800583c:	89a3      	ldrh	r3, [r4, #12]
 800583e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005842:	81a3      	strh	r3, [r4, #12]
 8005844:	f04f 30ff 	mov.w	r0, #4294967295
 8005848:	e7e9      	b.n	800581e <__ssputs_r+0x8a>
	...

0800584c <_svfiprintf_r>:
 800584c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005850:	4698      	mov	r8, r3
 8005852:	898b      	ldrh	r3, [r1, #12]
 8005854:	061b      	lsls	r3, r3, #24
 8005856:	b09d      	sub	sp, #116	@ 0x74
 8005858:	4607      	mov	r7, r0
 800585a:	460d      	mov	r5, r1
 800585c:	4614      	mov	r4, r2
 800585e:	d510      	bpl.n	8005882 <_svfiprintf_r+0x36>
 8005860:	690b      	ldr	r3, [r1, #16]
 8005862:	b973      	cbnz	r3, 8005882 <_svfiprintf_r+0x36>
 8005864:	2140      	movs	r1, #64	@ 0x40
 8005866:	f7ff ff09 	bl	800567c <_malloc_r>
 800586a:	6028      	str	r0, [r5, #0]
 800586c:	6128      	str	r0, [r5, #16]
 800586e:	b930      	cbnz	r0, 800587e <_svfiprintf_r+0x32>
 8005870:	230c      	movs	r3, #12
 8005872:	603b      	str	r3, [r7, #0]
 8005874:	f04f 30ff 	mov.w	r0, #4294967295
 8005878:	b01d      	add	sp, #116	@ 0x74
 800587a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800587e:	2340      	movs	r3, #64	@ 0x40
 8005880:	616b      	str	r3, [r5, #20]
 8005882:	2300      	movs	r3, #0
 8005884:	9309      	str	r3, [sp, #36]	@ 0x24
 8005886:	2320      	movs	r3, #32
 8005888:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800588c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005890:	2330      	movs	r3, #48	@ 0x30
 8005892:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005a30 <_svfiprintf_r+0x1e4>
 8005896:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800589a:	f04f 0901 	mov.w	r9, #1
 800589e:	4623      	mov	r3, r4
 80058a0:	469a      	mov	sl, r3
 80058a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058a6:	b10a      	cbz	r2, 80058ac <_svfiprintf_r+0x60>
 80058a8:	2a25      	cmp	r2, #37	@ 0x25
 80058aa:	d1f9      	bne.n	80058a0 <_svfiprintf_r+0x54>
 80058ac:	ebba 0b04 	subs.w	fp, sl, r4
 80058b0:	d00b      	beq.n	80058ca <_svfiprintf_r+0x7e>
 80058b2:	465b      	mov	r3, fp
 80058b4:	4622      	mov	r2, r4
 80058b6:	4629      	mov	r1, r5
 80058b8:	4638      	mov	r0, r7
 80058ba:	f7ff ff6b 	bl	8005794 <__ssputs_r>
 80058be:	3001      	adds	r0, #1
 80058c0:	f000 80a7 	beq.w	8005a12 <_svfiprintf_r+0x1c6>
 80058c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058c6:	445a      	add	r2, fp
 80058c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80058ca:	f89a 3000 	ldrb.w	r3, [sl]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f000 809f 	beq.w	8005a12 <_svfiprintf_r+0x1c6>
 80058d4:	2300      	movs	r3, #0
 80058d6:	f04f 32ff 	mov.w	r2, #4294967295
 80058da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058de:	f10a 0a01 	add.w	sl, sl, #1
 80058e2:	9304      	str	r3, [sp, #16]
 80058e4:	9307      	str	r3, [sp, #28]
 80058e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80058ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80058ec:	4654      	mov	r4, sl
 80058ee:	2205      	movs	r2, #5
 80058f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058f4:	484e      	ldr	r0, [pc, #312]	@ (8005a30 <_svfiprintf_r+0x1e4>)
 80058f6:	f7fa fc73 	bl	80001e0 <memchr>
 80058fa:	9a04      	ldr	r2, [sp, #16]
 80058fc:	b9d8      	cbnz	r0, 8005936 <_svfiprintf_r+0xea>
 80058fe:	06d0      	lsls	r0, r2, #27
 8005900:	bf44      	itt	mi
 8005902:	2320      	movmi	r3, #32
 8005904:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005908:	0711      	lsls	r1, r2, #28
 800590a:	bf44      	itt	mi
 800590c:	232b      	movmi	r3, #43	@ 0x2b
 800590e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005912:	f89a 3000 	ldrb.w	r3, [sl]
 8005916:	2b2a      	cmp	r3, #42	@ 0x2a
 8005918:	d015      	beq.n	8005946 <_svfiprintf_r+0xfa>
 800591a:	9a07      	ldr	r2, [sp, #28]
 800591c:	4654      	mov	r4, sl
 800591e:	2000      	movs	r0, #0
 8005920:	f04f 0c0a 	mov.w	ip, #10
 8005924:	4621      	mov	r1, r4
 8005926:	f811 3b01 	ldrb.w	r3, [r1], #1
 800592a:	3b30      	subs	r3, #48	@ 0x30
 800592c:	2b09      	cmp	r3, #9
 800592e:	d94b      	bls.n	80059c8 <_svfiprintf_r+0x17c>
 8005930:	b1b0      	cbz	r0, 8005960 <_svfiprintf_r+0x114>
 8005932:	9207      	str	r2, [sp, #28]
 8005934:	e014      	b.n	8005960 <_svfiprintf_r+0x114>
 8005936:	eba0 0308 	sub.w	r3, r0, r8
 800593a:	fa09 f303 	lsl.w	r3, r9, r3
 800593e:	4313      	orrs	r3, r2
 8005940:	9304      	str	r3, [sp, #16]
 8005942:	46a2      	mov	sl, r4
 8005944:	e7d2      	b.n	80058ec <_svfiprintf_r+0xa0>
 8005946:	9b03      	ldr	r3, [sp, #12]
 8005948:	1d19      	adds	r1, r3, #4
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	9103      	str	r1, [sp, #12]
 800594e:	2b00      	cmp	r3, #0
 8005950:	bfbb      	ittet	lt
 8005952:	425b      	neglt	r3, r3
 8005954:	f042 0202 	orrlt.w	r2, r2, #2
 8005958:	9307      	strge	r3, [sp, #28]
 800595a:	9307      	strlt	r3, [sp, #28]
 800595c:	bfb8      	it	lt
 800595e:	9204      	strlt	r2, [sp, #16]
 8005960:	7823      	ldrb	r3, [r4, #0]
 8005962:	2b2e      	cmp	r3, #46	@ 0x2e
 8005964:	d10a      	bne.n	800597c <_svfiprintf_r+0x130>
 8005966:	7863      	ldrb	r3, [r4, #1]
 8005968:	2b2a      	cmp	r3, #42	@ 0x2a
 800596a:	d132      	bne.n	80059d2 <_svfiprintf_r+0x186>
 800596c:	9b03      	ldr	r3, [sp, #12]
 800596e:	1d1a      	adds	r2, r3, #4
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	9203      	str	r2, [sp, #12]
 8005974:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005978:	3402      	adds	r4, #2
 800597a:	9305      	str	r3, [sp, #20]
 800597c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005a40 <_svfiprintf_r+0x1f4>
 8005980:	7821      	ldrb	r1, [r4, #0]
 8005982:	2203      	movs	r2, #3
 8005984:	4650      	mov	r0, sl
 8005986:	f7fa fc2b 	bl	80001e0 <memchr>
 800598a:	b138      	cbz	r0, 800599c <_svfiprintf_r+0x150>
 800598c:	9b04      	ldr	r3, [sp, #16]
 800598e:	eba0 000a 	sub.w	r0, r0, sl
 8005992:	2240      	movs	r2, #64	@ 0x40
 8005994:	4082      	lsls	r2, r0
 8005996:	4313      	orrs	r3, r2
 8005998:	3401      	adds	r4, #1
 800599a:	9304      	str	r3, [sp, #16]
 800599c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059a0:	4824      	ldr	r0, [pc, #144]	@ (8005a34 <_svfiprintf_r+0x1e8>)
 80059a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80059a6:	2206      	movs	r2, #6
 80059a8:	f7fa fc1a 	bl	80001e0 <memchr>
 80059ac:	2800      	cmp	r0, #0
 80059ae:	d036      	beq.n	8005a1e <_svfiprintf_r+0x1d2>
 80059b0:	4b21      	ldr	r3, [pc, #132]	@ (8005a38 <_svfiprintf_r+0x1ec>)
 80059b2:	bb1b      	cbnz	r3, 80059fc <_svfiprintf_r+0x1b0>
 80059b4:	9b03      	ldr	r3, [sp, #12]
 80059b6:	3307      	adds	r3, #7
 80059b8:	f023 0307 	bic.w	r3, r3, #7
 80059bc:	3308      	adds	r3, #8
 80059be:	9303      	str	r3, [sp, #12]
 80059c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059c2:	4433      	add	r3, r6
 80059c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80059c6:	e76a      	b.n	800589e <_svfiprintf_r+0x52>
 80059c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80059cc:	460c      	mov	r4, r1
 80059ce:	2001      	movs	r0, #1
 80059d0:	e7a8      	b.n	8005924 <_svfiprintf_r+0xd8>
 80059d2:	2300      	movs	r3, #0
 80059d4:	3401      	adds	r4, #1
 80059d6:	9305      	str	r3, [sp, #20]
 80059d8:	4619      	mov	r1, r3
 80059da:	f04f 0c0a 	mov.w	ip, #10
 80059de:	4620      	mov	r0, r4
 80059e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059e4:	3a30      	subs	r2, #48	@ 0x30
 80059e6:	2a09      	cmp	r2, #9
 80059e8:	d903      	bls.n	80059f2 <_svfiprintf_r+0x1a6>
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d0c6      	beq.n	800597c <_svfiprintf_r+0x130>
 80059ee:	9105      	str	r1, [sp, #20]
 80059f0:	e7c4      	b.n	800597c <_svfiprintf_r+0x130>
 80059f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80059f6:	4604      	mov	r4, r0
 80059f8:	2301      	movs	r3, #1
 80059fa:	e7f0      	b.n	80059de <_svfiprintf_r+0x192>
 80059fc:	ab03      	add	r3, sp, #12
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	462a      	mov	r2, r5
 8005a02:	4b0e      	ldr	r3, [pc, #56]	@ (8005a3c <_svfiprintf_r+0x1f0>)
 8005a04:	a904      	add	r1, sp, #16
 8005a06:	4638      	mov	r0, r7
 8005a08:	f3af 8000 	nop.w
 8005a0c:	1c42      	adds	r2, r0, #1
 8005a0e:	4606      	mov	r6, r0
 8005a10:	d1d6      	bne.n	80059c0 <_svfiprintf_r+0x174>
 8005a12:	89ab      	ldrh	r3, [r5, #12]
 8005a14:	065b      	lsls	r3, r3, #25
 8005a16:	f53f af2d 	bmi.w	8005874 <_svfiprintf_r+0x28>
 8005a1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a1c:	e72c      	b.n	8005878 <_svfiprintf_r+0x2c>
 8005a1e:	ab03      	add	r3, sp, #12
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	462a      	mov	r2, r5
 8005a24:	4b05      	ldr	r3, [pc, #20]	@ (8005a3c <_svfiprintf_r+0x1f0>)
 8005a26:	a904      	add	r1, sp, #16
 8005a28:	4638      	mov	r0, r7
 8005a2a:	f000 f879 	bl	8005b20 <_printf_i>
 8005a2e:	e7ed      	b.n	8005a0c <_svfiprintf_r+0x1c0>
 8005a30:	080067df 	.word	0x080067df
 8005a34:	080067e9 	.word	0x080067e9
 8005a38:	00000000 	.word	0x00000000
 8005a3c:	08005795 	.word	0x08005795
 8005a40:	080067e5 	.word	0x080067e5

08005a44 <_printf_common>:
 8005a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a48:	4616      	mov	r6, r2
 8005a4a:	4698      	mov	r8, r3
 8005a4c:	688a      	ldr	r2, [r1, #8]
 8005a4e:	690b      	ldr	r3, [r1, #16]
 8005a50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a54:	4293      	cmp	r3, r2
 8005a56:	bfb8      	it	lt
 8005a58:	4613      	movlt	r3, r2
 8005a5a:	6033      	str	r3, [r6, #0]
 8005a5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a60:	4607      	mov	r7, r0
 8005a62:	460c      	mov	r4, r1
 8005a64:	b10a      	cbz	r2, 8005a6a <_printf_common+0x26>
 8005a66:	3301      	adds	r3, #1
 8005a68:	6033      	str	r3, [r6, #0]
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	0699      	lsls	r1, r3, #26
 8005a6e:	bf42      	ittt	mi
 8005a70:	6833      	ldrmi	r3, [r6, #0]
 8005a72:	3302      	addmi	r3, #2
 8005a74:	6033      	strmi	r3, [r6, #0]
 8005a76:	6825      	ldr	r5, [r4, #0]
 8005a78:	f015 0506 	ands.w	r5, r5, #6
 8005a7c:	d106      	bne.n	8005a8c <_printf_common+0x48>
 8005a7e:	f104 0a19 	add.w	sl, r4, #25
 8005a82:	68e3      	ldr	r3, [r4, #12]
 8005a84:	6832      	ldr	r2, [r6, #0]
 8005a86:	1a9b      	subs	r3, r3, r2
 8005a88:	42ab      	cmp	r3, r5
 8005a8a:	dc26      	bgt.n	8005ada <_printf_common+0x96>
 8005a8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a90:	6822      	ldr	r2, [r4, #0]
 8005a92:	3b00      	subs	r3, #0
 8005a94:	bf18      	it	ne
 8005a96:	2301      	movne	r3, #1
 8005a98:	0692      	lsls	r2, r2, #26
 8005a9a:	d42b      	bmi.n	8005af4 <_printf_common+0xb0>
 8005a9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005aa0:	4641      	mov	r1, r8
 8005aa2:	4638      	mov	r0, r7
 8005aa4:	47c8      	blx	r9
 8005aa6:	3001      	adds	r0, #1
 8005aa8:	d01e      	beq.n	8005ae8 <_printf_common+0xa4>
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	6922      	ldr	r2, [r4, #16]
 8005aae:	f003 0306 	and.w	r3, r3, #6
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	bf02      	ittt	eq
 8005ab6:	68e5      	ldreq	r5, [r4, #12]
 8005ab8:	6833      	ldreq	r3, [r6, #0]
 8005aba:	1aed      	subeq	r5, r5, r3
 8005abc:	68a3      	ldr	r3, [r4, #8]
 8005abe:	bf0c      	ite	eq
 8005ac0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ac4:	2500      	movne	r5, #0
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	bfc4      	itt	gt
 8005aca:	1a9b      	subgt	r3, r3, r2
 8005acc:	18ed      	addgt	r5, r5, r3
 8005ace:	2600      	movs	r6, #0
 8005ad0:	341a      	adds	r4, #26
 8005ad2:	42b5      	cmp	r5, r6
 8005ad4:	d11a      	bne.n	8005b0c <_printf_common+0xc8>
 8005ad6:	2000      	movs	r0, #0
 8005ad8:	e008      	b.n	8005aec <_printf_common+0xa8>
 8005ada:	2301      	movs	r3, #1
 8005adc:	4652      	mov	r2, sl
 8005ade:	4641      	mov	r1, r8
 8005ae0:	4638      	mov	r0, r7
 8005ae2:	47c8      	blx	r9
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	d103      	bne.n	8005af0 <_printf_common+0xac>
 8005ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8005aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af0:	3501      	adds	r5, #1
 8005af2:	e7c6      	b.n	8005a82 <_printf_common+0x3e>
 8005af4:	18e1      	adds	r1, r4, r3
 8005af6:	1c5a      	adds	r2, r3, #1
 8005af8:	2030      	movs	r0, #48	@ 0x30
 8005afa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005afe:	4422      	add	r2, r4
 8005b00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b08:	3302      	adds	r3, #2
 8005b0a:	e7c7      	b.n	8005a9c <_printf_common+0x58>
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	4622      	mov	r2, r4
 8005b10:	4641      	mov	r1, r8
 8005b12:	4638      	mov	r0, r7
 8005b14:	47c8      	blx	r9
 8005b16:	3001      	adds	r0, #1
 8005b18:	d0e6      	beq.n	8005ae8 <_printf_common+0xa4>
 8005b1a:	3601      	adds	r6, #1
 8005b1c:	e7d9      	b.n	8005ad2 <_printf_common+0x8e>
	...

08005b20 <_printf_i>:
 8005b20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b24:	7e0f      	ldrb	r7, [r1, #24]
 8005b26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b28:	2f78      	cmp	r7, #120	@ 0x78
 8005b2a:	4691      	mov	r9, r2
 8005b2c:	4680      	mov	r8, r0
 8005b2e:	460c      	mov	r4, r1
 8005b30:	469a      	mov	sl, r3
 8005b32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b36:	d807      	bhi.n	8005b48 <_printf_i+0x28>
 8005b38:	2f62      	cmp	r7, #98	@ 0x62
 8005b3a:	d80a      	bhi.n	8005b52 <_printf_i+0x32>
 8005b3c:	2f00      	cmp	r7, #0
 8005b3e:	f000 80d2 	beq.w	8005ce6 <_printf_i+0x1c6>
 8005b42:	2f58      	cmp	r7, #88	@ 0x58
 8005b44:	f000 80b9 	beq.w	8005cba <_printf_i+0x19a>
 8005b48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b50:	e03a      	b.n	8005bc8 <_printf_i+0xa8>
 8005b52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b56:	2b15      	cmp	r3, #21
 8005b58:	d8f6      	bhi.n	8005b48 <_printf_i+0x28>
 8005b5a:	a101      	add	r1, pc, #4	@ (adr r1, 8005b60 <_printf_i+0x40>)
 8005b5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b60:	08005bb9 	.word	0x08005bb9
 8005b64:	08005bcd 	.word	0x08005bcd
 8005b68:	08005b49 	.word	0x08005b49
 8005b6c:	08005b49 	.word	0x08005b49
 8005b70:	08005b49 	.word	0x08005b49
 8005b74:	08005b49 	.word	0x08005b49
 8005b78:	08005bcd 	.word	0x08005bcd
 8005b7c:	08005b49 	.word	0x08005b49
 8005b80:	08005b49 	.word	0x08005b49
 8005b84:	08005b49 	.word	0x08005b49
 8005b88:	08005b49 	.word	0x08005b49
 8005b8c:	08005ccd 	.word	0x08005ccd
 8005b90:	08005bf7 	.word	0x08005bf7
 8005b94:	08005c87 	.word	0x08005c87
 8005b98:	08005b49 	.word	0x08005b49
 8005b9c:	08005b49 	.word	0x08005b49
 8005ba0:	08005cef 	.word	0x08005cef
 8005ba4:	08005b49 	.word	0x08005b49
 8005ba8:	08005bf7 	.word	0x08005bf7
 8005bac:	08005b49 	.word	0x08005b49
 8005bb0:	08005b49 	.word	0x08005b49
 8005bb4:	08005c8f 	.word	0x08005c8f
 8005bb8:	6833      	ldr	r3, [r6, #0]
 8005bba:	1d1a      	adds	r2, r3, #4
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6032      	str	r2, [r6, #0]
 8005bc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005bc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e09d      	b.n	8005d08 <_printf_i+0x1e8>
 8005bcc:	6833      	ldr	r3, [r6, #0]
 8005bce:	6820      	ldr	r0, [r4, #0]
 8005bd0:	1d19      	adds	r1, r3, #4
 8005bd2:	6031      	str	r1, [r6, #0]
 8005bd4:	0606      	lsls	r6, r0, #24
 8005bd6:	d501      	bpl.n	8005bdc <_printf_i+0xbc>
 8005bd8:	681d      	ldr	r5, [r3, #0]
 8005bda:	e003      	b.n	8005be4 <_printf_i+0xc4>
 8005bdc:	0645      	lsls	r5, r0, #25
 8005bde:	d5fb      	bpl.n	8005bd8 <_printf_i+0xb8>
 8005be0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005be4:	2d00      	cmp	r5, #0
 8005be6:	da03      	bge.n	8005bf0 <_printf_i+0xd0>
 8005be8:	232d      	movs	r3, #45	@ 0x2d
 8005bea:	426d      	negs	r5, r5
 8005bec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bf0:	4859      	ldr	r0, [pc, #356]	@ (8005d58 <_printf_i+0x238>)
 8005bf2:	230a      	movs	r3, #10
 8005bf4:	e011      	b.n	8005c1a <_printf_i+0xfa>
 8005bf6:	6821      	ldr	r1, [r4, #0]
 8005bf8:	6833      	ldr	r3, [r6, #0]
 8005bfa:	0608      	lsls	r0, r1, #24
 8005bfc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c00:	d402      	bmi.n	8005c08 <_printf_i+0xe8>
 8005c02:	0649      	lsls	r1, r1, #25
 8005c04:	bf48      	it	mi
 8005c06:	b2ad      	uxthmi	r5, r5
 8005c08:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c0a:	4853      	ldr	r0, [pc, #332]	@ (8005d58 <_printf_i+0x238>)
 8005c0c:	6033      	str	r3, [r6, #0]
 8005c0e:	bf14      	ite	ne
 8005c10:	230a      	movne	r3, #10
 8005c12:	2308      	moveq	r3, #8
 8005c14:	2100      	movs	r1, #0
 8005c16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c1a:	6866      	ldr	r6, [r4, #4]
 8005c1c:	60a6      	str	r6, [r4, #8]
 8005c1e:	2e00      	cmp	r6, #0
 8005c20:	bfa2      	ittt	ge
 8005c22:	6821      	ldrge	r1, [r4, #0]
 8005c24:	f021 0104 	bicge.w	r1, r1, #4
 8005c28:	6021      	strge	r1, [r4, #0]
 8005c2a:	b90d      	cbnz	r5, 8005c30 <_printf_i+0x110>
 8005c2c:	2e00      	cmp	r6, #0
 8005c2e:	d04b      	beq.n	8005cc8 <_printf_i+0x1a8>
 8005c30:	4616      	mov	r6, r2
 8005c32:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c36:	fb03 5711 	mls	r7, r3, r1, r5
 8005c3a:	5dc7      	ldrb	r7, [r0, r7]
 8005c3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c40:	462f      	mov	r7, r5
 8005c42:	42bb      	cmp	r3, r7
 8005c44:	460d      	mov	r5, r1
 8005c46:	d9f4      	bls.n	8005c32 <_printf_i+0x112>
 8005c48:	2b08      	cmp	r3, #8
 8005c4a:	d10b      	bne.n	8005c64 <_printf_i+0x144>
 8005c4c:	6823      	ldr	r3, [r4, #0]
 8005c4e:	07df      	lsls	r7, r3, #31
 8005c50:	d508      	bpl.n	8005c64 <_printf_i+0x144>
 8005c52:	6923      	ldr	r3, [r4, #16]
 8005c54:	6861      	ldr	r1, [r4, #4]
 8005c56:	4299      	cmp	r1, r3
 8005c58:	bfde      	ittt	le
 8005c5a:	2330      	movle	r3, #48	@ 0x30
 8005c5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c60:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c64:	1b92      	subs	r2, r2, r6
 8005c66:	6122      	str	r2, [r4, #16]
 8005c68:	f8cd a000 	str.w	sl, [sp]
 8005c6c:	464b      	mov	r3, r9
 8005c6e:	aa03      	add	r2, sp, #12
 8005c70:	4621      	mov	r1, r4
 8005c72:	4640      	mov	r0, r8
 8005c74:	f7ff fee6 	bl	8005a44 <_printf_common>
 8005c78:	3001      	adds	r0, #1
 8005c7a:	d14a      	bne.n	8005d12 <_printf_i+0x1f2>
 8005c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c80:	b004      	add	sp, #16
 8005c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	f043 0320 	orr.w	r3, r3, #32
 8005c8c:	6023      	str	r3, [r4, #0]
 8005c8e:	4833      	ldr	r0, [pc, #204]	@ (8005d5c <_printf_i+0x23c>)
 8005c90:	2778      	movs	r7, #120	@ 0x78
 8005c92:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	6831      	ldr	r1, [r6, #0]
 8005c9a:	061f      	lsls	r7, r3, #24
 8005c9c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ca0:	d402      	bmi.n	8005ca8 <_printf_i+0x188>
 8005ca2:	065f      	lsls	r7, r3, #25
 8005ca4:	bf48      	it	mi
 8005ca6:	b2ad      	uxthmi	r5, r5
 8005ca8:	6031      	str	r1, [r6, #0]
 8005caa:	07d9      	lsls	r1, r3, #31
 8005cac:	bf44      	itt	mi
 8005cae:	f043 0320 	orrmi.w	r3, r3, #32
 8005cb2:	6023      	strmi	r3, [r4, #0]
 8005cb4:	b11d      	cbz	r5, 8005cbe <_printf_i+0x19e>
 8005cb6:	2310      	movs	r3, #16
 8005cb8:	e7ac      	b.n	8005c14 <_printf_i+0xf4>
 8005cba:	4827      	ldr	r0, [pc, #156]	@ (8005d58 <_printf_i+0x238>)
 8005cbc:	e7e9      	b.n	8005c92 <_printf_i+0x172>
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	f023 0320 	bic.w	r3, r3, #32
 8005cc4:	6023      	str	r3, [r4, #0]
 8005cc6:	e7f6      	b.n	8005cb6 <_printf_i+0x196>
 8005cc8:	4616      	mov	r6, r2
 8005cca:	e7bd      	b.n	8005c48 <_printf_i+0x128>
 8005ccc:	6833      	ldr	r3, [r6, #0]
 8005cce:	6825      	ldr	r5, [r4, #0]
 8005cd0:	6961      	ldr	r1, [r4, #20]
 8005cd2:	1d18      	adds	r0, r3, #4
 8005cd4:	6030      	str	r0, [r6, #0]
 8005cd6:	062e      	lsls	r6, r5, #24
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	d501      	bpl.n	8005ce0 <_printf_i+0x1c0>
 8005cdc:	6019      	str	r1, [r3, #0]
 8005cde:	e002      	b.n	8005ce6 <_printf_i+0x1c6>
 8005ce0:	0668      	lsls	r0, r5, #25
 8005ce2:	d5fb      	bpl.n	8005cdc <_printf_i+0x1bc>
 8005ce4:	8019      	strh	r1, [r3, #0]
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	6123      	str	r3, [r4, #16]
 8005cea:	4616      	mov	r6, r2
 8005cec:	e7bc      	b.n	8005c68 <_printf_i+0x148>
 8005cee:	6833      	ldr	r3, [r6, #0]
 8005cf0:	1d1a      	adds	r2, r3, #4
 8005cf2:	6032      	str	r2, [r6, #0]
 8005cf4:	681e      	ldr	r6, [r3, #0]
 8005cf6:	6862      	ldr	r2, [r4, #4]
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	f7fa fa70 	bl	80001e0 <memchr>
 8005d00:	b108      	cbz	r0, 8005d06 <_printf_i+0x1e6>
 8005d02:	1b80      	subs	r0, r0, r6
 8005d04:	6060      	str	r0, [r4, #4]
 8005d06:	6863      	ldr	r3, [r4, #4]
 8005d08:	6123      	str	r3, [r4, #16]
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d10:	e7aa      	b.n	8005c68 <_printf_i+0x148>
 8005d12:	6923      	ldr	r3, [r4, #16]
 8005d14:	4632      	mov	r2, r6
 8005d16:	4649      	mov	r1, r9
 8005d18:	4640      	mov	r0, r8
 8005d1a:	47d0      	blx	sl
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d0ad      	beq.n	8005c7c <_printf_i+0x15c>
 8005d20:	6823      	ldr	r3, [r4, #0]
 8005d22:	079b      	lsls	r3, r3, #30
 8005d24:	d413      	bmi.n	8005d4e <_printf_i+0x22e>
 8005d26:	68e0      	ldr	r0, [r4, #12]
 8005d28:	9b03      	ldr	r3, [sp, #12]
 8005d2a:	4298      	cmp	r0, r3
 8005d2c:	bfb8      	it	lt
 8005d2e:	4618      	movlt	r0, r3
 8005d30:	e7a6      	b.n	8005c80 <_printf_i+0x160>
 8005d32:	2301      	movs	r3, #1
 8005d34:	4632      	mov	r2, r6
 8005d36:	4649      	mov	r1, r9
 8005d38:	4640      	mov	r0, r8
 8005d3a:	47d0      	blx	sl
 8005d3c:	3001      	adds	r0, #1
 8005d3e:	d09d      	beq.n	8005c7c <_printf_i+0x15c>
 8005d40:	3501      	adds	r5, #1
 8005d42:	68e3      	ldr	r3, [r4, #12]
 8005d44:	9903      	ldr	r1, [sp, #12]
 8005d46:	1a5b      	subs	r3, r3, r1
 8005d48:	42ab      	cmp	r3, r5
 8005d4a:	dcf2      	bgt.n	8005d32 <_printf_i+0x212>
 8005d4c:	e7eb      	b.n	8005d26 <_printf_i+0x206>
 8005d4e:	2500      	movs	r5, #0
 8005d50:	f104 0619 	add.w	r6, r4, #25
 8005d54:	e7f5      	b.n	8005d42 <_printf_i+0x222>
 8005d56:	bf00      	nop
 8005d58:	080067f0 	.word	0x080067f0
 8005d5c:	08006801 	.word	0x08006801

08005d60 <__sflush_r>:
 8005d60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d68:	0716      	lsls	r6, r2, #28
 8005d6a:	4605      	mov	r5, r0
 8005d6c:	460c      	mov	r4, r1
 8005d6e:	d454      	bmi.n	8005e1a <__sflush_r+0xba>
 8005d70:	684b      	ldr	r3, [r1, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	dc02      	bgt.n	8005d7c <__sflush_r+0x1c>
 8005d76:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	dd48      	ble.n	8005e0e <__sflush_r+0xae>
 8005d7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005d7e:	2e00      	cmp	r6, #0
 8005d80:	d045      	beq.n	8005e0e <__sflush_r+0xae>
 8005d82:	2300      	movs	r3, #0
 8005d84:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005d88:	682f      	ldr	r7, [r5, #0]
 8005d8a:	6a21      	ldr	r1, [r4, #32]
 8005d8c:	602b      	str	r3, [r5, #0]
 8005d8e:	d030      	beq.n	8005df2 <__sflush_r+0x92>
 8005d90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005d92:	89a3      	ldrh	r3, [r4, #12]
 8005d94:	0759      	lsls	r1, r3, #29
 8005d96:	d505      	bpl.n	8005da4 <__sflush_r+0x44>
 8005d98:	6863      	ldr	r3, [r4, #4]
 8005d9a:	1ad2      	subs	r2, r2, r3
 8005d9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005d9e:	b10b      	cbz	r3, 8005da4 <__sflush_r+0x44>
 8005da0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005da2:	1ad2      	subs	r2, r2, r3
 8005da4:	2300      	movs	r3, #0
 8005da6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005da8:	6a21      	ldr	r1, [r4, #32]
 8005daa:	4628      	mov	r0, r5
 8005dac:	47b0      	blx	r6
 8005dae:	1c43      	adds	r3, r0, #1
 8005db0:	89a3      	ldrh	r3, [r4, #12]
 8005db2:	d106      	bne.n	8005dc2 <__sflush_r+0x62>
 8005db4:	6829      	ldr	r1, [r5, #0]
 8005db6:	291d      	cmp	r1, #29
 8005db8:	d82b      	bhi.n	8005e12 <__sflush_r+0xb2>
 8005dba:	4a2a      	ldr	r2, [pc, #168]	@ (8005e64 <__sflush_r+0x104>)
 8005dbc:	410a      	asrs	r2, r1
 8005dbe:	07d6      	lsls	r6, r2, #31
 8005dc0:	d427      	bmi.n	8005e12 <__sflush_r+0xb2>
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	6062      	str	r2, [r4, #4]
 8005dc6:	04d9      	lsls	r1, r3, #19
 8005dc8:	6922      	ldr	r2, [r4, #16]
 8005dca:	6022      	str	r2, [r4, #0]
 8005dcc:	d504      	bpl.n	8005dd8 <__sflush_r+0x78>
 8005dce:	1c42      	adds	r2, r0, #1
 8005dd0:	d101      	bne.n	8005dd6 <__sflush_r+0x76>
 8005dd2:	682b      	ldr	r3, [r5, #0]
 8005dd4:	b903      	cbnz	r3, 8005dd8 <__sflush_r+0x78>
 8005dd6:	6560      	str	r0, [r4, #84]	@ 0x54
 8005dd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005dda:	602f      	str	r7, [r5, #0]
 8005ddc:	b1b9      	cbz	r1, 8005e0e <__sflush_r+0xae>
 8005dde:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005de2:	4299      	cmp	r1, r3
 8005de4:	d002      	beq.n	8005dec <__sflush_r+0x8c>
 8005de6:	4628      	mov	r0, r5
 8005de8:	f7ff fbd4 	bl	8005594 <_free_r>
 8005dec:	2300      	movs	r3, #0
 8005dee:	6363      	str	r3, [r4, #52]	@ 0x34
 8005df0:	e00d      	b.n	8005e0e <__sflush_r+0xae>
 8005df2:	2301      	movs	r3, #1
 8005df4:	4628      	mov	r0, r5
 8005df6:	47b0      	blx	r6
 8005df8:	4602      	mov	r2, r0
 8005dfa:	1c50      	adds	r0, r2, #1
 8005dfc:	d1c9      	bne.n	8005d92 <__sflush_r+0x32>
 8005dfe:	682b      	ldr	r3, [r5, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0c6      	beq.n	8005d92 <__sflush_r+0x32>
 8005e04:	2b1d      	cmp	r3, #29
 8005e06:	d001      	beq.n	8005e0c <__sflush_r+0xac>
 8005e08:	2b16      	cmp	r3, #22
 8005e0a:	d11e      	bne.n	8005e4a <__sflush_r+0xea>
 8005e0c:	602f      	str	r7, [r5, #0]
 8005e0e:	2000      	movs	r0, #0
 8005e10:	e022      	b.n	8005e58 <__sflush_r+0xf8>
 8005e12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e16:	b21b      	sxth	r3, r3
 8005e18:	e01b      	b.n	8005e52 <__sflush_r+0xf2>
 8005e1a:	690f      	ldr	r7, [r1, #16]
 8005e1c:	2f00      	cmp	r7, #0
 8005e1e:	d0f6      	beq.n	8005e0e <__sflush_r+0xae>
 8005e20:	0793      	lsls	r3, r2, #30
 8005e22:	680e      	ldr	r6, [r1, #0]
 8005e24:	bf08      	it	eq
 8005e26:	694b      	ldreq	r3, [r1, #20]
 8005e28:	600f      	str	r7, [r1, #0]
 8005e2a:	bf18      	it	ne
 8005e2c:	2300      	movne	r3, #0
 8005e2e:	eba6 0807 	sub.w	r8, r6, r7
 8005e32:	608b      	str	r3, [r1, #8]
 8005e34:	f1b8 0f00 	cmp.w	r8, #0
 8005e38:	dde9      	ble.n	8005e0e <__sflush_r+0xae>
 8005e3a:	6a21      	ldr	r1, [r4, #32]
 8005e3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005e3e:	4643      	mov	r3, r8
 8005e40:	463a      	mov	r2, r7
 8005e42:	4628      	mov	r0, r5
 8005e44:	47b0      	blx	r6
 8005e46:	2800      	cmp	r0, #0
 8005e48:	dc08      	bgt.n	8005e5c <__sflush_r+0xfc>
 8005e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e52:	81a3      	strh	r3, [r4, #12]
 8005e54:	f04f 30ff 	mov.w	r0, #4294967295
 8005e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e5c:	4407      	add	r7, r0
 8005e5e:	eba8 0800 	sub.w	r8, r8, r0
 8005e62:	e7e7      	b.n	8005e34 <__sflush_r+0xd4>
 8005e64:	dfbffffe 	.word	0xdfbffffe

08005e68 <_fflush_r>:
 8005e68:	b538      	push	{r3, r4, r5, lr}
 8005e6a:	690b      	ldr	r3, [r1, #16]
 8005e6c:	4605      	mov	r5, r0
 8005e6e:	460c      	mov	r4, r1
 8005e70:	b913      	cbnz	r3, 8005e78 <_fflush_r+0x10>
 8005e72:	2500      	movs	r5, #0
 8005e74:	4628      	mov	r0, r5
 8005e76:	bd38      	pop	{r3, r4, r5, pc}
 8005e78:	b118      	cbz	r0, 8005e82 <_fflush_r+0x1a>
 8005e7a:	6a03      	ldr	r3, [r0, #32]
 8005e7c:	b90b      	cbnz	r3, 8005e82 <_fflush_r+0x1a>
 8005e7e:	f7ff fa27 	bl	80052d0 <__sinit>
 8005e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d0f3      	beq.n	8005e72 <_fflush_r+0xa>
 8005e8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005e8c:	07d0      	lsls	r0, r2, #31
 8005e8e:	d404      	bmi.n	8005e9a <_fflush_r+0x32>
 8005e90:	0599      	lsls	r1, r3, #22
 8005e92:	d402      	bmi.n	8005e9a <_fflush_r+0x32>
 8005e94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e96:	f7ff fb5c 	bl	8005552 <__retarget_lock_acquire_recursive>
 8005e9a:	4628      	mov	r0, r5
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	f7ff ff5f 	bl	8005d60 <__sflush_r>
 8005ea2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ea4:	07da      	lsls	r2, r3, #31
 8005ea6:	4605      	mov	r5, r0
 8005ea8:	d4e4      	bmi.n	8005e74 <_fflush_r+0xc>
 8005eaa:	89a3      	ldrh	r3, [r4, #12]
 8005eac:	059b      	lsls	r3, r3, #22
 8005eae:	d4e1      	bmi.n	8005e74 <_fflush_r+0xc>
 8005eb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005eb2:	f7ff fb4f 	bl	8005554 <__retarget_lock_release_recursive>
 8005eb6:	e7dd      	b.n	8005e74 <_fflush_r+0xc>

08005eb8 <fiprintf>:
 8005eb8:	b40e      	push	{r1, r2, r3}
 8005eba:	b503      	push	{r0, r1, lr}
 8005ebc:	4601      	mov	r1, r0
 8005ebe:	ab03      	add	r3, sp, #12
 8005ec0:	4805      	ldr	r0, [pc, #20]	@ (8005ed8 <fiprintf+0x20>)
 8005ec2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ec6:	6800      	ldr	r0, [r0, #0]
 8005ec8:	9301      	str	r3, [sp, #4]
 8005eca:	f000 f89d 	bl	8006008 <_vfiprintf_r>
 8005ece:	b002      	add	sp, #8
 8005ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ed4:	b003      	add	sp, #12
 8005ed6:	4770      	bx	lr
 8005ed8:	20000018 	.word	0x20000018

08005edc <memmove>:
 8005edc:	4288      	cmp	r0, r1
 8005ede:	b510      	push	{r4, lr}
 8005ee0:	eb01 0402 	add.w	r4, r1, r2
 8005ee4:	d902      	bls.n	8005eec <memmove+0x10>
 8005ee6:	4284      	cmp	r4, r0
 8005ee8:	4623      	mov	r3, r4
 8005eea:	d807      	bhi.n	8005efc <memmove+0x20>
 8005eec:	1e43      	subs	r3, r0, #1
 8005eee:	42a1      	cmp	r1, r4
 8005ef0:	d008      	beq.n	8005f04 <memmove+0x28>
 8005ef2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ef6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005efa:	e7f8      	b.n	8005eee <memmove+0x12>
 8005efc:	4402      	add	r2, r0
 8005efe:	4601      	mov	r1, r0
 8005f00:	428a      	cmp	r2, r1
 8005f02:	d100      	bne.n	8005f06 <memmove+0x2a>
 8005f04:	bd10      	pop	{r4, pc}
 8005f06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f0e:	e7f7      	b.n	8005f00 <memmove+0x24>

08005f10 <_sbrk_r>:
 8005f10:	b538      	push	{r3, r4, r5, lr}
 8005f12:	4d06      	ldr	r5, [pc, #24]	@ (8005f2c <_sbrk_r+0x1c>)
 8005f14:	2300      	movs	r3, #0
 8005f16:	4604      	mov	r4, r0
 8005f18:	4608      	mov	r0, r1
 8005f1a:	602b      	str	r3, [r5, #0]
 8005f1c:	f7fb fa94 	bl	8001448 <_sbrk>
 8005f20:	1c43      	adds	r3, r0, #1
 8005f22:	d102      	bne.n	8005f2a <_sbrk_r+0x1a>
 8005f24:	682b      	ldr	r3, [r5, #0]
 8005f26:	b103      	cbz	r3, 8005f2a <_sbrk_r+0x1a>
 8005f28:	6023      	str	r3, [r4, #0]
 8005f2a:	bd38      	pop	{r3, r4, r5, pc}
 8005f2c:	200005ac 	.word	0x200005ac

08005f30 <memcpy>:
 8005f30:	440a      	add	r2, r1
 8005f32:	4291      	cmp	r1, r2
 8005f34:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f38:	d100      	bne.n	8005f3c <memcpy+0xc>
 8005f3a:	4770      	bx	lr
 8005f3c:	b510      	push	{r4, lr}
 8005f3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f46:	4291      	cmp	r1, r2
 8005f48:	d1f9      	bne.n	8005f3e <memcpy+0xe>
 8005f4a:	bd10      	pop	{r4, pc}

08005f4c <abort>:
 8005f4c:	b508      	push	{r3, lr}
 8005f4e:	2006      	movs	r0, #6
 8005f50:	f000 fa2e 	bl	80063b0 <raise>
 8005f54:	2001      	movs	r0, #1
 8005f56:	f7fb f9fe 	bl	8001356 <_exit>

08005f5a <_realloc_r>:
 8005f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f5e:	4680      	mov	r8, r0
 8005f60:	4615      	mov	r5, r2
 8005f62:	460c      	mov	r4, r1
 8005f64:	b921      	cbnz	r1, 8005f70 <_realloc_r+0x16>
 8005f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f6a:	4611      	mov	r1, r2
 8005f6c:	f7ff bb86 	b.w	800567c <_malloc_r>
 8005f70:	b92a      	cbnz	r2, 8005f7e <_realloc_r+0x24>
 8005f72:	f7ff fb0f 	bl	8005594 <_free_r>
 8005f76:	2400      	movs	r4, #0
 8005f78:	4620      	mov	r0, r4
 8005f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f7e:	f000 fa33 	bl	80063e8 <_malloc_usable_size_r>
 8005f82:	4285      	cmp	r5, r0
 8005f84:	4606      	mov	r6, r0
 8005f86:	d802      	bhi.n	8005f8e <_realloc_r+0x34>
 8005f88:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005f8c:	d8f4      	bhi.n	8005f78 <_realloc_r+0x1e>
 8005f8e:	4629      	mov	r1, r5
 8005f90:	4640      	mov	r0, r8
 8005f92:	f7ff fb73 	bl	800567c <_malloc_r>
 8005f96:	4607      	mov	r7, r0
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	d0ec      	beq.n	8005f76 <_realloc_r+0x1c>
 8005f9c:	42b5      	cmp	r5, r6
 8005f9e:	462a      	mov	r2, r5
 8005fa0:	4621      	mov	r1, r4
 8005fa2:	bf28      	it	cs
 8005fa4:	4632      	movcs	r2, r6
 8005fa6:	f7ff ffc3 	bl	8005f30 <memcpy>
 8005faa:	4621      	mov	r1, r4
 8005fac:	4640      	mov	r0, r8
 8005fae:	f7ff faf1 	bl	8005594 <_free_r>
 8005fb2:	463c      	mov	r4, r7
 8005fb4:	e7e0      	b.n	8005f78 <_realloc_r+0x1e>

08005fb6 <__sfputc_r>:
 8005fb6:	6893      	ldr	r3, [r2, #8]
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	b410      	push	{r4}
 8005fbe:	6093      	str	r3, [r2, #8]
 8005fc0:	da08      	bge.n	8005fd4 <__sfputc_r+0x1e>
 8005fc2:	6994      	ldr	r4, [r2, #24]
 8005fc4:	42a3      	cmp	r3, r4
 8005fc6:	db01      	blt.n	8005fcc <__sfputc_r+0x16>
 8005fc8:	290a      	cmp	r1, #10
 8005fca:	d103      	bne.n	8005fd4 <__sfputc_r+0x1e>
 8005fcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fd0:	f000 b932 	b.w	8006238 <__swbuf_r>
 8005fd4:	6813      	ldr	r3, [r2, #0]
 8005fd6:	1c58      	adds	r0, r3, #1
 8005fd8:	6010      	str	r0, [r2, #0]
 8005fda:	7019      	strb	r1, [r3, #0]
 8005fdc:	4608      	mov	r0, r1
 8005fde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <__sfputs_r>:
 8005fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe6:	4606      	mov	r6, r0
 8005fe8:	460f      	mov	r7, r1
 8005fea:	4614      	mov	r4, r2
 8005fec:	18d5      	adds	r5, r2, r3
 8005fee:	42ac      	cmp	r4, r5
 8005ff0:	d101      	bne.n	8005ff6 <__sfputs_r+0x12>
 8005ff2:	2000      	movs	r0, #0
 8005ff4:	e007      	b.n	8006006 <__sfputs_r+0x22>
 8005ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ffa:	463a      	mov	r2, r7
 8005ffc:	4630      	mov	r0, r6
 8005ffe:	f7ff ffda 	bl	8005fb6 <__sfputc_r>
 8006002:	1c43      	adds	r3, r0, #1
 8006004:	d1f3      	bne.n	8005fee <__sfputs_r+0xa>
 8006006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006008 <_vfiprintf_r>:
 8006008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800600c:	460d      	mov	r5, r1
 800600e:	b09d      	sub	sp, #116	@ 0x74
 8006010:	4614      	mov	r4, r2
 8006012:	4698      	mov	r8, r3
 8006014:	4606      	mov	r6, r0
 8006016:	b118      	cbz	r0, 8006020 <_vfiprintf_r+0x18>
 8006018:	6a03      	ldr	r3, [r0, #32]
 800601a:	b90b      	cbnz	r3, 8006020 <_vfiprintf_r+0x18>
 800601c:	f7ff f958 	bl	80052d0 <__sinit>
 8006020:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006022:	07d9      	lsls	r1, r3, #31
 8006024:	d405      	bmi.n	8006032 <_vfiprintf_r+0x2a>
 8006026:	89ab      	ldrh	r3, [r5, #12]
 8006028:	059a      	lsls	r2, r3, #22
 800602a:	d402      	bmi.n	8006032 <_vfiprintf_r+0x2a>
 800602c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800602e:	f7ff fa90 	bl	8005552 <__retarget_lock_acquire_recursive>
 8006032:	89ab      	ldrh	r3, [r5, #12]
 8006034:	071b      	lsls	r3, r3, #28
 8006036:	d501      	bpl.n	800603c <_vfiprintf_r+0x34>
 8006038:	692b      	ldr	r3, [r5, #16]
 800603a:	b99b      	cbnz	r3, 8006064 <_vfiprintf_r+0x5c>
 800603c:	4629      	mov	r1, r5
 800603e:	4630      	mov	r0, r6
 8006040:	f000 f938 	bl	80062b4 <__swsetup_r>
 8006044:	b170      	cbz	r0, 8006064 <_vfiprintf_r+0x5c>
 8006046:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006048:	07dc      	lsls	r4, r3, #31
 800604a:	d504      	bpl.n	8006056 <_vfiprintf_r+0x4e>
 800604c:	f04f 30ff 	mov.w	r0, #4294967295
 8006050:	b01d      	add	sp, #116	@ 0x74
 8006052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006056:	89ab      	ldrh	r3, [r5, #12]
 8006058:	0598      	lsls	r0, r3, #22
 800605a:	d4f7      	bmi.n	800604c <_vfiprintf_r+0x44>
 800605c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800605e:	f7ff fa79 	bl	8005554 <__retarget_lock_release_recursive>
 8006062:	e7f3      	b.n	800604c <_vfiprintf_r+0x44>
 8006064:	2300      	movs	r3, #0
 8006066:	9309      	str	r3, [sp, #36]	@ 0x24
 8006068:	2320      	movs	r3, #32
 800606a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800606e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006072:	2330      	movs	r3, #48	@ 0x30
 8006074:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006224 <_vfiprintf_r+0x21c>
 8006078:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800607c:	f04f 0901 	mov.w	r9, #1
 8006080:	4623      	mov	r3, r4
 8006082:	469a      	mov	sl, r3
 8006084:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006088:	b10a      	cbz	r2, 800608e <_vfiprintf_r+0x86>
 800608a:	2a25      	cmp	r2, #37	@ 0x25
 800608c:	d1f9      	bne.n	8006082 <_vfiprintf_r+0x7a>
 800608e:	ebba 0b04 	subs.w	fp, sl, r4
 8006092:	d00b      	beq.n	80060ac <_vfiprintf_r+0xa4>
 8006094:	465b      	mov	r3, fp
 8006096:	4622      	mov	r2, r4
 8006098:	4629      	mov	r1, r5
 800609a:	4630      	mov	r0, r6
 800609c:	f7ff ffa2 	bl	8005fe4 <__sfputs_r>
 80060a0:	3001      	adds	r0, #1
 80060a2:	f000 80a7 	beq.w	80061f4 <_vfiprintf_r+0x1ec>
 80060a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060a8:	445a      	add	r2, fp
 80060aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80060ac:	f89a 3000 	ldrb.w	r3, [sl]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 809f 	beq.w	80061f4 <_vfiprintf_r+0x1ec>
 80060b6:	2300      	movs	r3, #0
 80060b8:	f04f 32ff 	mov.w	r2, #4294967295
 80060bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060c0:	f10a 0a01 	add.w	sl, sl, #1
 80060c4:	9304      	str	r3, [sp, #16]
 80060c6:	9307      	str	r3, [sp, #28]
 80060c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80060cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80060ce:	4654      	mov	r4, sl
 80060d0:	2205      	movs	r2, #5
 80060d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060d6:	4853      	ldr	r0, [pc, #332]	@ (8006224 <_vfiprintf_r+0x21c>)
 80060d8:	f7fa f882 	bl	80001e0 <memchr>
 80060dc:	9a04      	ldr	r2, [sp, #16]
 80060de:	b9d8      	cbnz	r0, 8006118 <_vfiprintf_r+0x110>
 80060e0:	06d1      	lsls	r1, r2, #27
 80060e2:	bf44      	itt	mi
 80060e4:	2320      	movmi	r3, #32
 80060e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060ea:	0713      	lsls	r3, r2, #28
 80060ec:	bf44      	itt	mi
 80060ee:	232b      	movmi	r3, #43	@ 0x2b
 80060f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060f4:	f89a 3000 	ldrb.w	r3, [sl]
 80060f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80060fa:	d015      	beq.n	8006128 <_vfiprintf_r+0x120>
 80060fc:	9a07      	ldr	r2, [sp, #28]
 80060fe:	4654      	mov	r4, sl
 8006100:	2000      	movs	r0, #0
 8006102:	f04f 0c0a 	mov.w	ip, #10
 8006106:	4621      	mov	r1, r4
 8006108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800610c:	3b30      	subs	r3, #48	@ 0x30
 800610e:	2b09      	cmp	r3, #9
 8006110:	d94b      	bls.n	80061aa <_vfiprintf_r+0x1a2>
 8006112:	b1b0      	cbz	r0, 8006142 <_vfiprintf_r+0x13a>
 8006114:	9207      	str	r2, [sp, #28]
 8006116:	e014      	b.n	8006142 <_vfiprintf_r+0x13a>
 8006118:	eba0 0308 	sub.w	r3, r0, r8
 800611c:	fa09 f303 	lsl.w	r3, r9, r3
 8006120:	4313      	orrs	r3, r2
 8006122:	9304      	str	r3, [sp, #16]
 8006124:	46a2      	mov	sl, r4
 8006126:	e7d2      	b.n	80060ce <_vfiprintf_r+0xc6>
 8006128:	9b03      	ldr	r3, [sp, #12]
 800612a:	1d19      	adds	r1, r3, #4
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	9103      	str	r1, [sp, #12]
 8006130:	2b00      	cmp	r3, #0
 8006132:	bfbb      	ittet	lt
 8006134:	425b      	neglt	r3, r3
 8006136:	f042 0202 	orrlt.w	r2, r2, #2
 800613a:	9307      	strge	r3, [sp, #28]
 800613c:	9307      	strlt	r3, [sp, #28]
 800613e:	bfb8      	it	lt
 8006140:	9204      	strlt	r2, [sp, #16]
 8006142:	7823      	ldrb	r3, [r4, #0]
 8006144:	2b2e      	cmp	r3, #46	@ 0x2e
 8006146:	d10a      	bne.n	800615e <_vfiprintf_r+0x156>
 8006148:	7863      	ldrb	r3, [r4, #1]
 800614a:	2b2a      	cmp	r3, #42	@ 0x2a
 800614c:	d132      	bne.n	80061b4 <_vfiprintf_r+0x1ac>
 800614e:	9b03      	ldr	r3, [sp, #12]
 8006150:	1d1a      	adds	r2, r3, #4
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	9203      	str	r2, [sp, #12]
 8006156:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800615a:	3402      	adds	r4, #2
 800615c:	9305      	str	r3, [sp, #20]
 800615e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006234 <_vfiprintf_r+0x22c>
 8006162:	7821      	ldrb	r1, [r4, #0]
 8006164:	2203      	movs	r2, #3
 8006166:	4650      	mov	r0, sl
 8006168:	f7fa f83a 	bl	80001e0 <memchr>
 800616c:	b138      	cbz	r0, 800617e <_vfiprintf_r+0x176>
 800616e:	9b04      	ldr	r3, [sp, #16]
 8006170:	eba0 000a 	sub.w	r0, r0, sl
 8006174:	2240      	movs	r2, #64	@ 0x40
 8006176:	4082      	lsls	r2, r0
 8006178:	4313      	orrs	r3, r2
 800617a:	3401      	adds	r4, #1
 800617c:	9304      	str	r3, [sp, #16]
 800617e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006182:	4829      	ldr	r0, [pc, #164]	@ (8006228 <_vfiprintf_r+0x220>)
 8006184:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006188:	2206      	movs	r2, #6
 800618a:	f7fa f829 	bl	80001e0 <memchr>
 800618e:	2800      	cmp	r0, #0
 8006190:	d03f      	beq.n	8006212 <_vfiprintf_r+0x20a>
 8006192:	4b26      	ldr	r3, [pc, #152]	@ (800622c <_vfiprintf_r+0x224>)
 8006194:	bb1b      	cbnz	r3, 80061de <_vfiprintf_r+0x1d6>
 8006196:	9b03      	ldr	r3, [sp, #12]
 8006198:	3307      	adds	r3, #7
 800619a:	f023 0307 	bic.w	r3, r3, #7
 800619e:	3308      	adds	r3, #8
 80061a0:	9303      	str	r3, [sp, #12]
 80061a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061a4:	443b      	add	r3, r7
 80061a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80061a8:	e76a      	b.n	8006080 <_vfiprintf_r+0x78>
 80061aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80061ae:	460c      	mov	r4, r1
 80061b0:	2001      	movs	r0, #1
 80061b2:	e7a8      	b.n	8006106 <_vfiprintf_r+0xfe>
 80061b4:	2300      	movs	r3, #0
 80061b6:	3401      	adds	r4, #1
 80061b8:	9305      	str	r3, [sp, #20]
 80061ba:	4619      	mov	r1, r3
 80061bc:	f04f 0c0a 	mov.w	ip, #10
 80061c0:	4620      	mov	r0, r4
 80061c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061c6:	3a30      	subs	r2, #48	@ 0x30
 80061c8:	2a09      	cmp	r2, #9
 80061ca:	d903      	bls.n	80061d4 <_vfiprintf_r+0x1cc>
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d0c6      	beq.n	800615e <_vfiprintf_r+0x156>
 80061d0:	9105      	str	r1, [sp, #20]
 80061d2:	e7c4      	b.n	800615e <_vfiprintf_r+0x156>
 80061d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80061d8:	4604      	mov	r4, r0
 80061da:	2301      	movs	r3, #1
 80061dc:	e7f0      	b.n	80061c0 <_vfiprintf_r+0x1b8>
 80061de:	ab03      	add	r3, sp, #12
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	462a      	mov	r2, r5
 80061e4:	4b12      	ldr	r3, [pc, #72]	@ (8006230 <_vfiprintf_r+0x228>)
 80061e6:	a904      	add	r1, sp, #16
 80061e8:	4630      	mov	r0, r6
 80061ea:	f3af 8000 	nop.w
 80061ee:	4607      	mov	r7, r0
 80061f0:	1c78      	adds	r0, r7, #1
 80061f2:	d1d6      	bne.n	80061a2 <_vfiprintf_r+0x19a>
 80061f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061f6:	07d9      	lsls	r1, r3, #31
 80061f8:	d405      	bmi.n	8006206 <_vfiprintf_r+0x1fe>
 80061fa:	89ab      	ldrh	r3, [r5, #12]
 80061fc:	059a      	lsls	r2, r3, #22
 80061fe:	d402      	bmi.n	8006206 <_vfiprintf_r+0x1fe>
 8006200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006202:	f7ff f9a7 	bl	8005554 <__retarget_lock_release_recursive>
 8006206:	89ab      	ldrh	r3, [r5, #12]
 8006208:	065b      	lsls	r3, r3, #25
 800620a:	f53f af1f 	bmi.w	800604c <_vfiprintf_r+0x44>
 800620e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006210:	e71e      	b.n	8006050 <_vfiprintf_r+0x48>
 8006212:	ab03      	add	r3, sp, #12
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	462a      	mov	r2, r5
 8006218:	4b05      	ldr	r3, [pc, #20]	@ (8006230 <_vfiprintf_r+0x228>)
 800621a:	a904      	add	r1, sp, #16
 800621c:	4630      	mov	r0, r6
 800621e:	f7ff fc7f 	bl	8005b20 <_printf_i>
 8006222:	e7e4      	b.n	80061ee <_vfiprintf_r+0x1e6>
 8006224:	080067df 	.word	0x080067df
 8006228:	080067e9 	.word	0x080067e9
 800622c:	00000000 	.word	0x00000000
 8006230:	08005fe5 	.word	0x08005fe5
 8006234:	080067e5 	.word	0x080067e5

08006238 <__swbuf_r>:
 8006238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800623a:	460e      	mov	r6, r1
 800623c:	4614      	mov	r4, r2
 800623e:	4605      	mov	r5, r0
 8006240:	b118      	cbz	r0, 800624a <__swbuf_r+0x12>
 8006242:	6a03      	ldr	r3, [r0, #32]
 8006244:	b90b      	cbnz	r3, 800624a <__swbuf_r+0x12>
 8006246:	f7ff f843 	bl	80052d0 <__sinit>
 800624a:	69a3      	ldr	r3, [r4, #24]
 800624c:	60a3      	str	r3, [r4, #8]
 800624e:	89a3      	ldrh	r3, [r4, #12]
 8006250:	071a      	lsls	r2, r3, #28
 8006252:	d501      	bpl.n	8006258 <__swbuf_r+0x20>
 8006254:	6923      	ldr	r3, [r4, #16]
 8006256:	b943      	cbnz	r3, 800626a <__swbuf_r+0x32>
 8006258:	4621      	mov	r1, r4
 800625a:	4628      	mov	r0, r5
 800625c:	f000 f82a 	bl	80062b4 <__swsetup_r>
 8006260:	b118      	cbz	r0, 800626a <__swbuf_r+0x32>
 8006262:	f04f 37ff 	mov.w	r7, #4294967295
 8006266:	4638      	mov	r0, r7
 8006268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800626a:	6823      	ldr	r3, [r4, #0]
 800626c:	6922      	ldr	r2, [r4, #16]
 800626e:	1a98      	subs	r0, r3, r2
 8006270:	6963      	ldr	r3, [r4, #20]
 8006272:	b2f6      	uxtb	r6, r6
 8006274:	4283      	cmp	r3, r0
 8006276:	4637      	mov	r7, r6
 8006278:	dc05      	bgt.n	8006286 <__swbuf_r+0x4e>
 800627a:	4621      	mov	r1, r4
 800627c:	4628      	mov	r0, r5
 800627e:	f7ff fdf3 	bl	8005e68 <_fflush_r>
 8006282:	2800      	cmp	r0, #0
 8006284:	d1ed      	bne.n	8006262 <__swbuf_r+0x2a>
 8006286:	68a3      	ldr	r3, [r4, #8]
 8006288:	3b01      	subs	r3, #1
 800628a:	60a3      	str	r3, [r4, #8]
 800628c:	6823      	ldr	r3, [r4, #0]
 800628e:	1c5a      	adds	r2, r3, #1
 8006290:	6022      	str	r2, [r4, #0]
 8006292:	701e      	strb	r6, [r3, #0]
 8006294:	6962      	ldr	r2, [r4, #20]
 8006296:	1c43      	adds	r3, r0, #1
 8006298:	429a      	cmp	r2, r3
 800629a:	d004      	beq.n	80062a6 <__swbuf_r+0x6e>
 800629c:	89a3      	ldrh	r3, [r4, #12]
 800629e:	07db      	lsls	r3, r3, #31
 80062a0:	d5e1      	bpl.n	8006266 <__swbuf_r+0x2e>
 80062a2:	2e0a      	cmp	r6, #10
 80062a4:	d1df      	bne.n	8006266 <__swbuf_r+0x2e>
 80062a6:	4621      	mov	r1, r4
 80062a8:	4628      	mov	r0, r5
 80062aa:	f7ff fddd 	bl	8005e68 <_fflush_r>
 80062ae:	2800      	cmp	r0, #0
 80062b0:	d0d9      	beq.n	8006266 <__swbuf_r+0x2e>
 80062b2:	e7d6      	b.n	8006262 <__swbuf_r+0x2a>

080062b4 <__swsetup_r>:
 80062b4:	b538      	push	{r3, r4, r5, lr}
 80062b6:	4b29      	ldr	r3, [pc, #164]	@ (800635c <__swsetup_r+0xa8>)
 80062b8:	4605      	mov	r5, r0
 80062ba:	6818      	ldr	r0, [r3, #0]
 80062bc:	460c      	mov	r4, r1
 80062be:	b118      	cbz	r0, 80062c8 <__swsetup_r+0x14>
 80062c0:	6a03      	ldr	r3, [r0, #32]
 80062c2:	b90b      	cbnz	r3, 80062c8 <__swsetup_r+0x14>
 80062c4:	f7ff f804 	bl	80052d0 <__sinit>
 80062c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062cc:	0719      	lsls	r1, r3, #28
 80062ce:	d422      	bmi.n	8006316 <__swsetup_r+0x62>
 80062d0:	06da      	lsls	r2, r3, #27
 80062d2:	d407      	bmi.n	80062e4 <__swsetup_r+0x30>
 80062d4:	2209      	movs	r2, #9
 80062d6:	602a      	str	r2, [r5, #0]
 80062d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062dc:	81a3      	strh	r3, [r4, #12]
 80062de:	f04f 30ff 	mov.w	r0, #4294967295
 80062e2:	e033      	b.n	800634c <__swsetup_r+0x98>
 80062e4:	0758      	lsls	r0, r3, #29
 80062e6:	d512      	bpl.n	800630e <__swsetup_r+0x5a>
 80062e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062ea:	b141      	cbz	r1, 80062fe <__swsetup_r+0x4a>
 80062ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062f0:	4299      	cmp	r1, r3
 80062f2:	d002      	beq.n	80062fa <__swsetup_r+0x46>
 80062f4:	4628      	mov	r0, r5
 80062f6:	f7ff f94d 	bl	8005594 <_free_r>
 80062fa:	2300      	movs	r3, #0
 80062fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80062fe:	89a3      	ldrh	r3, [r4, #12]
 8006300:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006304:	81a3      	strh	r3, [r4, #12]
 8006306:	2300      	movs	r3, #0
 8006308:	6063      	str	r3, [r4, #4]
 800630a:	6923      	ldr	r3, [r4, #16]
 800630c:	6023      	str	r3, [r4, #0]
 800630e:	89a3      	ldrh	r3, [r4, #12]
 8006310:	f043 0308 	orr.w	r3, r3, #8
 8006314:	81a3      	strh	r3, [r4, #12]
 8006316:	6923      	ldr	r3, [r4, #16]
 8006318:	b94b      	cbnz	r3, 800632e <__swsetup_r+0x7a>
 800631a:	89a3      	ldrh	r3, [r4, #12]
 800631c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006324:	d003      	beq.n	800632e <__swsetup_r+0x7a>
 8006326:	4621      	mov	r1, r4
 8006328:	4628      	mov	r0, r5
 800632a:	f000 f88b 	bl	8006444 <__smakebuf_r>
 800632e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006332:	f013 0201 	ands.w	r2, r3, #1
 8006336:	d00a      	beq.n	800634e <__swsetup_r+0x9a>
 8006338:	2200      	movs	r2, #0
 800633a:	60a2      	str	r2, [r4, #8]
 800633c:	6962      	ldr	r2, [r4, #20]
 800633e:	4252      	negs	r2, r2
 8006340:	61a2      	str	r2, [r4, #24]
 8006342:	6922      	ldr	r2, [r4, #16]
 8006344:	b942      	cbnz	r2, 8006358 <__swsetup_r+0xa4>
 8006346:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800634a:	d1c5      	bne.n	80062d8 <__swsetup_r+0x24>
 800634c:	bd38      	pop	{r3, r4, r5, pc}
 800634e:	0799      	lsls	r1, r3, #30
 8006350:	bf58      	it	pl
 8006352:	6962      	ldrpl	r2, [r4, #20]
 8006354:	60a2      	str	r2, [r4, #8]
 8006356:	e7f4      	b.n	8006342 <__swsetup_r+0x8e>
 8006358:	2000      	movs	r0, #0
 800635a:	e7f7      	b.n	800634c <__swsetup_r+0x98>
 800635c:	20000018 	.word	0x20000018

08006360 <_raise_r>:
 8006360:	291f      	cmp	r1, #31
 8006362:	b538      	push	{r3, r4, r5, lr}
 8006364:	4605      	mov	r5, r0
 8006366:	460c      	mov	r4, r1
 8006368:	d904      	bls.n	8006374 <_raise_r+0x14>
 800636a:	2316      	movs	r3, #22
 800636c:	6003      	str	r3, [r0, #0]
 800636e:	f04f 30ff 	mov.w	r0, #4294967295
 8006372:	bd38      	pop	{r3, r4, r5, pc}
 8006374:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006376:	b112      	cbz	r2, 800637e <_raise_r+0x1e>
 8006378:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800637c:	b94b      	cbnz	r3, 8006392 <_raise_r+0x32>
 800637e:	4628      	mov	r0, r5
 8006380:	f000 f830 	bl	80063e4 <_getpid_r>
 8006384:	4622      	mov	r2, r4
 8006386:	4601      	mov	r1, r0
 8006388:	4628      	mov	r0, r5
 800638a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800638e:	f000 b817 	b.w	80063c0 <_kill_r>
 8006392:	2b01      	cmp	r3, #1
 8006394:	d00a      	beq.n	80063ac <_raise_r+0x4c>
 8006396:	1c59      	adds	r1, r3, #1
 8006398:	d103      	bne.n	80063a2 <_raise_r+0x42>
 800639a:	2316      	movs	r3, #22
 800639c:	6003      	str	r3, [r0, #0]
 800639e:	2001      	movs	r0, #1
 80063a0:	e7e7      	b.n	8006372 <_raise_r+0x12>
 80063a2:	2100      	movs	r1, #0
 80063a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80063a8:	4620      	mov	r0, r4
 80063aa:	4798      	blx	r3
 80063ac:	2000      	movs	r0, #0
 80063ae:	e7e0      	b.n	8006372 <_raise_r+0x12>

080063b0 <raise>:
 80063b0:	4b02      	ldr	r3, [pc, #8]	@ (80063bc <raise+0xc>)
 80063b2:	4601      	mov	r1, r0
 80063b4:	6818      	ldr	r0, [r3, #0]
 80063b6:	f7ff bfd3 	b.w	8006360 <_raise_r>
 80063ba:	bf00      	nop
 80063bc:	20000018 	.word	0x20000018

080063c0 <_kill_r>:
 80063c0:	b538      	push	{r3, r4, r5, lr}
 80063c2:	4d07      	ldr	r5, [pc, #28]	@ (80063e0 <_kill_r+0x20>)
 80063c4:	2300      	movs	r3, #0
 80063c6:	4604      	mov	r4, r0
 80063c8:	4608      	mov	r0, r1
 80063ca:	4611      	mov	r1, r2
 80063cc:	602b      	str	r3, [r5, #0]
 80063ce:	f7fa ffb2 	bl	8001336 <_kill>
 80063d2:	1c43      	adds	r3, r0, #1
 80063d4:	d102      	bne.n	80063dc <_kill_r+0x1c>
 80063d6:	682b      	ldr	r3, [r5, #0]
 80063d8:	b103      	cbz	r3, 80063dc <_kill_r+0x1c>
 80063da:	6023      	str	r3, [r4, #0]
 80063dc:	bd38      	pop	{r3, r4, r5, pc}
 80063de:	bf00      	nop
 80063e0:	200005ac 	.word	0x200005ac

080063e4 <_getpid_r>:
 80063e4:	f7fa bf9f 	b.w	8001326 <_getpid>

080063e8 <_malloc_usable_size_r>:
 80063e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063ec:	1f18      	subs	r0, r3, #4
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	bfbc      	itt	lt
 80063f2:	580b      	ldrlt	r3, [r1, r0]
 80063f4:	18c0      	addlt	r0, r0, r3
 80063f6:	4770      	bx	lr

080063f8 <__swhatbuf_r>:
 80063f8:	b570      	push	{r4, r5, r6, lr}
 80063fa:	460c      	mov	r4, r1
 80063fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006400:	2900      	cmp	r1, #0
 8006402:	b096      	sub	sp, #88	@ 0x58
 8006404:	4615      	mov	r5, r2
 8006406:	461e      	mov	r6, r3
 8006408:	da0d      	bge.n	8006426 <__swhatbuf_r+0x2e>
 800640a:	89a3      	ldrh	r3, [r4, #12]
 800640c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006410:	f04f 0100 	mov.w	r1, #0
 8006414:	bf14      	ite	ne
 8006416:	2340      	movne	r3, #64	@ 0x40
 8006418:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800641c:	2000      	movs	r0, #0
 800641e:	6031      	str	r1, [r6, #0]
 8006420:	602b      	str	r3, [r5, #0]
 8006422:	b016      	add	sp, #88	@ 0x58
 8006424:	bd70      	pop	{r4, r5, r6, pc}
 8006426:	466a      	mov	r2, sp
 8006428:	f000 f848 	bl	80064bc <_fstat_r>
 800642c:	2800      	cmp	r0, #0
 800642e:	dbec      	blt.n	800640a <__swhatbuf_r+0x12>
 8006430:	9901      	ldr	r1, [sp, #4]
 8006432:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006436:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800643a:	4259      	negs	r1, r3
 800643c:	4159      	adcs	r1, r3
 800643e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006442:	e7eb      	b.n	800641c <__swhatbuf_r+0x24>

08006444 <__smakebuf_r>:
 8006444:	898b      	ldrh	r3, [r1, #12]
 8006446:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006448:	079d      	lsls	r5, r3, #30
 800644a:	4606      	mov	r6, r0
 800644c:	460c      	mov	r4, r1
 800644e:	d507      	bpl.n	8006460 <__smakebuf_r+0x1c>
 8006450:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006454:	6023      	str	r3, [r4, #0]
 8006456:	6123      	str	r3, [r4, #16]
 8006458:	2301      	movs	r3, #1
 800645a:	6163      	str	r3, [r4, #20]
 800645c:	b003      	add	sp, #12
 800645e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006460:	ab01      	add	r3, sp, #4
 8006462:	466a      	mov	r2, sp
 8006464:	f7ff ffc8 	bl	80063f8 <__swhatbuf_r>
 8006468:	9f00      	ldr	r7, [sp, #0]
 800646a:	4605      	mov	r5, r0
 800646c:	4639      	mov	r1, r7
 800646e:	4630      	mov	r0, r6
 8006470:	f7ff f904 	bl	800567c <_malloc_r>
 8006474:	b948      	cbnz	r0, 800648a <__smakebuf_r+0x46>
 8006476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800647a:	059a      	lsls	r2, r3, #22
 800647c:	d4ee      	bmi.n	800645c <__smakebuf_r+0x18>
 800647e:	f023 0303 	bic.w	r3, r3, #3
 8006482:	f043 0302 	orr.w	r3, r3, #2
 8006486:	81a3      	strh	r3, [r4, #12]
 8006488:	e7e2      	b.n	8006450 <__smakebuf_r+0xc>
 800648a:	89a3      	ldrh	r3, [r4, #12]
 800648c:	6020      	str	r0, [r4, #0]
 800648e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006492:	81a3      	strh	r3, [r4, #12]
 8006494:	9b01      	ldr	r3, [sp, #4]
 8006496:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800649a:	b15b      	cbz	r3, 80064b4 <__smakebuf_r+0x70>
 800649c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064a0:	4630      	mov	r0, r6
 80064a2:	f000 f81d 	bl	80064e0 <_isatty_r>
 80064a6:	b128      	cbz	r0, 80064b4 <__smakebuf_r+0x70>
 80064a8:	89a3      	ldrh	r3, [r4, #12]
 80064aa:	f023 0303 	bic.w	r3, r3, #3
 80064ae:	f043 0301 	orr.w	r3, r3, #1
 80064b2:	81a3      	strh	r3, [r4, #12]
 80064b4:	89a3      	ldrh	r3, [r4, #12]
 80064b6:	431d      	orrs	r5, r3
 80064b8:	81a5      	strh	r5, [r4, #12]
 80064ba:	e7cf      	b.n	800645c <__smakebuf_r+0x18>

080064bc <_fstat_r>:
 80064bc:	b538      	push	{r3, r4, r5, lr}
 80064be:	4d07      	ldr	r5, [pc, #28]	@ (80064dc <_fstat_r+0x20>)
 80064c0:	2300      	movs	r3, #0
 80064c2:	4604      	mov	r4, r0
 80064c4:	4608      	mov	r0, r1
 80064c6:	4611      	mov	r1, r2
 80064c8:	602b      	str	r3, [r5, #0]
 80064ca:	f7fa ff94 	bl	80013f6 <_fstat>
 80064ce:	1c43      	adds	r3, r0, #1
 80064d0:	d102      	bne.n	80064d8 <_fstat_r+0x1c>
 80064d2:	682b      	ldr	r3, [r5, #0]
 80064d4:	b103      	cbz	r3, 80064d8 <_fstat_r+0x1c>
 80064d6:	6023      	str	r3, [r4, #0]
 80064d8:	bd38      	pop	{r3, r4, r5, pc}
 80064da:	bf00      	nop
 80064dc:	200005ac 	.word	0x200005ac

080064e0 <_isatty_r>:
 80064e0:	b538      	push	{r3, r4, r5, lr}
 80064e2:	4d06      	ldr	r5, [pc, #24]	@ (80064fc <_isatty_r+0x1c>)
 80064e4:	2300      	movs	r3, #0
 80064e6:	4604      	mov	r4, r0
 80064e8:	4608      	mov	r0, r1
 80064ea:	602b      	str	r3, [r5, #0]
 80064ec:	f7fa ff93 	bl	8001416 <_isatty>
 80064f0:	1c43      	adds	r3, r0, #1
 80064f2:	d102      	bne.n	80064fa <_isatty_r+0x1a>
 80064f4:	682b      	ldr	r3, [r5, #0]
 80064f6:	b103      	cbz	r3, 80064fa <_isatty_r+0x1a>
 80064f8:	6023      	str	r3, [r4, #0]
 80064fa:	bd38      	pop	{r3, r4, r5, pc}
 80064fc:	200005ac 	.word	0x200005ac

08006500 <_gettimeofday>:
 8006500:	4b02      	ldr	r3, [pc, #8]	@ (800650c <_gettimeofday+0xc>)
 8006502:	2258      	movs	r2, #88	@ 0x58
 8006504:	601a      	str	r2, [r3, #0]
 8006506:	f04f 30ff 	mov.w	r0, #4294967295
 800650a:	4770      	bx	lr
 800650c:	200005ac 	.word	0x200005ac

08006510 <_init>:
 8006510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006512:	bf00      	nop
 8006514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006516:	bc08      	pop	{r3}
 8006518:	469e      	mov	lr, r3
 800651a:	4770      	bx	lr

0800651c <_fini>:
 800651c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800651e:	bf00      	nop
 8006520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006522:	bc08      	pop	{r3}
 8006524:	469e      	mov	lr, r3
 8006526:	4770      	bx	lr
